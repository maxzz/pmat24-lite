{
  "src/renderer/src/assets/icons/hid3/hid-icon-full.tsx": {
    "m2290h11c50048": "M22.9 0H1.1C.5 0 0 .48 0 1.09v21.82c0 .6.48 1.1 1.09 1.1h21.82c.6 0 1.1-.48 1.1-1.09V1.1A1.1 1.1 0 0 0 22.9 0ZM9.27 22.21H6.71v-8.8H4.99v8.81H2.43V1.71h2.56v8.81h1.72V1.71h2.56v20.5Zm3.95 0h-2.56V1.71h2.56v20.5Zm5.48.11h-4.18V1.71h4.18c1.46 0 2.79 4.45 2.79 10.36s-1.33 10.25-2.79 10.25ZM17.03 3.57v16.88c1.05 0 1.66.73 1.66-8.39s-.72-8.49-1.66-8.49Z",
    "m2127255c23042194242s194242424219424219424242zm077c2035163535s163535353516353516353535zm0438c0602110611130107141714h15v48h06v2h09l122h07l1221zm1522h08c08": "M21.27 2.55c-.23 0-.42-.19-.42-.42s.19-.42.42-.42.42.19.42.42-.19.42-.42.42Zm0-.77c-.2 0-.35.16-.35.35s.16.35.35.35.35-.16.35-.35-.16-.35-.35-.35Zm.04.38c.06-.02.11-.06.11-.13 0-.1-.07-.14-.17-.14h-.15v.48h.06v-.2h.09l.12.2h.07l-.12-.21Zm-.15-.22h.08c.08 0 .12.02.12.09s-.04.09-.12.09h-.08v-.18Z"
  },
  "src/renderer/src/assets/tests/23-0414/test-field-catelog.ts": {
    "c0f864c87bbb422e98a3e033d7360c97": "{c0f864c8-7bbb-422e-98a3-e033d7360c97}",
    "473b1ff7660c4d52b7afe531d4658795": "{473b1ff7-660c-4d52-b7af-e531d4658795}",
    "5059d79b3dcd4a728f87474bc9ba3a74": "{5059d79b-3dcd-4a72-8f87-474bc9ba3a74}",
    "c569394540a64375905fa69b6f0b6166": "{c5693945-40a6-4375-905f-a69b6f0b6166}",
    "loanOfficerWorkbenchUn": "Loan Officer Workbench UN",
    "97980c3afbfa4ba39765a4d5224b4989": "{97980c3a-fbfa-4ba3-9765-a4d5224b4989}",
    "loanOfficerWorkbenchPw": "Loan Officer Workbench PW",
    "6a6694e5039e43128ea24ed8858a6f5e": "{6a6694e5-039e-4312-8ea2-4ed8858a6f5e}",
    "ae2b3db3d0124e208e7ad9085b982904": "{ae2b3db3-d012-4e20-8e7a-d9085b982904}",
    "8c9aa0d06b4e4047a184f48e23d3549e": "{8c9aa0d0-6b4e-4047-a184-f48e23d3549e}",
    "76c93069e3b143d2b1d77edf2589097e": "{76c93069-e3b1-43d2-b1d7-7edf2589097e}",
    "personixUn": "Personix UN",
    "c27595cdece946839c8d7f58a692b8b4": "{c27595cd-ece9-4683-9c8d-7f58a692b8b4}",
    "personixPw": "Personix PW",
    "3b8f0fdb97ed4a359e13012ecd39b03a": "{3b8f0fdb-97ed-4a35-9e13-012ecd39b03a}",
    "77303aa913c94737bfda37f7b22199ac": "{77303aa9-13c9-4737-bfda-37f7b22199ac}",
    "banktelUn": "BankTel UN",
    "cc9b099b7aaa49c9aa0e1ea83f102170": "{cc9b099b-7aaa-49c9-aa0e-1ea83f102170}",
    "banktelPw": "BankTel PW",
    "6da9f97ab88e499db09eafa49c8919d0": "{6da9f97a-b88e-499d-b09e-afa49c8919d0}",
    "upenterprisePw": "UPEnterprise PW",
    "1c3c6451c0764ee597b5520ad98ae4d0": "{1c3c6451-c076-4ee5-97b5-520ad98ae4d0}",
    "uchooseUn": "UChoose UN",
    "0ba7f70f82b14230a1072f8c5b4f1152": "{0ba7f70f-82b1-4230-a107-2f8c5b4f1152}",
    "uchoosePw": "UChoose PW",
    "3126f8ee59c04882aa38143b3332f5d7": "{3126f8ee-59c0-4882-aa38-143b3332f5d7}",
    "forClientsUn": "For Clients UN",
    "479f29b2940c498a8890a9bcfb092b9a": "{479f29b2-940c-498a-8890-a9bcfb092b9a}",
    "forClientsPw": "For Clients PW",
    "8842a78cd80c4209b3c7b0d14f5d0ce5": "{8842a78c-d80c-4209-b3c7-b0d14f5d0ce5}",
    "evolveTestUn": "Evolve Test UN",
    "e98b5791d9aa45d7b1d9e900c3dd8bb9": "{e98b5791-d9aa-45d7-b1d9-e900c3dd8bb9}",
    "evolveTestPw": "Evolve Test PW",
    "6be91868b6e44868b842227c101c0105": "{6be91868-b6e4-4868-b842-227c101c0105}",
    "fanniemaeUn": "FannieMae UN",
    "422fb28914de48b094f8538ef8a4215a": "{422fb289-14de-48b0-94f8-538ef8a4215a}",
    "fanniemaePw": "FannieMae PW",
    "060abb34813a4515a0a8845ab59211e6": "{060abb34-813a-4515-a0a8-845ab59211e6}",
    "hampReportingUn": "Hamp Reporting UN",
    "a499e4ab8e8647138ae1c1bb97bd08e9": "{a499e4ab-8e86-4713-8ae1-c1bb97bd08e9}",
    "d62ae49ca032446e92161a26dd74a3dd": "{d62ae49c-a032-446e-9216-1a26dd74a3dd}",
    "b26fa659a40740abb66168317d7a6b6e": "{b26fa659-a407-40ab-b661-68317d7a6b6e}",
    "0b4c5c84943f4e11968e5ec9b852b9f8": "{0b4c5c84-943f-4e11-968e-5ec9b852b9f8}",
    "a7b7ab61b0fc4e45bc488ec77796e1c2": "{a7b7ab61-b0fc-4e45-bc48-8ec77796e1c2}",
    "9db15be9617c44c39532f948ea44992f": "{9db15be9-617c-44c3-9532-f948ea44992f}",
    "8c56ee7df2794867a8b9b3a498427259": "{8c56ee7d-f279-4867-a8b9-b3a498427259}",
    "memberconnectUn": "MemberConnect UN",
    "baf53da509de45f0a158d48c8dcd81e5": "{baf53da5-09de-45f0-a158-d48c8dcd81e5}",
    "memberconnectPw": "MemberConnect PW",
    "f2541bf4231a4c219ee0cf427e001a8c": "{f2541bf4-231a-4c21-9ee0-cf427e001a8c}",
    "visaOnlinePw": "VISA Online PW",
    "501a2a32e73a47d79846a01ed6086fb7": "{501a2a32-e73a-47d7-9846-a01ed6086fb7}",
    "d47b0fc42eef4070ae758e6a6e39eb83": "{d47b0fc4-2eef-4070-ae75-8e6a6e39eb83}",
    "2e88cf7b048f45718507aeda3b9af8a7": "{2e88cf7b-048f-4571-8507-aeda3b9af8a7}",
    "partnercareUn": "PartnerCare UN",
    "2b3c2865df1544d583da51e8b94e9c98": "{2b3c2865-df15-44d5-83da-51e8b94e9c98}",
    "partnercarePw": "PartnerCare PW",
    "8f7fab4999dd45808f8ebf210fba27f5": "{8f7fab49-99dd-4580-8f8e-bf210fba27f5}",
    "67a87458a49f43819274e16f551ffe28": "{67a87458-a49f-4381-9274-e16f551ffe28}",
    "29ad70931bb94039b24f60a89df800fa": "{29ad7093-1bb9-4039-b24f-60a89df800fa}",
    "watchdogUn": "WatchDog UN",
    "7a400f94455a4538963c9715b6456f05": "{7a400f94-455a-4538-963c-9715b6456f05}",
    "watchdogPw": "WatchDog PW",
    "6bd81d56fe84475788ad36fded111c22": "{6bd81d56-fe84-4757-88ad-36fded111c22}",
    "starstationPw": "StarStation PW",
    "bc8e46beece44c2ea8e4466b92e7bc1d": "{bc8e46be-ece4-4c2e-a8e4-466b92e7bc1d}",
    "58076ded1e684a509dabc7b05e2668f8": "{58076ded-1e68-4a50-9dab-c7b05e2668f8}",
    "bc2540231f364d1599c5257602f145ef": "{bc254023-1f36-4d15-99c5-257602f145ef}",
    "verintConnectPw": "Verint Connect PW",
    "d7b73e16294d43c0880af3b98178831e": "{d7b73e16-294d-43c0-880a-f3b98178831e}",
    "verintConnectUn": "Verint Connect UN",
    "3423132c7f6f455d9e189b2e3891a014": "{3423132c-7f6f-455d-9e18-9b2e3891a014}",
    "profitstarsAchManagerUn": "ProfitStars ACH Manager UN",
    "ad639f88d1474480ab83cf7f82580354": "{ad639f88-d147-4480-ab83-cf7f82580354}",
    "profitstarsAchManagerPw": "ProfitStars ACH Manager PW",
    "afcabb8def1b442d8f47cf394c5f4823": "{afcabb8d-ef1b-442d-8f47-cf394c5f4823}",
    "goldleafDirectAuthorizationUn": "GoldLeaf Direct Authorization UN",
    "c0e67b3fdd434b029d995b4ed7969f30": "{c0e67b3f-dd43-4b02-9d99-5b4ed7969f30}",
    "goldleafDirectAuthorizationPw": "GoldLeaf Direct Authorization PW",
    "b6f56cedc15b4429bd0ccc076f17217e": "{b6f56ced-c15b-4429-bd0c-cc076f17217e}",
    "b4118bf0148f4f1a9851949cac8ee8bd": "{b4118bf0-148f-4f1a-9851-949cac8ee8bd}",
    "titleTrackingPw": "Title Tracking PW",
    "290ed7694c9d4cd4a5c4d8be994080d7": "{290ed769-4c9d-4cd4-a5c4-d8be994080d7}",
    "lexisnexisUn": "LexisNexis UN",
    "7783c40e7e4c4562be9e51ac44304b52": "{7783c40e-7e4c-4562-be9e-51ac44304b52}",
    "lexisnexisPw": "LexisNexis PW",
    "ea39ce5a0c6442e9abd8d01a0637ddd7": "{ea39ce5a-0c64-42e9-abd8-d01a0637ddd7}",
    "viewpointePw": "Viewpointe PW",
    "5d5ee2a2c242479985ad3f24310e2fab": "{5d5ee2a2-c242-4799-85ad-3f24310e2fab}",
    "viewpointeUn": "Viewpointe UN",
    "5d38be15974140c8820d8bc2330049dd": "{5d38be15-9741-40c8-820d-8bc2330049dd}",
    "memberconnectUnClientId": "MemberConnect UN + Client ID",
    "7c2960188ace4156b966bd2e58e5473c": "{7c296018-8ace-4156-b966-bd2e58e5473c}",
    "experianUn": "Experian UN",
    "2d097016277a472fbaf292e57b003a9d": "{2d097016-277a-472f-baf2-92e57b003a9d}",
    "experianPw": "Experian PW",
    "dbf93220dd214a31967d8c0ba7b06916": "{dbf93220-dd21-4a31-967d-8c0ba7b06916}",
    "timeforceUn": "Timeforce UN",
    "0d25c767a0e64bf5a7c257c4a1273a65": "{0d25c767-a0e6-4bf5-a7c2-57c4a1273a65}",
    "timeforcePw": "Timeforce PW",
    "60126debcde04679ace3142f6ccb5ab9": "{60126deb-cde0-4679-ace3-142f6ccb5ab9}",
    "sailpointCompassCommunityUn": "SailPoint Compass Community UN",
    "eb47131bfd224aa58fa009b387ee667e": "{eb47131b-fd22-4aa5-8fa0-09b387ee667e}",
    "sailpointCompassCommunityPw": "SailPoint Compass Community PW",
    "2983dab3e0ea4a32a5f37dd7f5606983": "{2983dab3-e0ea-4a32-a5f3-7dd7f5606983}",
    "vaPortalUn": "VA Portal UN",
    "4e33026a3c854e76a85ec62f41cf11e7": "{4e33026a-3c85-4e76-a85e-c62f41cf11e7}",
    "vaPortalPw": "VA Portal PW",
    "b076adbc906e4f86a89b3d9e8920dd2b": "{b076adbc-906e-4f86-a89b-3d9e8920dd2b}",
    "encompassUn": "Encompass UN",
    "943c71713ba44bd89375ce84a9343225": "{943c7171-3ba4-4bd8-9375-ce84a9343225}",
    "encompassPw": "Encompass PW",
    "d5da228cb6a44bf68e4242753b50b09d": "{d5da228c-b6a4-4bf6-8e42-42753b50b09d}",
    "manheimUn": "Manheim UN",
    "f05ea4a0701c425787330312b10c1cec": "{f05ea4a0-701c-4257-8733-0312b10c1cec}",
    "manheimPw": "Manheim PW",
    "5fd756ddecf5478c80aeac0e9b001c19": "{5fd756dd-ecf5-478c-80ae-ac0e9b001c19}",
    "avayaCmUn": "Avaya CM UN",
    "a2636faabeac4fe08d20489fa643d4da": "{a2636faa-beac-4fe0-8d20-489fa643d4da}",
    "avayaCmPw": "Avaya CM PW",
    "27c098489ded44d6aebb3b95c42d5a7d": "{27c09848-9ded-44d6-aebb-3b95c42d5a7d}",
    "3dSecureUn": "3D Secure UN",
    "ef6ddf05d472452d891ec8934b60593e": "{ef6ddf05-d472-452d-891e-c8934b60593e}",
    "3dSecurePw": "3D Secure PW",
    "123e1a4c3afd4b978e6364ff2c50c9f5": "{123e1a4c-3afd-4b97-8e63-64ff2c50c9f5}",
    "gartnerUn": "Gartner UN",
    "c314ad6f21f443d9bf25786dd606e821": "{c314ad6f-21f4-43d9-bf25-786dd606e821}",
    "gartnerPw": "Gartner PW",
    "249541695e1242209bfc7fd18d659636": "{24954169-5e12-4220-9bfc-7fd18d659636}",
    "bridgerInsightUn": "Bridger Insight UN",
    "f578f8fb110d42f08ea7cf1501f3baf9": "{f578f8fb-110d-42f0-8ea7-cf1501f3baf9}",
    "bridgerInsightPw": "Bridger Insight PW",
    "42ea4a539b5f4e6d8a6228d16fdf6e32": "{42ea4a53-9b5f-4e6d-8a62-28d16fdf6e32}",
    "9b729c9689be4dd29db299eec21fb2b1": "{9b729c96-89be-4dd2-9db2-99eec21fb2b1}",
    "50b92a2b87c8490bad2da58298223866": "{50b92a2b-87c8-490b-ad2d-a58298223866}",
    "07fdf04f4ce542c19fd76ad5f5df3bdf": "{07fdf04f-4ce5-42c1-9fd7-6ad5f5df3bdf}",
    "srsAdvantageUn": "SRS Advantage UN",
    "aaf5de6f0ca24ee5b523bb0b5d81dd7e": "{aaf5de6f-0ca2-4ee5-b523-bb0b5d81dd7e}",
    "srsAdvantagePw": "SRS Advantage PW",
    "d6246cf7612044d58686be44e69000ef": "{d6246cf7-6120-44d5-8686-be44e69000ef}",
    "rapidReportingUn": "Rapid Reporting UN",
    "225f529f6eea40ccbe5631b7ac92801d": "{225f529f-6eea-40cc-be56-31b7ac92801d}",
    "rapidReportingPw": "Rapid Reporting PW",
    "041aa6c900114288a3ed5c9e0a203ef4": "{041aa6c9-0011-4288-a3ed-5c9e0a203ef4}",
    "brightHorizonsPw": "Bright Horizons PW",
    "9219b5f7e0f64174b1c2d26c95e698fa": "{9219b5f7-e0f6-4174-b1c2-d26c95e698fa}",
    "fisCientPortalUn": "FIS Cient Portal UN",
    "85ceac187a8b4a3a80f72428efa04e94": "{85ceac18-7a8b-4a3a-80f7-2428efa04e94}",
    "fisClientPortalPw": "FIS Client Portal PW",
    "1c0ba5562d72483a95aecda8d1999959": "{1c0ba556-2d72-483a-95ae-cda8d1999959}",
    "workdayLearningCenterPw": "Workday Learning Center PW",
    "e6601e90f79c475eac019921a0354174": "{e6601e90-f79c-475e-ac01-9921a0354174}",
    "02b191f50c7f4bba81871efdd6fd6436": "{02b191f5-0c7f-4bba-8187-1efdd6fd6436}",
    "76652dac4f574f92b15f7ec975350da2": "{76652dac-4f57-4f92-b15f-7ec975350da2}",
    "verafinUn": "Verafin UN",
    "cd75e138b46347b3bd629059e75f3e9d": "{cd75e138-b463-47b3-bd62-9059e75f3e9d}",
    "verafinPw": "Verafin PW",
    "459cac5bc0cb491cb901fb7c9c6d5592": "{459cac5b-c0cb-491c-b901-fb7c9c6d5592}",
    "8b63e3382e5b4d5db8f3f7bbfab2f1a5": "{8b63e338-2e5b-4d5d-b8f3-f7bbfab2f1a5}",
    "588156c73cc94e1db2d54326f166978c": "{588156c7-3cc9-4e1d-b2d5-4326f166978c}",
    "083642f60dbb4952a9ad9e4925f63c80": "{083642f6-0dbb-4952-a9ad-9e4925f63c80}",
    "26720f283ea34d03950696e526bf0443": "{26720f28-3ea3-4d03-9506-96e526bf0443}",
    "fiservCwsPw": "FiServ CWS PW",
    "e6d860f3fc4e43fbaf1caed700131c05": "{e6d860f3-fc4e-43fb-af1c-aed700131c05}",
    "df46e1cd22124f3fb3fb5c8fb3ac4de8": "{df46e1cd-2212-4f3f-b3fb-5c8fb3ac4de8}",
    "5e37ad1333564e0ca3c5d93930cd1cb9": "{5e37ad13-3356-4e0c-a3c5-d93930cd1cb9}",
    "65baf96d8ad54eec93d41f2e7a6eef4b": "{65baf96d-8ad5-4eec-93d4-1f2e7a6eef4b}",
    "5161ae7c6c704b19ac817220b06782ec": "{5161ae7c-6c70-4b19-ac81-7220b06782ec}",
    "encompassInstanceId": "Encompass Instance ID",
    "d09f8905372942b698a41078eec84486": "{d09f8905-3729-42b6-98a4-1078eec84486}",
    "630f68eebbd84301b059413db627e02e": "{630f68ee-bbd8-4301-b059-413db627e02e}",
    "0117a9ac90f94401994e754d9c02c848": "{0117a9ac-90f9-4401-994e-754d9c02c848}",
    "3dSecureOrgName": "3d Secure Org Name",
    "31cbcbeaebae4ef989f8e5ff9b7b5049": "{31cbcbea-ebae-4ef9-89f8-e5ff9b7b5049}",
    "fisIdologyUn": "FIS IDology UN",
    "3fb2fad8b4554b8cbaff092d26ba9c48": "{3fb2fad8-b455-4b8c-baff-092d26ba9c48}",
    "fisIdologyPw": "FIS IDology PW",
    "57b20e54b5cd4b599c9012bc112c6c45": "{57b20e54-b5cd-4b59-9c90-12bc112c6c45}",
    "sailpointUniversityPw": "SailPoint University PW",
    "7a75b516a46d42ecb86109f97a2dd466": "{7a75b516-a46d-42ec-b861-09f97a2dd466}",
    "dataverifyUn": "DataVerify UN",
    "0e0b3e8201fd43ee992a7d7a1269c31b": "{0e0b3e82-01fd-43ee-992a-7d7a1269c31b}",
    "dataverifyPw": "DataVerify PW",
    "c019f206e1cd4581bb86c7847e2ced89": "{c019f206-e1cd-4581-bb86-c7847e2ced89}"
  },
  "src/renderer/src/components/0-all-app/1-main.tsx": {
    "hscreenTextsmTextforegroundBgbackgroundGrid": "h-screen text-sm text-foreground bg-background grid grid-rows-[auto_1fr_auto] overflow-hidden",
    "sBlockAllContextMenus": "s block all context menus\r\n    // const active = document.activeElement;\r\n    // if (active?.tagName === "
  },
  "src/renderer/src/components/0-all-app/8-nun-todos.ts": {
    "howToMatchUrl": "How to match URL",
    "asOriginalUrl": "As original URL",
    "regularExpression": "Regular expression",
    "jsccorefe01fsbabininteractexe": "\\\\jsccorefe01\\fsba\\BIN\\InterACT.exe",
    "tHaveStateToSave": "t have state to save)\n\n//12.14.25, create new manifest\n//    //src/shell/xternal-to-renderer/7-napi-calls/4-get-window-mani.ts\n//    //TODO: define ManifestForWindowCreatorResult when result is object\n//    //TODO: error handling\n//    //TODO: test screenshots get/update for many open chrome windows and get content for active window with many other windows opened and controls\n\n//12.15.25, scroll position\n//    //TODO: preserve scroll position - partially done\n//    //TODO: prevent dialog from closing when clicking outside of the dialog\n\n//    //TODO: when open mani chrome windows update sometimes goes forever - provide feedback to user and cancel the update button\n\n//12.17.25, screenshot timeout\n//    //ocasionally the screenshot is not taken and the timeout is reached, we need to have cancel the detection and re-entrance should be blocked on server side as well\n//        //otherwise stack corruption will happen\n//    //build counter is not incremented for browser windows (win32 OK)\n//    //TODO: highlight application window rect; to unsure that it",
    "aRequestedFileOrDirectory": "A requested file or directory could not be found at the time an operation was processed.",
    "tHaveDeleteFolderDelete": "t have delete folder, delete file if folder not exist: we show good message and after restore folder we delete file wo/ any problems),\n//      save (if folder not exist then create folder then it will be created and saved),\n//      open file (especially wo/ electron)\n//TODO: make check for file exists as a separate atom\n\n//05.07.25 //src/renderer/src/store/1-atoms/7-dialogs/2-create-dialog-atoms/3-do-move-to-second-dlg.tsx\n//TODO: manifest name before save should be updated with dialog\n//TODO: highlight fields should be turned off but when?\n//TODO: reset for new login should remove it from the tree - done\n//TODO: reset button should be discard instead of reset - done\n//TODO: create cpass should be switch tab to cpass - done\n//TODO: delete cpass should be switch tab to login or options - done\n//TODO: close folder did not clear all file changes - done\n\n//05.11.25\n//TODO: input instead of h-7 should be h-6 and py-3 replace to py-1\n//TODO: double click on tree item should show dialog to rename\n//TODO: right click on tree item should context menu with rename and delete\n//TODO: show tree item checkboxe for test mode\n\n//05.12.25\n//TODO: show wait animation (sometimes there is a big delay before file is saved) //src/renderer/src/components/2-main/2-right/1-header/0-all/5-save-reset-buttons.tsx\n//TODO: show confetti animation after create new manifest (and add option to disable it) //src/renderer/src/components/4-dialogs/2-dlg-create-login/1-dlg-w-saw/2-entry-create-dlg/0-all-dlg.tsx\n//TODO: make useAccordionState({ formIdx, name }: { formIdx: number; name: string; }) generic with formIdx just name //src/renderer/src/ui/motion-primitives/2-accordion-with-trigger.tsx\n\n//05.12.25\n//TODO: get tree item under cursor and show context menu\n\n//05.14.25\n//TODO: const renameFileUsAtom = useSetAtom(doVerifyManiNameAtom); \n// // Add custom dialog title for rename \n// // update dialog overlay blur \n// // smaller size\n// // add more fields to rename dialog\n//TODO: block global context menu and add option to allow it - done\n//TODO: block global context menu for input fields in a specific way, i.e. remove ",
    "optionHttpsgithubcomsindresorhuselectroncontextmenublobmainindexjsl219051825ProblemNo": " option\n//  //https://github.com/sindresorhus/electron-context-menu/blob/main/index.js#L219\n\n//05.18.25\n//PROBLEM: no scroll bar in tree view when loading a lot of files - done, it",
    "sCssBreakPointsProblem": "s CSS break points\n//PROBLEM: build production fails to load with error: Children on undefined...: react_production_min.Children = { map: S, forEach: function(a2, b2, e2) { - done at least temporary\n//PROBLEM: Uncaught Error: no.in.data when open rename dialog first time\n\n//05.24.25\n//TODO: password change: add column ref from login form; if ref is set then list options are ",
    "todoPasswordChangeRemoveColumn": "\n//TODO: password change: remove column Policy\n//TODO: password change: don",
    "screenDetection": "Screen Detection",
    "thisIsSinglePageLogin": "This is single page login and next page has password",
    "articles": "/articles/",
    "npmInstallDTypesdomnavigation": "npm install -D @types/dom-navigation",
    "tSetFocusToFiled": "t set focus to filed - OK for now but annoying\n//TODO: monitor does not truncate name if explorer with long path is trained - it seems OK\n//TODO: I don"
  },
  "src/renderer/src/components/1-header-for-debug/0-all-debug.tsx": {
    "px2Py2Bgmuted20Borderborder50Borderb": "px-2 py-2 bg-muted/20 border-border/50 border-b flex items-center justify-between gap-x-4"
  },
  "src/renderer/src/components/1-header-for-debug/6-about-dlg.tsx": {
    "text65rem": "text-[.65rem]"
  },
  "src/renderer/src/components/1-header-for-debug/7-1-create-mani-w-apps-list.tsx": {
    "text65rem": "text-[.65rem]"
  },
  "src/renderer/src/components/1-header-for-debug/7-2-create-mani-w-snapshots.tsx": {
    "text65rem": "text-[.65rem]"
  },
  "src/renderer/src/components/1-header-for-debug/7-3-create-mani-w-saw.tsx": {
    "text65rem": "text-[.65rem]"
  },
  "src/renderer/src/components/1-header-for-debug/7-4-close-folder.tsx": {
    "text65rem": "text-[.65rem]"
  },
  "src/renderer/src/components/1-header-for-debug/8-1-test-open-files.tsx": {
    "text65rem": "text-[.65rem]"
  },
  "src/renderer/src/components/1-header-for-debug/8-2-test-open-field-catalog.tsx": {
    "text65rem": "text-[.65rem]"
  },
  "src/renderer/src/components/1-header-for-debug/8-3-test-delete-file.tsx": {
    "text65rem": "text-[.65rem]"
  },
  "src/renderer/src/components/1-header-for-debug/8-4-test-mani-name.tsx": {
    "text65rem": "text-[.65rem]"
  },
  "src/renderer/src/components/2-main/0-all/1-working-area/2-panels-a-b.tsx": {
    "uishadcnresizable": "@ui/shadcn/resizable",
    "defaultsize25defaultsize50": "{\\\"defaultSize\\\":25},{\\\"defaultSize\\\":50}",
    "my3pxPb4ItemsendZ20": "my-[3px] pb-4 items-end z-20"
  },
  "src/renderer/src/components/2-main/0-all/1-working-area/3-shared-classes.tsx": {
    "exportConstPanel1classes": ";\r\n\r\nexport const panel1Classes = ",
    "exportConstPanel2classesHfullRingborder50": ";\r\nexport const panel2Classes = `h-full ring-border/50 ring-1 overflow-hidden ${inputFocusWithinClasses} focus-within:ring-offset-0 group`;\r\nexport const panel3Classes = "
  },
  "src/renderer/src/components/2-main/0-all/2-welcome-page/1-body.tsx": {
    "absoluteInset0BgmutedGridGridrows1fr_auto_1fr": "absolute inset-0 bg-muted grid grid-rows-[1fr_auto_1fr] z-[21]",
    "rowstart1AbsoluteRight4Top2P15": "row-start-1 absolute right-4 -top-2 p-1.5 w-12",
    "p2SizefullGridGridcols1fr_auto_1fr": "p-2 size-full grid grid-cols-[1fr_auto_1fr]"
  },
  "src/renderer/src/components/2-main/0-all/2-welcome-page/2-welcome-hero-title.tsx": {
    "h24Yellow500fff400Red500ea3939Blue500395eeaCyan50039ead7": "h-24 [--yellow-500:#fff400] [--red-500:#ea3939] [--blue-500:#395eea] [--cyan-500:#39ead7]",
    "welcomeToThePasswordManager": "Welcome to the Password Manager Admin Tool",
    "openTheFileOrFolder": "Open the file or folder containing the template files to start working with the application.",
    "openTheFolderContainingThe": "Open the folder containing the template files to start working with the application.",
    "01pxHslvarforeground": "0.1px hsl(var(--foreground))"
  },
  "src/renderer/src/components/2-main/0-all/2-welcome-page/3-open-buttons.tsx": {
    "bgbackgroundActivescale095Transitiontransform": "bg-background active:scale-[0.95] transition-transform"
  },
  "src/renderer/src/components/2-main/0-all/2-welcome-page/4-button-files-picker.tsx": {
    "openFolder": "Open Folder...",
    "openFilesAdvanced": "Open Files... (advanced)"
  },
  "src/renderer/src/components/2-main/0-all/2-welcome-page/5-recent-files-list.tsx": {
    "p1Minw56Bgwhite70Darkbgblack201bgforeground5": "p-1 min-w-56 bg-white/70 dark:bg-black/20 1bg-foreground/5 border border-foreground/10 rounded-md flex flex-col items-start"
  },
  "src/renderer/src/components/2-main/0-all/2-welcome-page/5-ui-icon-delete-recent-item.tsx": {
    "p1OrigincenterRoundedHoverstroke4Hovertextwhite": "p-1 origin-center rounded hover:!stroke-4 hover:text-white hover:bg-red-600",
    "removeThisItemFromThe": "Remove this item from the list of recent items"
  },
  "src/renderer/src/components/2-main/0-all/2-welcome-page/nun/1-star-test.tsx": {
    "absoluteTop0Right24Activescale95": "absolute top-0 -right-24 active:scale-95"
  },
  "src/renderer/src/components/2-main/0-all/2-welcome-page/nun/2-star-a.tsx": {
    "mdFeaturesSmallraylengthControlsThe": "md\r\n * Features:\r\n *      * smallRayLength: Controls the length of small rays relative to big rays (0 to 1)\r\n *      * Uses CSS currentColor for easy color customization\r\n *      * Accepts all standard SVG props\r\n *      * Centered in a 100x100 viewBox\r\n *      * Default size is 1.5rem (w-6 h-6)\r\n *      * Customizable via className prop\r\n * The star will have:\r\n *      * 4 big rays pointing North, East, South, and West\r\n *      * 4 smaller rays at 45-degree angles between the big rays\r\n *      * Responsive and scalable vector graphics\r\n *      * Maintains aspect ratio when resized\r\n * "
  },
  "src/renderer/src/components/2-main/0-all/2-welcome-page/nun/7-timeline.tsx": {
    "deps": "++++++++++++++++++++++++++++++++++ deps",
    "cskipByOnce": "%cskip by once",
    "backgroundcolorChocolateColorWhiteFontsize05rem": ", 'background-color: chocolate; color: white; font-size:0.5rem');\r\n        }\r\n    }\r\n\r\n    async function processAnimation(animation: Animation, generation: number, level = 0) {\r\n        // Check if array of animations or a single animation were the first array item is selector\r\n        if (Array.isArray(animation[0])) { // If list of animations, run all concurrently\r\n            level++;\r\n\r\n            await Promise.all((animation as Animation[]).map(\r\n                // const anis = Promise.all((animation as Animation[]).map(\r\n                async (a: Animation) => {\r\n                    //console.log(",
    "sNotAwaitedAwaitDelay100": "s not awaited\r\n                //await delay(100);\r\n            }\r\n\r\n            console.log(`%c Loop end ${loopCount} `, ",
    "asyncFunctionProcessanimationanimationAnimationGeneration": ");\r\n        }\r\n    }\r\n\r\n    async function processAnimation(animation: Animation, generation: number, level = 0) {\r\n        // Check if array of animations or a single animation were the first array item is selector\r\n        if (Array.isArray(animation[0])) { // If list of animations, run all concurrently\r\n            level++;\r\n\r\n            await Promise.all((animation as Animation[]).map(\r\n                // const anis = Promise.all((animation as Animation[]).map(\r\n                async (a: Animation) => {\r\n                    //console.log(`arr ${",
    "repeatlevel2jsonstringifyaAwaitProcessanimationaAs": ".repeat(level * 2)}${JSON.stringify(a)}`);\r\n\r\n                    // await processAnimation(a as Animation, generation, level);\r\n                    const ani = processAnimation(a as Animation, generation, level);\r\n                    return ani;\r\n                }\r\n            ));\r\n            console.log(",
    "levelReturnAnisElseElse": ");\r\n\r\n            level--;\r\n            // return anis;\r\n        } else {\r\n            // else run the single animation\r\n            //console.log(`sub ${",
    "repeatlevel2jsonstringifyanimationConsolelogcsubCprintanimationrecursiveanimationGeneration": ".repeat(level * 2)}${JSON.stringify(animation)}`);\r\n            console.log(`%csub %c${printAnimationRecursive(animation, generation)}`, ",
    "constAaAwaitAnimateanimationAs": ");\r\n\r\n            const aa = await animate(...(animation as AnimateParams)); // await animate did not return from promise\r\n            // await animate(...(animation as AnimateParams)); // await animate did not return from promise\r\n            // const ani = animate(...(animation as AnimateParams)); // await animate did not return from promise\r\n            console.log(",
    "returnAniReturnScopeFunction": ");\r\n            // return ani;\r\n        }\r\n    }\r\n\r\n    return scope;\r\n};\r\n\r\nfunction printAnimationLines(animation: Animation, level = 0) {\r\n    if (Array.isArray(animation[0])) { // If list of animations, run all concurrently\r\n        console.log(`${",
    "repeatlevel2LevelAnimationAs": ".repeat(level * 2)}[`);\r\n        level++;\r\n\r\n        (animation as Animation[]).forEach(\r\n            (a: Animation): void => {\r\n                res.push(printAnimationRecursive(a as Animation, generation, level));\r\n            }\r\n        );\r\n        level--;\r\n        res.push(`${",
    "repeatlevel2ElseElseRun": ".repeat(level * 2)}],`);\r\n    } else {\r\n        // else run the single animation\r\n        res.push(`${",
    "repeatlevel2jsonstringifyanimationFunctionPrintanimationrecursiveanimationAnimation": ".repeat(level * 2)}${JSON.stringify(animation)},`);\r\n    }\r\n}\r\n\r\nfunction printAnimationRecursive(animation: Animation, generation: number, level = 0): string {\r\n    const res: string[] = [];\r\n    if (Array.isArray(animation[0])) { // If list of animations, run all concurrently\r\n        res.push(`${",
    "repeatlevel2generationjsonstringifyanimationReturnResjoin": ".repeat(level * 2)}${generation}:${JSON.stringify(animation)},`);\r\n    }\r\n    return res.join(",
    "printanimationlineskeyframesPrintanimationkeyframesGgenerationHandleanimateggenerationReturn": ");\r\n            // printAnimationLines(keyframes);\r\n            printAnimation(keyframes, gGeneration);\r\n\r\n            handleAnimate(gGeneration);\r\n\r\n            return () => {\r\n                mounted.current = false;\r\n            };\r\n        }, deps || []\r\n    );\r\n\r\n    async function handleAnimate(generation: number) {\r\n        console.log(",
    "jsonstringifydepsFirstFirstcurrentCountFor": ", JSON.stringify(deps), { first: first.current, count });\r\n\r\n        for (let loopCount = 0; loopCount < count; loopCount++) {\r\n            console.log(",
    "colorGrayFontsize05remColorBlue": ", 'color: gray; font-size:0.5rem', 'color: blue');\r\n                if (!mounted.current) {\r\n                    return;\r\n                }\r\n                // console.log(",
    "colorRedAwaitProcessanimationanimationGeneration": ", 'color: red');\r\n                await processAnimation(animation, generation); //TODO: this is the main problem - it's not awaited\r\n                //await delay(100);\r\n            }\r\n\r\n            console.log(",
    "awaitProcessanimationaAsAnimationGeneration": ");\r\n\r\n                    // await processAnimation(a as Animation, generation, level);\r\n                    const ani = processAnimation(a as Animation, generation, level);\r\n                    return ani;\r\n                }\r\n            ));\r\n            console.log('%cPromise.all done', 'background-color: maroon; color: white; font-size:0.5rem');\r\n\r\n            level--;\r\n            // return anis;\r\n        } else {\r\n            // else run the single animation\r\n            //console.log(",
    "consolelog": ");\r\n            console.log(",
    "colorGrayFontsize05remColorGreen": ", 'color: gray; font-size:0.5rem', 'color: green');\r\n\r\n            const aa = await animate(...(animation as AnimateParams)); // await animate did not return from promise\r\n            // await animate(...(animation as AnimateParams)); // await animate did not return from promise\r\n            // const ani = animate(...(animation as AnimateParams)); // await animate did not return from promise\r\n            console.log('%cAnimation done', 'color: green; font-size:0.5rem');\r\n            // return ani;\r\n        }\r\n    }\r\n\r\n    return scope;\r\n};\r\n\r\nfunction printAnimationLines(animation: Animation, level = 0) {\r\n    if (Array.isArray(animation[0])) { // If list of animations, run all concurrently\r\n        console.log(",
    "levelAnimationAsAnimationforeachA": ");\r\n        level++;\r\n\r\n        (animation as Animation[]).forEach(\r\n            (a: Animation): void => {\r\n                res.push(printAnimationRecursive(a as Animation, generation, level));\r\n            }\r\n        );\r\n        level--;\r\n        res.push(",
    "elseElseRunTheSingle": ");\r\n    } else {\r\n        // else run the single animation\r\n        res.push(",
    "functionPrintanimationrecursiveanimationAnimationGenerationNumber": ");\r\n    }\r\n}\r\n\r\nfunction printAnimationRecursive(animation: Animation, generation: number, level = 0): string {\r\n    const res: string[] = [];\r\n    if (Array.isArray(animation[0])) { // If list of animations, run all concurrently\r\n        res.push("
  },
  "src/renderer/src/components/2-main/0-all/2-welcome-page/nun/8-generate-star.tsx": {
    "calculatePointsFor8pointedStar": ";\r\n}\r\n\r\n/**\r\n * Calculate points for 8-pointed star\r\n * @param bigRayLength - Base length for big rays\r\n * @param smallRayLength - The length of small rays relative to big rays (0 to 1)\r\n * @returns\r\n */\r\nexport function generateStar({ center, bigRayLength = 50, smallRayLength = 0.5 }: { center: number; bigRayLength?: number; smallRayLength?: number; }) {\r\n    const small = bigRayLength * smallRayLength;\r\n\r\n    // Points starting from top, going clockwise\r\n    const points = [\r\n        [0, -bigRayLength], /**/[small, -small],  /**/ // N big // NE small\r\n        [bigRayLength, 0],  /**/[small, small],   /**/ // E big // SE small\r\n        [0, bigRayLength],  /**/[-small, small],  /**/ // S big // SW small\r\n        [-bigRayLength, 0], /**/[-small, -small], /**/ // W big // NW small\r\n    ].map(\r\n        ([x, y]) => "
  },
  "src/renderer/src/components/2-main/1-left/0-all/0-all.tsx": {
    "divClassname": "}>\r\n            <div className={"
  },
  "src/renderer/src/components/2-main/1-left/1-header/0-all-header/0-all.tsx": {
    "px2Py1TextxsBgmuted30Borderborder": "px-2 py-1 text-xs bg-muted/30 border-border border-b",
    "pl25FlexItemscenterGap2": "pl-2.5 flex items-center gap-2",
    "gridGridcolsauto_1fr_auto_auto_autoItemscenter": "grid grid-cols-[auto_1fr_auto_auto_auto] items-center"
  },
  "src/renderer/src/components/2-main/1-left/1-header/0-all-header/1-change-indicator.tsx": {
    "px15Py05TextbackgroundBgorange600Darkbgorange400": "px-1.5 py-0.5 text-background bg-orange-600 dark:bg-orange-400 shadow flex items-center",
    "mr05Size3Textorange500Opacity70": "mr-0.5 size-3 text-orange-500 opacity-70",
    "text065remWmax": "text-[0.65rem] w-max"
  },
  "src/renderer/src/components/2-main/1-left/1-header/1-menu-main/10-file-open/1-open-from-renderer.tsx": {
    "openFolder": "Open Folder...",
    "openFilesAdvanced": "Open Files... (advanced)"
  },
  "src/renderer/src/components/2-main/1-left/1-header/1-menu-main/11-files/22-reveal-in-explorer.tsx": {
    "theFilenameIsNotSet": "The filename is not set",
    "revealInFileExplorer": "Reveal in File Explorer",
    "copyFileName": "Copy File Name",
    "noFileSelected": "No file selected"
  },
  "src/renderer/src/components/2-main/1-left/1-header/1-menu-main/2-close-folder.tsx": {
    "clearFilesList": "Clear files list"
  },
  "src/renderer/src/components/2-main/1-left/1-header/1-menu-main/21-debug/2-test.tsx": {
    "clickTrace": "click trace"
  },
  "src/renderer/src/components/2-main/1-left/1-header/1-menu-main/22-more/c-command-test-ping-pong.tsx": {
    "sharedipctypes": "@shared/ipc-types",
    "msedgeexe": "msedge.exe",
    "getBrowserWindow": "get browser window",
    "noBrowserWindow": "no browser window",
    "beforeCallToBrowserwindow": "before call to browserWindow:",
    "performcommandres": "perform.command.res:",
    "performcommanderror": "perform.command.error:",
    "afterCallToBrowserwindow": "after call to browserWindow:"
  },
  "src/renderer/src/components/2-main/1-left/2-files-list/0-all/1-files-tree-view.tsx": {
    "uishadcntree": "@ui/shadcn/tree",
    "absoluteInsetpxBottom05TextxsSelectnone": "absolute inset-px bottom-0.5 text-xs select-none",
    "sizefullGridGridrows1fr_auto": "size-full grid grid-rows-[1fr_auto]"
  },
  "src/renderer/src/components/2-main/1-left/2-files-list/0-all/2-tree-action-atoms.tsx": {
    "newProxies": "🌟 new proxies",
    "sOkIfDeleyWill": "s OK if deley will be 0, but delay is good for UX (to show dynamic of changes)\r\n        } else {\r\n            console.error(",
    "exportConstDoupdatetreeselectedbyrightpanelatomAtomNull": ");\r\n        }\r\n    }\r\n);\r\n\r\nexport const doUpdateTreeSelectedByRightPanelAtom = atom(\r\n    null,\r\n    (get, set) => {\r\n        const rightPanelFileUsAtom = get(rightPanelAtomAtom);\r\n\r\n        const treeFiles = get(dataWithStateAtom);\r\n        const treeState = get(treeStateAtom);\r\n        const { selectAsTrigger, selectEmptySpace } = get(optionsFilesProxyAtom).itemsState;\r\n\r\n        const treeItem = treeFiles.find((treeFile) => treeFile.fileUsAtom === rightPanelFileUsAtom);\r\n        //console.log(`doUpdateRightPanelSelectedAtom right:${rightPanelFileUsAtom?.toString()} treeItem:`, { atom: treeItem?.fileUsAtom?.toString(), ...treeItem });\r\n\r\n        //printTreeItemsArray(",
    "treefilesIfTreeitemTreestateselectedidUndefined": ", treeFiles);\r\n\r\n        if (!treeItem) {\r\n            treeState.selectedId = undefined;\r\n            set(doTriggerRightPanelSelectedAtom, { newAtom: undefined });\r\n        } else {\r\n            if (treeState.selectedId === treeItem.id) {\r\n                treeState.selectedId = undefined;\r\n            }\r\n            treeItem.state.selected = false;\r\n\r\n            doTreeItemSelect(treeItem, {\r\n                data: treeFiles,\r\n                treeState,\r\n                onSelectChange: (item: DataItemWState | undefined) => set(doTriggerRightPanelSelectedAtom, { newAtom: rightPanelFileUsAtom }),\r\n                selectAsTrigger,\r\n                selectEmptySpace,\r\n            });\r\n        }\r\n\r\n        //printTreeItemsArray(",
    "treefilesFunctionPrinttreeitemsarraytitleStringNewtree": ", treeFiles);\r\n    }\r\n);\r\n\r\n//\r\n\r\nfunction printTreeItemsArray(title: string, newTree: TreeFileItemWState[]) {\r\n    const all = `\\n${newTree.map((item) => `    ${JSON.stringify({ atom: item.fileUsAtom?.toString(), \"tree.id\": item.id, state: item.state })}`).join(",
    "consolelogtitleNewtreelengthAll": ")}`;\r\n    console.log(`${title}: ${newTree.length ? all : ",
    "atomTreeitemfileusatomtostringTreeitemPrinttreeitemsarrayProxies": ", { atom: treeItem?.fileUsAtom?.toString(), ...treeItem });\r\n\r\n        //printTreeItemsArray('🌟🌟 proxies after', treeFiles);\r\n\r\n        if (!treeItem) {\r\n            treeState.selectedId = undefined;\r\n            set(doTriggerRightPanelSelectedAtom, { newAtom: undefined });\r\n        } else {\r\n            if (treeState.selectedId === treeItem.id) {\r\n                treeState.selectedId = undefined;\r\n            }\r\n            treeItem.state.selected = false;\r\n\r\n            doTreeItemSelect(treeItem, {\r\n                data: treeFiles,\r\n                treeState,\r\n                onSelectChange: (item: DataItemWState | undefined) => set(doTriggerRightPanelSelectedAtom, { newAtom: rightPanelFileUsAtom }),\r\n                selectAsTrigger,\r\n                selectEmptySpace,\r\n            });\r\n        }\r\n\r\n        //printTreeItemsArray('🌟🌟 proxies after', treeFiles);\r\n    }\r\n);\r\n\r\n//\r\n\r\nfunction printTreeItemsArray(title: string, newTree: TreeFileItemWState[]) {\r\n    const all = ",
    "joinn": ").join('\\n')}"
  },
  "src/renderer/src/components/2-main/1-left/2-files-list/0-all/3-context-menu.tsx": {
    "datastateclosedanimationnone": "data-[state=closed]:![animation:none]",
    "theFilenameIsNotSet": "The filename is not set",
    "noFileSelected": "No file selected"
  },
  "src/renderer/src/components/2-main/1-left/2-files-list/2-tree-item/0-all.tsx": {
    "uishadcntree": "@ui/shadcn/tree"
  },
  "src/renderer/src/components/2-main/1-left/2-files-list/2-tree-item/1-tree-item-file-index.tsx": {
    "exportFunctionTreeitemfileindexIdxIdx": ";\r\n\r\nexport function TreeItemFileIndex({ idx }: { idx: number; }) {\r\n    return (\r\n        <div className={indexClasses} title="
  },
  "src/renderer/src/components/2-main/1-left/2-files-list/2-tree-item/2-tree-item-icon.tsx": {
    "uishadcntree": "@ui/shadcn/tree",
    "absoluteRight1Top0Text6pxLeading6px": "absolute right-1 top-0 text-[6px] leading-[6px] text-foreground dark:text-foreground flex items-start",
    "loginWithPasswordChange": "Login with password change"
  },
  "src/renderer/src/components/2-main/1-left/2-files-list/2-tree-item/3-tree-item-tooltip-wrap.tsx": {
    "radixuireacttooltip": "@radix-ui/react-tooltip",
    "bgsky800TextwhiteP2RoundedmdShadowlg": "bg-sky-800 text-white p-2 rounded-md shadow-lg pointer-events-none z-[120]",
    "thisIsTheTooltipContent": "This is the tooltip content for item 3",
    "adjustLeftOffsetEg10px": ", // Adjust left offset (e.g., 10px)\r\n                        //     top: "
  },
  "src/renderer/src/components/2-main/1-left/2-files-list/2-tree-item/4-tree-item-tooltip-body.tsx": {
    "flexnoneSelfstartSize5Fillred500Strokemuted": "flex-none self-start size-5 fill-red-500 stroke-muted stroke-[1]",
    "px3Py15": "px-3 py-1.5",
    "passwordChange": "Password change",
    "bailoutDivClassnamefontbold": "}>\r\n                    {bailOut && (<>\r\n                        <div className=\"font-bold\">\r\n                            {"
  },
  "src/renderer/src/components/2-main/1-left/2-files-list/2-tree-item/5-tree-item-name.tsx": {
    "thisFileHasChanges": "This file has changes"
  },
  "src/renderer/src/components/2-main/1-left/2-files-list/x-nun-tree-data.tsx": {
    "uishadcntree": "@ui/shadcn/tree",
    "chatRooms": "Chat Rooms",
    "openSourceProjects": "Open Source Projects",
    "directMessages": "Direct Messages"
  },
  "src/renderer/src/components/2-main/2-right/0-all/index.tsx": {
    "absoluteInsetpxBottom05Textxs": "absolute inset-px bottom-0.5 text-xs",
    "noFileSelected": "No file selected",
    "notSupportedFormat": "Not supported format",
    "divClassname": "}>\r\n            <div className={"
  },
  "src/renderer/src/components/2-main/2-right/1-header/0-all/0-body.tsx": {
    "pr1Maxw4xlXlborderrBorderborderGrid": "!pr-1 max-w-4xl xl:border-r border-border grid",
    "minw0FlexItemscenterGap15": "min-w-0 flex items-center gap-1.5"
  },
  "src/renderer/src/components/2-main/2-right/1-header/0-all/1-row1-title-with-file-us.tsx": {
    "nameFromManifestFile": "Name from manifest file",
    "field_catalogdpn": "field_catalog.dpn",
    "textxsFontnormalTextorange500Darktextyellow500": "text-xs font-normal text-orange-500 dark:text-yellow-500",
    "theActiveFieldCatalogIs": "The active field catalog is located at the root of the open folder \\nand has the file name \"field_catalog.dpn\".",
    "inactive": "(inactive)"
  },
  "src/renderer/src/components/2-main/2-right/1-header/0-all/2-row2-1-file-icons.tsx": {
    "loginForm": "Login form",
    "passwordChangeForm": "Password change form"
  },
  "src/renderer/src/components/2-main/2-right/1-header/0-all/2-row2-2-file-explanation.tsx": {
    "openTheLoginSite": "Open the login site",
    "openThePasswordChangeSite": "Open the password change site",
    "noreferrerNoopener": "noreferrer noopener",
    "pt05Size3": "pt-0.5 size-3",
    "constDomainandopeniconclasses": ";\r\n\r\nconst DomainAndOpenIconClasses = ",
    "manuallyDefinedLoginForA": "Manually defined login for a Windows application",
    "loginForAWindowsApplication": "Login for a Windows application"
  },
  "src/renderer/src/components/2-main/2-right/1-header/0-all/2-row3-filename-parts.tsx": {
    "text07remTruncate": "text-[0.7rem] truncate",
    "fontsansText06remOpacity50": "font-sans text-[0.6rem] opacity-50",
    "pxpxText07remTextforegroundOpacity50Borderb": "px-px text-[0.7rem] text-foreground opacity-50 border-b border-dotted border-primary-500",
    "px1Text7remFontboldTextforegroundOpacity70": "px-1 text-[.7rem] font-bold text-foreground opacity-70",
    "guidExtradpm": "{guid} + extra.dpm",
    "namelastpart": "name/.../last-part"
  },
  "src/renderer/src/components/2-main/2-right/1-header/0-all/5-save-reset-buttons.tsx": {
    "resetFileChanges": "Reset file changes",
    "saveFileChanges": "Save file changes",
    "textbackgroundBgorange600Darkbgorange400Hoverbgorange500Activescale97": "text-background bg-orange-600 dark:bg-orange-400 hover:bg-orange-500 active:scale-[.97]"
  },
  "src/renderer/src/components/2-main/2-right/1-header/3-mini-toolbar/2-fc-tools/1-btn-add-item.tsx": {
    "addNewItem": "Add new item"
  },
  "src/renderer/src/components/2-main/2-right/1-header/3-mini-toolbar/2-fc-tools/2-btn-del-item.tsx": {
    "deleteCurrentItem": "Delete current item"
  },
  "src/renderer/src/components/2-main/2-right/1-header/3-mini-toolbar/2-fc-tools/3-btn-filter.tsx": {
    "filterItems": "Filter items",
    "clearFilter": "Clear filter"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/0-all/1-mani-tabs/1-mani-body.tsx": {
    "mr05Pr4Hfull": "mr-0.5 pr-4 h-full",
    "fontweightNormalColorGreen": "font-weight: normal; color: green",
    "fontweightNormalColorRed": "font-weight: normal; color: red",
    "fontweightNormalColorMagenta": "font-weight: normal; color: magenta",
    "fontweightNormalColorGrayFontsize": "font-weight: normal; color: gray; font-size: 0.6rem"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/0-all/1-mani-tabs/2-mani-tabs-list.tsx": {
    "passwordChange": "Password change",
    "manifestOptions": "Manifest options",
    "loginFields": "Login fields",
    "passwordChangeFields": "Password change fields"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/0-all/1-all-editor-selector.tsx": {
    "fontweightNormalColorGray": "font-weight: normal; color: gray",
    "fontweightNormalColorRed": "font-weight: normal; color: red",
    "fontweightNormalColorMagenta": "font-weight: normal; color: magenta",
    "fontweightNormalColorDarkmagenta": "font-weight: normal; color: darkmagenta"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/0-all/4-tab-content-no-form.tsx": {
    "noLoginForm": "No login form",
    "createAPasswordChangeForm": "Create a password change form",
    "howToCreateForm": "How to create form"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/0-all/1-fields-list.tsx": {
    "p2TextxsTextmanititle30Selectnone": "p-2 text-xs text-mani-title/30 select-none"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/0-all/3-fields-header.tsx": {
    "gridcolsauto_auto_minmax01fr_minmax01fr_minmax01fr_minmax0maxcontent": "grid-cols-[auto_auto_minmax(0,1fr)_minmax(0,1fr)_minmax(0,1fr)_minmax(0,max-content)]",
    "gridcolsauto_auto_minmax01fr_minmax01fr_minmax0maxcontent": "grid-cols-[auto_auto_minmax(0,1fr)_minmax(0,1fr)_minmax(0,max-content)]",
    "p2GridItemscenterGap3pxTextforeground": "p-2 grid items-center gap-[3px] text-foreground rounded-sm",
    "theTypeOfTheField": "The type of the field",
    "useThisFieldOrNot": "Use this field or not",
    "theLabelIsShownTo": "The label is shown to the user next to\\nthe field for entering a value",
    "specifiesTheValueToFill": "Specifies the value to fill out the field\\nand how it is stored",
    "sharedIdCatalog": "Shared ID (Catalog)",
    "theSharedIdDeterminesWhether": "The Shared ID determines whether the value\\nwill be shared through the field catalog",
    "passwordPolicyForTheField": "Password policy for the field",
    "linkToLogin": "Link to login",
    "linkToLoginForm": "Link to login form"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/0-all/8-use-print-form-fields.tsx": {
    "formidxFormidxloginLoginCpass": "${formIdx === FormIdx.login ? 'login' : 'cpass'}",
    "jsonstringifyloginhwnd": "${JSON.stringify(loginHwnd)}",
    "constTitlel": ";\r\n\r\n    const titleL = ",
    "undefined": " : undefined}"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/1-column-useIt/index.tsx": {
    "checkboxdark": "${checkboxDark}",
    "checkboxreplaceall_": "${checkbox.replaceAll(' ', '_')}",
    "m122074793a110010": "M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z",
    "constCheckboxclasses": ";\r\n// const checkboxClasses = "
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/2-column-type/index.tsx": {
    "typeColumn2_typepropsInputhtmlattributeshtmlinputelementUseitatomPaboolean": ";\r\n\r\ntype Column2_TypeProps = InputHTMLAttributes<HTMLInputElement> & {\r\n    useItAtom: PA<boolean>;\r\n    maniField: Mani.Field;\r\n};\r\n\r\nexport function Column2_Type({ useItAtom, maniField, className, ...rest }: Column2_TypeProps) {\r\n\r\n    const useIt = useAtomValue(useItAtom);\r\n    const { password, type = 'NOTYPE' } = maniField;\r\n    const title = fieldTypeTitle(maniField);\r\n    \r\n    return (\r\n        <div className={classNames(column2_TypeClasses, !useIt && ",
    "classnameTitletitleRestFieldtypeiconcomponentClassname": ", className)} title={title} {...rest}>\r\n            <FieldTypeIconComponent className=",
    "fieldmanifieldDivClassname": " field={maniField} />\r\n\r\n            <div className="
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/3-column-label/index.tsx": {
    "thisIsALabelThat": "This is a label that appears next to an input field.",
    "giveMeAName": "Give me a name",
    "noNameGiveMeOne": "No name, give me one"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/4-column-value-selector/1-col-normal-value.tsx": {
    "constInputclasses": ";\r\n\r\nconst inputClasses = ",
    "constInputasrefclasses": ";\r\n\r\nconst inputAsRefClasses = "
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/4-column-value-selector/2-dropdown-value.tsx": {
    "radixuireactdropdownmenu": "@radix-ui/react-dropdown-menu",
    "px15BordermaniborderseparatorBorderlOutlinenoneGroupbtn": "px-1.5 border-mani-border-separator border-l outline-none group/btn",
    "size4BordermutedforegroundRoundedGroupfocuswithinbtnborder": "size-4 border-muted-foreground rounded group-focus-within/btn:border",
    "dialogHasZindex50So": "; // dialog has z-index 50, so we need to be higher\r\n//TODO: maybe have a separate popop for big list and add search; or simplescroll; more fields.. put on top?; scroll to view;\r\n\r\ntype MenuItemValueProps = {\r\n    item: string;\r\n    idx: number;\r\n    selectedIndex: number;\r\n    onSetIndex: (idx: number) => void;\r\n};\r\n\r\nfunction MenuItemValue({ item, idx, selectedIndex, onSetIndex }: MenuItemValueProps) {\r\n    const isSelected = selectedIndex === idx;\r\n\r\n    const isSeparator = item === '-';\r\n    if (isSeparator) {\r\n        return <M.Separator className=",
    "keyidxReturnMitemClassnameclassnamesmenuitemclassesIsselected": " key={idx} />;\r\n    }\r\n\r\n    return (\r\n        <M.Item className={classNames(menuItemClasses, isSelected && ",
    "onselectOnsetindexidxKeyidxIsselectedSymboldot": ")} onSelect={() => onSetIndex(idx)} key={idx}>\r\n            {isSelected && (\r\n                <SymbolDot className=",
    "spanClassname": " />\r\n            )}\r\n\r\n            <span className=",
    "itemSpanMitemConstMenuitemclasses": ">\r\n                {item}\r\n            </span>\r\n        </M.Item>\r\n    );\r\n}\r\n\r\nconst menuItemClasses = "
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/4-column-value-selector/3-select-uitils.ts": {
    "buttonsHaveNoStateValue": "Buttons have no state value"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/4-column-value-selector/7-col-value-linked.tsx": {
    "currentPassword": "Current password",
    "newPassowrd": "New passowrd",
    "confirmNewPassowrd": "Confirm new passowrd",
    "wfullText06remTextblue400Cursorpointer": "w-full text-[0.6rem] !text-blue-400 cursor-pointer"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/5-column-catalog/0-all.tsx": {
    "constSelectasrefclasses": ";\r\n\r\nconst selectAsRefClasses = ",
    "typeColumn5_catalogpropsOmitinputhtmlattributeshtmlinputelementValueRowctx": ";\r\n\r\ntype Column5_CatalogProps = Omit<InputHTMLAttributes<HTMLInputElement>, 'value'> & {\r\n    rowCtx: FieldRowCtx;\r\n    fileUsCtx: FileUsCtx;\r\n    onSelectCatItem: (item: FceItem | undefined) => void;\r\n};\r\n\r\n//TODO: MRU list is mixed with psw and txt. problem with save fc wo/ psw field\r\n//TODO: more fields.. dialog has double selection. we set new selection but did not clear old one\r\n\r\nexport function Column5_Catalog({ rowCtx, fileUsCtx, onSelectCatItem, className, ...rest }: Column5_CatalogProps) {\r\n    const { useItAtom, typeAtom, dbnameAtom, rfieldFormAtom } = rowCtx;\r\n    const doSetFormFieldFromFc = useSetAtom(doSetFormFieldFromFcAtom);\r\n    const doSetFormFieldNotFromFc = useSetAtom(doSetFormFieldNotFromFcAtom);\r\n\r\n    const useIt = useAtomValue(useItAtom);\r\n    const fType = useAtomValue(typeAtom);\r\n    const fromFc = useAtomValue(rowCtx.fromFcAtom);\r\n    const rfieldForm = useAtomValue(rfieldFormAtom);\r\n\r\n    const selectValueAtom = useState(() => atom(fromFc?.fieldValue.dbname || '-1'))[0];\r\n    const [selectValue, setSelectValue] = useAtom(selectValueAtom);\r\n\r\n    useEffect(\r\n        () => {\r\n            //console.log(`Column5_Catalog rfieldForm: ${`${rfieldForm}`.padStart(2, ' ')} ",
    "ifRfieldformManiformnamefieldcatalogSetselectvaluefromfcfieldvaluedbname1": ");\r\n            if (rfieldForm === Mani.FORMNAME.fieldcatalog) {\r\n                setSelectValue(fromFc?.fieldValue.dbname || '-1');\r\n            }\r\n        }, [fromFc, rfieldForm]\r\n    );\r\n\r\n    //console.log(",
    "oSelectvalueSelectvalueRowctxfromfcConst": ": %o, selectValue: ${selectValue}`, rowCtx.fromFc);\r\n\r\n    const dropdownItems = useFcItemsWithMru(fType, fromFc);\r\n    const doOpenDlg = useOpenFcDialog({ fileUsCtx, rowCtx });\r\n\r\n    function onSelectValueChange(value: string) {\r\n        if (value === '-1') {                   // ",
    "dosetformfieldnotfromfcrowctxSetselectvaluevalueElseIfValue": "\r\n            doSetFormFieldNotFromFc(rowCtx);\r\n            setSelectValue(value);\r\n        } else if (value === '-2') {            // ",
    "doopendlgElseConstNewfceitemGetfceitemfromvaluedropdownitems": "\r\n            doOpenDlg();\r\n        } else {\r\n            const newFceItem = getFceItemFromValue(dropdownItems, value);\r\n            if (newFceItem) {\r\n                doSetFormFieldFromFc(rowCtx, newFceItem);\r\n                setSelectValue(newFceItem.fieldValue.dbname);\r\n                // console.log(`onSelectCatItem value: ",
    "fceitemOOptionitemReturnInputselectui": ", fceItem: %o`, optionItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <InputSelectUi\r\n            triggerClasses={classNames(selectClasses, inputRingClasses, !useIt && ",
    "selectvalue1SelectasrefclassesItemsdropdownitemsValueselectvalue": ", selectValue === '-1' && selectAsRefClasses)}\r\n            items={dropdownItems}\r\n            value={selectValue}\r\n            onValueChange={onSelectValueChange}\r\n            {...rest}\r\n        />\r\n    );\r\n}\r\n\r\nfunction useOpenFcDialog({ fileUsCtx, rowCtx }: { fileUsCtx: FileUsCtx; rowCtx: FieldRowCtx; }): () => void {\r\n    const doOpenFldCatDialog = useSetAtom(doOpenFceDlgAtom);\r\n    const doSetFormFieldFromFc = useSetAtom(doSetFormFieldFromFcAtom);\r\n\r\n    const fceOutBoxAtom = useState(() => creteOutBoxAtom<FceDlgOut>())[0];\r\n    const fceOutBox = useAtomValue(fceOutBoxAtom);\r\n\r\n    useEffect(\r\n        () => {\r\n            const selectedItem = fceOutBox?.selectedItem;\r\n            if (selectedItem) {\r\n                console.log('%cSelected from dialog ",
    "cselectedFromDialogSO": "%cSelected from dialog \"%s\", %o",
    "rowctxfromfcConstDropdownitemsUsefcitemswithmruftypeFromfc": ", rowCtx.fromFc);\r\n\r\n    const dropdownItems = useFcItemsWithMru(fType, fromFc);\r\n    const doOpenDlg = useOpenFcDialog({ fileUsCtx, rowCtx });\r\n\r\n    function onSelectValueChange(value: string) {\r\n        if (value === '-1') {                   // \"Not from catalog\"\r\n            doSetFormFieldNotFromFc(rowCtx);\r\n            setSelectValue(value);\r\n        } else if (value === '-2') {            // \"More fields ...\"\r\n            doOpenDlg();\r\n        } else {\r\n            const newFceItem = getFceItemFromValue(dropdownItems, value);\r\n            if (newFceItem) {\r\n                doSetFormFieldFromFc(rowCtx, newFceItem);\r\n                setSelectValue(newFceItem.fieldValue.dbname);\r\n                // console.log("
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/5-column-catalog/1-dropdown.tsx": {
    "exportFunctionInputselectuitItemsValue": ";\r\n\r\nexport function InputSelectUi<T>({ items, value, onValueChange, triggerClasses, placeholder }: InputSelectUiProps) {\r\n    return (\r\n        <Select value={value} onValueChange={onValueChange}>\r\n\r\n            <SelectTrigger className={triggerClasses}>\r\n                <div className=",
    "selectvaluePlaceholderplaceholderDivSelecttriggerSelectcontent": ">\r\n                    <SelectValue placeholder={placeholder} />\r\n                </div>\r\n            </SelectTrigger>\r\n\r\n            <SelectContent align=",
    "buttonclassespopupcolorclassesPosition": " buttonClasses={popupColorClasses} position=",
    "itemsmapItemIdxConstIsstring": ">\r\n                {items.map(\r\n                    (item, idx) => {\r\n                        const isString = typeof item === 'string';\r\n\r\n                        const isSeparator = isString && item === '-';\r\n                        if (isSeparator) {\r\n                            return <SelectSeparator className=",
    "keyidxConstLabelIsstringItem": " key={idx} />;\r\n                        }\r\n\r\n                        const label = isString ? item : item[0];\r\n                        const value = isString ? item : item[1];\r\n                        const value2 = typeof value === 'string' ? value : value.key;\r\n                        return (\r\n                            <SelectItem className="
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/5-column-catalog/2-catalog-dropdown.tsx": {
    "radixuireactdropdownmenu": "@radix-ui/react-dropdown-menu",
    "todoMaybeHaveASeparate": "; //TODO: maybe have a separate popop for big list and add search; or simplescroll; more fields.. put on top?; scroll to view;\r\n\r\nconst menuItemClasses = ",
    "typeCatalogdropdownpropsItemsStringSelectedindex": ";\r\n\r\ntype CatalogDropdownProps = {\r\n    items: string[];\r\n    selectedIndex: number;\r\n    onSetIndex: (idx: number) => void;\r\n};\r\n\r\nexport function CatalogDropdown({ items, selectedIndex, onSetIndex }: CatalogDropdownProps) {\r\n    return (\r\n        <menu.Root>\r\n            <menu.Trigger asChild>\r\n                <button className=",
    "symbolchevrondownClassname": ">\r\n                    <SymbolChevronDown className=",
    "buttonMenutriggerMenuportalMenucontentClassnamemenucontentclasses": " />\r\n                </button>\r\n            </menu.Trigger>\r\n\r\n            <menu.Portal>\r\n                <menu.Content className={menuContentClasses} sideOffset={4} align=",
    "itemsmapitemIdxCatalogmenuitemItemitemIdxidx": ">\r\n                    {items.map((item, idx) => (\r\n                        <CatalogMenuItem item={item} idx={idx} selectedIndex={selectedIndex} onSetIndex={onSetIndex} key={idx} />\r\n                    ))}\r\n                </menu.Content>\r\n            </menu.Portal>\r\n        </menu.Root>\r\n    );\r\n}\r\n\r\ntype CatalogMenuItemProps = {\r\n    item: string;\r\n    idx: number;\r\n    selectedIndex: number;\r\n    onSetIndex: (idx: number) => void;\r\n};\r\n\r\nfunction CatalogMenuItem({ item, idx, selectedIndex, onSetIndex }: CatalogMenuItemProps): JSX.Element {\r\n    const isSelected = idx === selectedIndex;\r\n    const isSeparator = item === '-';\r\n    if (isSeparator) {\r\n        return <menu.Separator className=",
    "keyidxReturnMenuitemClassnameclassnamesmenuitemclassesIsselected": " key={idx} />;\r\n    }\r\n    return (\r\n        <menu.Item className={classNames(menuItemClasses, isSelected && ",
    "onselectOnsetindexidxKeyidxIsselectedSymboldot": ")} onSelect={() => onSetIndex(idx)} key={idx}>\r\n            {isSelected && (\r\n                <SymbolDot className={`absolute left-1.5 size-5 fill-foreground`} />\r\n            )}\r\n\r\n            <span className=",
    "absoluteLeft15Size5Fillforeground": "absolute left-1.5 size-5 fill-foreground"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/6-column-policy-selector/1-col-policy.tsx": {
    "giveMeAName": "Give me a name",
    "noNameGiveMeOne": "No name, give me one"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/1-fields/6-column-policy-selector/7-col-link-to-cpass.tsx": {
    "text06remTextblue400Cursorpointer": "text-[0.6rem] !text-blue-400 cursor-pointer",
    "0InputasrefclassesItemsdropdownallitemsValue": " === '0' && inputAsRefClasses)}\r\n            items={dropdownAllItems}\r\n            value={"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/2-submit/1-in-form-block-submit.tsx": {
    "buttonWillBeUsedTo": " button will be used to submit the form data.",
    "theFormData": " the form data.",
    "mx1Pl15Pr05Py1H7": "mx-1 pl-1.5 pr-0.5 py-1 h-7 w-max text-xs gap-1",
    "dontSubmit": "Don't submit"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/1-normal/2-submit/3-nun-radio-group-for.tsx": {
    "px3Py2Minw14remMaxwmaxBgbackground": "px-3 py-2 min-w-[14rem] max-w-max bg-background rounded flex flex-col space-y-1"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/0-all/0-view.tsx": {
    "600pxgapy4": "@[600px]:gap-y-4",
    "containeractions": "@container/actions",
    "containerpropsMinh180pxTextxs": "@container/props min-h-[180px] text-xs",
    "constSectionlabelclasses": ";\r\n\r\nconst sectionLabelClasses = "
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/0-all/2-login-changes-effect.tsx": {
    "loginchangeseffectfnAfterLinksUpdate": "loginChangesEffectFn after links update",
    "fontsize05rem": "font-size:0.5rem",
    "getfieldlabelatom": "${get(field.labelAtom)}",
    "fontsize05remColorForestgreen": "font-size:0.5rem; color: forestgreen",
    "loginpswsCpasspswsFieldSetfieldrfielduuidatom0": ", { loginPsws, cpassPsws, field });\r\n                            set(field.rfieldUuidAtom, 0);\r\n                        }\r\n                    }\r\n                );\r\n            }, 1000); // We have debounce for value changes and as result we have only the latest change triggered by our set and we are loosing original value from any input or select. debounce value is 100ms and this timeout should be longer than 100ms.\r\n\r\n            //printForms('loginChangesEffectFn after links update', mFormProps.mFormCtx.fileUsCtx.formIdx, get(loginAtom), get(cpassAtom), get);\r\n        }, [mFormProps.mFormCtx?.fileUsCtx?.fileUs?.maniAtomsAtom]\r\n    );\r\n    return rv;\r\n}\r\n\r\nfunction printMFormProps(mFormProps: MFormProps) {\r\n    console.log(",
    "functionPrintformslabelStringFormidxFormidx": ");\r\n}\r\n\r\nfunction printForms(label: string, formIdx: FormIdx, loginFields: FieldRowCtx[], cpassFields: FieldRowCtx[], get: Getter) {\r\n    console.log(",
    "formidxFormidxloginColorForestgreenColor": ", formIdx === FormIdx.login ? 'color: forestgreen' : 'color: darkseagreen', 'font-size:0.5rem');\r\n\r\n    loginFields.length && printFields(loginFields, get);\r\n    cpassFields.length && printFields(cpassFields, get);\r\n\r\n    function printFields(fields: FieldRowCtx[], get: Getter) {\r\n        const colors: string[] = [];\r\n        const lines: string[] = [];\r\n\r\n        function collect(fields: FieldRowCtx[], get: Getter) {\r\n            fields.forEach((field) => {\r\n                const type = get(field.typeAtom) === FieldTyp.psw ? 'psw' : 'txt';\r\n                const rfieldValue = get(field.rfieldAtom);\r\n                const rfield = rfieldValue === 'in' ? ' in' : rfieldValue === 'out' ? ' out' : '   ';\r\n                lines.push("
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/0-all/8-use-print-form-fields.tsx": {
    "getfieldlabelatom": "${get(field.labelAtom)}",
    "backgroundcolorFf00ff50ColorWhite": "background-color: #ff00ff50; color: white;",
    "cField": "%c        field:",
    "backgroundcolorFf00ff50ColorWhiteColor": ", 'background-color: #ff00ff50; color: white;', 'color: magenta');\r\n\r\n            doPrintFields({ label: ",
    "formidxFieldsLoginfieldsDoprintfieldsLabel": ", formIdx, fields: loginFields });\r\n            doPrintFields({ label: ",
    "formidxFieldsCpassfieldsLoginfieldsCpassfields": ", formIdx, fields: cpassFields });\r\n        }, [loginFields, cpassFields]\r\n    );\r\n}\r\n\r\nconst doPrintFieldsAtom = atom(\r\n    null, \r\n    (get, set, {label, formIdx, fields}: { label: string; formIdx: FormIdx; fields: FieldRowCtx[]; }): void => {\r\n        const color = formIdx ? 'green' : 'limegreen';\r\n        console.log(",
    "forConstFieldOfFields": ");\r\n\r\n        for (const field of fields) {\r\n            console.log('%c        field:', ",
    "setdoprintfieldatomFieldConstDoprintfieldatomAtom": ", set(doPrintFieldAtom, field));\r\n        }\r\n    }\r\n);\r\n\r\nconst doPrintFieldAtom = atom(\r\n    null, \r\n    (get, set, field: FieldRowCtx): string => {\r\n        const s = "
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/1-panel-actions/1-header/1-panel-title.tsx": {
    "loginActions": "Login actions",
    "passwordChangeActions": "Password change actions",
    "fillInActions": "Fill in actions"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/1-panel-actions/1-header/2-panel-title-menu.tsx": {
    "textxsGridGridcolsauto_1frGapx2Itemscenter": "text-xs grid grid-cols-[auto_1fr] gap-x-2 items-center"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/1-panel-actions/2-rows/4-single-row.tsx": {
    "thisRowHasErrors": "This row has errors",
    "px4Text65remFontlight": "px-4 text-[.65rem] font-light"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/1-panel-actions/2-rows/5-row-popup-menu.tsx": {
    "moveItemUp": "Move item up",
    "moveItemDown": "Move item down",
    "deleteItem": "Delete item",
    "constSubmenuiconclasses": ";\r\n\r\nconst submenuIconClasses = ",
    "constSubmenudelclasses": ";\r\nconst submenuDelClasses = ",
    "constIconmenuclasses": ";\r\n\r\nconst IconMenuClasses = "
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/1-panel-actions/3-row-details/1-details-key.tsx": {
    "hidden300pxactionsflexItemscenterJustifybetweenSpacex1": "hidden @[300px]/actions:flex items-center justify-between space-x-1",
    "hidden300pxactionsgridGridcols1fr_autoPlaceitemscenterJustifyitemsstart": "hidden @[300px]/actions:grid grid-cols-[1fr_auto] place-items-center justify-items-start space-x-1"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/1-panel-actions/3-row-details/2-details-fld.tsx": {
    "hidden300pxactionsflexItemscenterJustifybetween": "hidden @[300px]/actions:flex items-center justify-between",
    "passwordLinked": "Password (linked)"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/1-panel-actions/3-row-details/3-details-dly.tsx": {
    "hidden300pxactionsblock": "hidden @[300px]/actions:block",
    "hidden300pxactionsflexItemscenterJustifyendSpacex1": "hidden @[300px]/actions:flex items-center justify-end space-x-1"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/1-panel-actions/3-row-details/4-details-pos.tsx": {
    "hidden300pxactionsblock": "hidden @[300px]/actions:block",
    "hidden300pxactionsflexItemscenterJustifyendSpacex1": "hidden @[300px]/actions:flex items-center justify-end space-x-1"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/2-panel-props/0-all/0-all-props.tsx": {
    "constPropsboxclasses": ";\r\n\r\nconst propsBoxClasses = "
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/2-panel-props/0-all/1-panel-props-title.tsx": {
    "opacity100": "!opacity-100"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/2-panel-props/2-props/1-panel-field/1-row-1.tsx": {
    "gridGridcolsauto_1frGap2": "grid grid-cols-[auto_1fr] gap-2",
    "onvaluechangevalueSettypevalueAsFieldtypConst": "}\r\n            onValueChange={(value) => setType(+value as FieldTyp)}\r\n        />\r\n    );\r\n}\r\n\r\nconst inputTypeNames: OptionTextValue[] = [\r\n    [\"Text\", ",
    "passowrd": "], \r\n    [\"Passowrd\", "
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/2-panel-props/2-props/1-panel-field/2-row-2.tsx": {
    "gridcols1fr_1fr_auto": "grid-cols-[1fr_1fr_auto]",
    "gridcols1fr_auto": "grid-cols-[1fr_auto]",
    "gridcolsauto": "grid-cols-[auto]",
    "linkToLogin": "Link to login"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/2-panel-props/2-props/2-panel-key/1-input-key.tsx": {
    "keyToPress": "Key to press",
    "minw9ch": "min-w-[9ch]",
    "keyForThisAction": "Key for this action",
    "selectKey": "Select key"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/2-panel-props/2-props/2-panel-key/2-input-repeat.tsx": {
    "maxw70pxFlexItemscenterGap1": "max-w-[70px] flex items-center gap-1",
    "numberOfTimesToRepeat": "Number of times to repeat this key"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/2-panel-props/2-props/2-panel-key/3-input-modifiers.tsx": {
    "absoluteLeft1Top3Px1Py1": "absolute -left-1 -top-3 px-1 py-1 bg-muted/20 border-border border-dotted border rounded",
    "containermodifierMt2Maxw220px": "@container/modifier mt-2 max-w-[220px]",
    "keyModifiers": "Key modifiers:",
    "my15FlexFlexcolJustifybetween190pxmodifierflexrow": "my-1.5 flex flex-col justify-between @[190px]/modifier:flex-row gap-1",
    "flex1Maxw36FlexItemscenter190pxmodifierflexcol": "flex-1 max-w-36 flex items-center @[190px]/modifier:flex-col @[190px]/modifier:gap-y-px gap-x-2",
    "selfstart190pxmodifierpl2Minw12Textxs190pxmodifiertext065rem": "self-start @[190px]/modifier:pl-2 min-w-12 text-xs @[190px]/modifier:text-[0.65rem] font-light"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/2-panel-props/2-props/3-panel-delay/index.tsx": {
    "flexFlexcolGap05": "flex flex-col gap-0.5",
    "delayInMillisecondBeforePerforming": "Delay in millisecond before performing the next action"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/2-panel-props/2-props/4-panel-pos/0-all.tsx": {
    "hfullGridGridrowsauto_1fr_auto": "h-full grid grid-rows-[auto_1fr_auto]",
    "gridGridcolsauto_auto_1frGapx2": "grid grid-cols-[auto_auto_1fr] gap-x-2",
    "r11R12R13R21R22": "'r11 r12 r13' 'r21 r22 r23' 'r33 r33 r33'",
    "px2H7TextxsMaxw7ch": "px-2 h-7 text-xs max-w-[7ch]",
    "py05FlexItemscenterGap05": "py-0.5 flex items-center gap-0.5",
    "flexItemscenterGap05": "flex items-center gap-0.5",
    "openTargerWindowToSee": "open targer window to see the click point",
    "r11R12R13": "r11 r12 r13",
    "r21R22R23": "r21 r22 r23",
    "r33R33R33": "r33 r33 r33",
    "outlineoffset0pxOutlinered500": "outline-offset-[0px] outline-red-500"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/2-panel-props/2-props/4-panel-pos/1-picker-dnd-w-napi.tsx": {
    "dndfailed": "dnd.failed",
    "moveCursorOverTheTarget": "Move cursor over the target window.",
    "toUpdateTheXAnd": "To update the x and y coordinates, drag the icon onto the target window and release it.",
    "toUpdateClickTheCoordinates": "To update click the coordinates, drag the icon over the target window and release it!"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/2-panel-props/2-props/4-panel-pos/2-picker-dnd-inputs.tsx": {
    "setposvalueyprevPrevData": " }));\r\n                        setPosValueY((prev) => ({ ...prev, data: "
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/2-panel-props/2-props/8-props-ui/1-input-label.tsx": {
    "flexcolGapy05": "flex-col gap-y-0.5"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/8-manual-shared-styles/3-focus.ts": {
    "exportConstFocuswithinclasses": ";\r\n// export const focusWithinClasses = "
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/1-form-editor/2-manual/8-manual-shared-styles/4-actions-menu.ts": {
    "z52ToStayOnTop": "; // z-[52] to stay on top of the dialog\r\n\r\nexport const menuItemClasses = "
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/0-all/0-all-new.tsx": {
    "manifestOptions": "Manifest options",
    "loginFormOptions": "Login form options",
    "passwordChangeFormOptions": "Password change form options",
    "ml1Mr3GridGridcolsauto_minmax01frGapx2": "ml-1 mr-3 grid grid-cols-[auto_minmax(0,1fr)] gap-x-2 gap-y-0.5 select-none",
    "managedLoginName": "Managed login name",
    "authenticateImmediately": "Authenticate immediately",
    "lockOutLoginFields": "Lock out login fields",
    "extendedAuthenticationPolicy": "Extended authentication policy",
    "firstLoginNotificationCounter": "First login notification counter"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/0-all/1-panel-test-inuse-state.tsx": {
    "datastatecheckedbgprimary20Darkdatastatecheckedbgprimary40": "data-[state=checked]:bg-primary/20 dark:data-[state=checked]:bg-primary/40"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/0-all/8-test-in-use-names.tsx": {
    "excludeFromProduction": "Exclude from production",
    "notInProduction": "Not in production",
    "availableForLocalTesting": "Available for local testing"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/1-in-form-options/2-in-form-detection-w32.tsx": {
    "screenDetection": "Screen detection",
    "windowsCaption": "Windows caption",
    "windowClassName": "Window class name",
    "windowTab": "Window tab",
    "tabExecutable": "Tab executable",
    "monitorScreenChanges": "Monitor screen changes",
    "processName": "Process name",
    "commandLine": "Command line",
    "passwordManagerIcon": "Password Manager Icon",
    "locationId": "Location ID",
    "pl6Pr05": "pl-6 pr-0.5"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/1-in-form-options/3-in-form-detection-web.tsx": {
    "screenDetection": "Screen detection",
    "flexItemscenterGap05": "flex items-center gap-0.5",
    "size25Cursorpointer": "size-2.5 cursor-pointer",
    "thisSettingIsReadonlyOnly": "This setting is read-only. Only change it if you understand what you're doing.",
    "thisInputCanBeEdited": "This input can be edited. Please proceed with caution.",
    "thisInputIsLockedBy": "This input is locked by default. Only change it if you understand what you're doing.",
    "absoluteRight2Top7Size4Textforeground75": "absolute right-2 top-7 size-4 text-foreground/75",
    "regularExpression": "Regular expression",
    "originalUrl": "Original URL",
    "pl6Pr05Py1": "pl-6 pr-0.5 py-1",
    "asOriginalUrl": "As original URL",
    "matchExactString": "Match exact string",
    "reDoingSymbollockopenClassnamesizefullTitlethis": "re doing.\" />\r\n                                    : <SymbolLockOpen className=\"size-full\" title=\"This input can be edited. Please proceed with caution.\" />\r\n                                }\r\n                            </div>\r\n\r\n                        </div>\r\n                    )}\r\n                    labelClasses=\"font-normal\"\r\n                    className={classNames(isLocked ? ",
    "readonlyislockedOnclickIslockedToastinfothisInput": ")}\r\n                    readOnly={isLocked}\r\n                    onClick={() => isLocked && toast.info(\"This input is locked by default. Only change it if you understand what you"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/1-in-form-options/5-2-match-how.tsx": {
    "asOriginalUrl": "As original URL",
    "regularExpression": "Regular expression",
    "sameAsOriginalUrl": "Same as original url",
    "matchOnlyDomainOfOriginal": "Match only domain of original url",
    "wildcardMatch": "Wildcard match",
    "regularExpresssion": "Regular expresssion",
    "noDomainMatchExcludeThis": "No domain match (Exclude this login from domain match)",
    "minw28Text06remTextblue400Cursorpointer": "min-w-28 text-[0.6rem] !text-blue-400 cursor-pointer"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/1-in-form-options/5-9-use-is-show-example.tsx": {
    "size4Textorange600Darktextorange400": "size-4 text-orange-600 dark:text-orange-400",
    "howToFindAllText": "How to find all text for localization in this project. Show me small example on the open file in editor.",
    "theRegularExpressionIsEmpty": "The regular expression is empty, so the regular expression is useless.",
    "theRegularExpressionAndThe": "The regular expression and the original URL are an exact match, so the regular expression is useless.",
    "youCanDefineTheRegular": "You can define the regular expression as any part of the original URL, but the website domain will be taken from the original URL.",
    "forExampleIfTheOriginal": "For example, if the original URL is",
    "andTheRegularExpressionIs": "and the regular expression is",
    "theDomainInThisCase": "the domain in this case would be",
    "andTheLoginFormWould": "and the login form would match",
    "thisAllowsYouToDetermine": "This allows you to determine where the form will be used."
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/9-controls/1-section-header/2-sub-section-title.tsx": {
    "mr05Colstart2Placeselfend": "mr-0.5 col-start-2 place-self-end",
    "exportFunctionSubsectiontitle1LabelOpenatom": ";\r\n\r\n// export function SubSectionTitle1({ label, openAtom, formIdx, name }: { label: string; openAtom: PrimitiveAtom<boolean>; formIdx: FormIdx; name: string; }) {\r\n//     const open = useSnapshot(appSettings).right.mani.openInOptions[formIdx][name];\r\n//     const setToggle = () => {\r\n//         appSettings.right.mani.openInOptions[formIdx][name] = !appSettings.right.mani.openInOptions[formIdx][name];\r\n//     };\r\n//     return (\r\n//         <div className={sectionClasses1}>\r\n//             {label}\r\n//             <div className=",
    "divSubslidersbuttonOpenopenSettogglesettoggleDiv": "></div>\r\n\r\n//             <SubSlidersButton open={open} setToggle={setToggle} />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n{/* \r\n    <div className={sectionClasses}>\r\n        {label}\r\n        <SubSlidersButton open={open} setToggle={setToggle} />\r\n    </div> \r\n*/}\r\n\r\nexport function OptionsSubSectionTitle({ label, formIdx, name }: { label: string; formIdx: FormIdx; name: string; }) {\r\n\r\n    const open = useSnapshot(appSettings).right.mani.openInOptions[formIdx][name];\r\n    \r\n    function toggleOpen() {\r\n        appSettings.right.mani.openInOptions[formIdx][name] = !appSettings.right.mani.openInOptions[formIdx][name];\r\n    }\r\n\r\n    return (\r\n        <div className=",
    "buttonClassnameclassnames": ">\r\n            <Button className={classNames(",
    "sectionclassesOnclicktoggleopenDivClassname": ", sectionClasses)} onClick={toggleOpen}>\r\n\r\n                <div className=",
    "labelDivSymbolchevrondownClassnameclassnames": ">\r\n                    {label}\r\n                </div>\r\n\r\n                <SymbolChevronDown\r\n                    className={classNames(",
    "buttonDivConstSectionclasses": ")}\r\n                />\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst sectionClasses = "
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/9-controls/1-section-header/3-nun-options-subsection.tsx": {
    "p2Pb0TextmanititleOutlinenoneFocusunderline": "p-2 pb-0 text-mani-title outline-none focus:underline"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/9-controls/3-button-sliders.tsx": {
    "mr05Colstart2Placeselfend": "mr-0.5 col-start-2 place-self-end"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/9-controls/4-ext-policies/9-types.tsx": {
    "noAdditionalCredential": "No additional credential",
    "pkiSmartCard": "PKI smart card",
    "contactlessWritableCard": "Contactless writable card",
    "contactlessIdCard": "Contactless ID Card",
    "proximityIdCard": "Proximity ID card"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/9-controls/nun/ui-accordion-motion.tsx": {
    "useClient": "use client",
    "useaccordionMustBeUsedWithin": "useAccordion must be used within an AccordionProvider"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/9-controls/nun/ui-accordion3-motion.tsx": {
    "inlineblockM05H4Bggreen500Rounded": "inline-block m-0.5 h-4 bg-green-500 rounded"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/9-controls/nun/ui-accordion4-motion.tsx": {
    "useaccordionMustBeUsedWithin": "useAccordion must be used within an Accordion"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/9-controls/nun/ui-accordion5-motion.tsx": {
    "useClient": "use client",
    "mb4Text2xlFontmediumTextzinc900Darktextwhite": "mb-4 text-2xl font-medium text-zinc-900 dark:text-white",
    "textbaseTextzinc500Darktextzinc400": "text-base text-zinc-500 dark:text-zinc-400",
    "flexWfullFlexcolDivideyDividezinc200": "flex w-full flex-col divide-y divide-zinc-200 border-t border-zinc-200 dark:divide-zinc-700 dark:border-zinc-700",
    "wfullTextleftTextzinc950Darktextzinc50": "w-full text-left text-zinc-950 dark:text-zinc-50",
    "size4Rotate180Textzinc950TransitiontransformDuration200": "size-4 -rotate-180 text-zinc-950 transition-transform duration-200 group-data-[expanded]:rotate-0 dark:text-zinc-50",
    "pt2Textzinc500Darktextzinc400": "pt-2 text-zinc-500 dark:text-zinc-400",
    "gettingStarted": "Getting Started",
    "discoverTheFundamentalConceptsOf": "Discover the fundamental concepts of Motion-Primitives. This section guides you through the installation process and provides an overview of how to integrate these components into your projects. Learn about the core functionalities and how to set up your first animation effectively.",
    "animationProperties": "Animation Properties",
    "exploreTheComprehensiveRangeOf": "Explore the comprehensive range of animation properties available in Motion-Primitives. Understand how to manipulate timing, easing, and delays to create smooth, dynamic animations. This segment also covers the customization of animations to fit the flow and style of your web applications.",
    "advancedUsage": "Advanced Usage",
    "diveDeeperIntoAdvancedTechniques": "Dive deeper into advanced techniques and features of Motion-Primitives. Learn about chaining animations, creating complex sequences, and utilizing motion sensors for interactive animations. Gain insights on how to leverage these advanced features to enhance user experience and engagement.",
    "communityAndSupport": "Community and Support",
    "engageWithTheMotionprimitivesCommunity": "Engage with the Motion-Primitives community to gain additional support and insight. Find out how to participate in discussions, contribute to the project, and access a wealth of shared knowledge and resources. Learn about upcoming features, best practices, and how to get help with your specific use cases."
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/9-controls/ui-accordion.tsx": {
    "reactspringweb": "@react-spring/web",
    "backgroundcolorBlackColorMaroon": "background-color: black; color: maroon",
    "backgroundcolorDarkgreenColorWhite": ", 'background-color: darkgreen; color: white', ",
    "cuseeffect2": "%cuseEffect 2                 ",
    "backgroundcolorDarkgreenColorBlue": "background-color: darkgreen; color: blue",
    "backgroundcolorBlackColorDimgrey": "background-color: black; color: dimgrey",
    "backgroundcolorBlackColorMaroonFirstruncurrent": ", 'background-color: black; color: maroon');\r\n                firstRun.current = false;\r\n            },\r\n        };\r\n        return rv;\r\n    }, [open, height]);\r\n\r\n    useEffect(\r\n        () => {\r\n            // console.log(",
    "ifFirstruncurrentStylesheightsetheightConsolelogcuseeffect2": ");\r\n            \r\n            if (firstRun.current) {\r\n                styles.height.set(height);\r\n                // console.log('%cuseEffect 2                 ', 'background-color: darkgreen; color: blue', ",
    "heightReturnAdivClassnameclassnamesoverflowyhiddenSmallscroll": ");\r\n            }\r\n        }, [height]\r\n    );\r\n\r\n    return (\r\n        <a.div\r\n            className={classNames(\"overflow-y-hidden smallscroll\", SubSubGridClasses)}\r\n            style={styles}\r\n        >\r\n            <div ref={(el) => { el && (setElm(el), refMeasure(el)); }} className={SubSubGridClasses}>\r\n                {/* {console.log("
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/nun/0-nun-all.tsx": {
    "manifestOptions": "Manifest options",
    "loginFormOptions": "Login form options",
    "passwordChangeFormOptions": "Password change form options",
    "ml1Mr3GridGridcolsauto_minmax01frGapx2": "ml-1 mr-3 grid grid-cols-[auto_minmax(0,1fr)] gap-x-2 gap-y-0.5 select-none"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/nun/1-nun-all-block-wraps.tsx": {
    "managedLoginName": "Managed login name",
    "quickLink": "Quick link",
    "screenDetection": "Screen detection",
    "passwordManagerIcon": "Password Manager Icon"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/nun/2-nun-1-general.tsx": {
    "firstLoginNotificationCounter": "First login notification counter"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/nun/2-nun-2-authentication.tsx": {
    "authenticateImmediately": "Authenticate immediately",
    "lockOutLoginFields": "Lock out login fields",
    "extendedAuthenticationPolicy": "Extended authentication policy"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/nun/2-nun-3-QL.tsx": {
    "quickLinkUrl": "Quick link URL"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/nun/2-nun-4-screen-detection-btn.tsx": {
    "p0W45MaxwxlH45Minh56": "p-0 !w-4/5 max-w-xl h-4/5 min-h-56 max-h-[700px] data-[state=open]:[animation-duration:200ms]",
    "textxsSelectnoneGridGridrowsauto_1fr_auto": "text-xs select-none grid grid-rows-[auto_1fr_auto]",
    "right1Top05P2HoverbgmutedHoverroundedmd": "right-1 -top-0.5 p-2 hover:bg-muted hover:rounded-md"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/nun/2-nun-4-screen-detection.tsx": {
    "originalUrl": "Original URL",
    "windowsCaption": "Windows caption",
    "monitorScreenChanges": "Monitor screen changes",
    "windowClassName": "Window class name",
    "windowTab": "Window tab",
    "tabExecutable": "Tab executable",
    "processName": "Process name",
    "commandLine": "Command line"
  },
  "src/renderer/src/components/2-main/2-right/2-file-mani/2-form-options/nun/2-nun-5-pm-icon.tsx": {
    "locationId": "Location ID"
  },
  "src/renderer/src/components/2-main/2-right/3-file-cat/1-cat-body.tsx": {
    "sizefullMaxw4xlGridGridrowsauto_1fr_auto": "size-full max-w-4xl grid grid-rows-[auto_1fr_auto]",
    "sizefullMaxw4xlGridGridrows1fr_auto": "size-full max-w-4xl grid grid-rows-[1fr_auto]"
  },
  "src/renderer/src/components/2-main/2-right/4-file-xml/index.tsx": {
    "p1Darkopacity60": "p-1 dark:opacity-60",
    "varparentwidth": "var(--parent-width)",
    "varparentheight": "var(--parent-height)"
  },
  "src/renderer/src/components/2-main/8-nun-demos/2-active-raw/index.tsx": {
    "borderprimary500BorderRoundedGridGridcolsauto_1fr": "border-primary-500 border rounded grid grid-cols-[auto_1fr]",
    "text55remOpacity50AbsoluteRight2Bottom15": "text-[.55rem] opacity-50 absolute right-2 bottom-1.5",
    "px2Py15HfullBorderprimary500Borderb": "px-2 py-1.5 h-full border-primary-500 border-b text-xs ",
    "py15Borderprimary500BorderlBorderbPx2": "py-1.5 border-primary-500 border-l border-b px-2"
  },
  "src/renderer/src/components/3-footer/0-all.tsx": {
    "px2Py1Minh9Bgmuted20Borderborder50": "px-2 py-1 min-h-9 bg-muted/20 border-border/50 border-t flex items-center justify-between select-none"
  },
  "src/renderer/src/components/3-footer/1-loaded-counter.tsx": {
    "text65rem": "text-[.65rem]",
    "filtertext": "${filterText}",
    "text65remLeading5TextmutedforegroundFlexItemscenter": "text-[.65rem] leading-5 text-muted-foreground flex items-center gap-1 select-none",
    "thereAreNoFilesIn": "There are no files in the folder",
    "noOpenFolder": "No open folder",
    "fieldCatalog": "field catalog:",
    "undefinedIfFileslengthReturnDiv": " : undefined;\r\n\r\n    if (!files?.length) {\r\n        return (\r\n            <div className=\"text-[.65rem]\" title={title}>\r\n                {dir.fpath\r\n                    ? 'There are no files in the folder'\r\n                    : 'No open folder'\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const total = plural('Loaded:', files.length, true);\r\n    const fieldCat = fcAllowed ? ",
    "constSubs": " : '';\r\n    const subs = ",
    "constFilterFiltertext": ";\r\n    const filter = filterText ? ",
    "constFinal": " : '';\r\n    const final = ",
    "returnDivClassnametext65remLeading5Textmutedforeground": ";\r\n\r\n    return (\r\n        <div className=\"text-[.65rem] leading-5 text-muted-foreground flex items-center gap-1 select-none\" title={title}>\r\n            {final}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction plural(label: string, counter: number, doSuffix: boolean = false): string {\r\n    return "
  },
  "src/renderer/src/components/3-footer/2-busy-indicator.tsx": {
    "reactspringweb": "@react-spring/web",
    "p2Py15Textgreen400FlexItemscenter": "p-2 py-1.5 text-green-400 flex items-center gap-1",
    "loading": "Loading...",
    "opacity12s1s": "opacity 1.2s 1s",
    "constStylesUsespringOpacityMsg": ");\r\n\r\n    const styles = useSpring({\r\n        opacity: msg ? 1 : 0,\r\n        config: { duration: 1250 }\r\n    });\r\n\r\n    return (\r\n        <a.div style={styles} className=\"p-2 py-1.5 text-green-400 flex items-center gap-1\">\r\n\r\n            {/* Busy icon animation */}\r\n            <IconRocket className=\"size-5\" style={{ animation: msg ? ",
    "busyExplanationTextDivClassname": " : '' }} />\r\n\r\n            {/* Busy explanation text */}\r\n            <div className={"
  },
  "src/renderer/src/components/4-dialogs/0-global/2-global-shortcuts.tsx": {
    "ctrlshiftf": "Ctrl+Shift+F",
    "ctrlalts": "Ctrl+Alt+S",
    "ctrlshifts": "Ctrl+Shift+S",
    "ctrlaltshiftd": "Ctrl+Alt+Shift+D"
  },
  "src/renderer/src/components/4-dialogs/1-dlg-filter-files/0-all/1-filter-dialog-trigger.tsx": {
    "filesFilter": "Files filter",
    "backdropblur05pxBgbackground80": "backdrop-blur-[0.5px] bg-background/80",
    "px3Py3W45Maxw3xlDatastateopenanimationduration200ms": "px-3 py-3 !w-4/5 max-w-3xl data-[state=open]:[animation-duration:200ms]",
    "textred500Fillred300Darktextred50080Darkfillred50080": "text-red-500 fill-red-300 dark:text-red-500/80 dark:fill-red-500/80"
  },
  "src/renderer/src/components/4-dialogs/1-dlg-filter-files/0-all/2-body.tsx": {
    "absoluteLeft3Top12Translatey12Ppx": "absolute left-3 top-1/2 -translate-y-1/2 p-px size-4",
    "searchForManifests": "Search for manifests",
    "gridGridcols1fr_autoGap4": "grid grid-cols-[1fr_auto] gap-4",
    "flexFlexcolGap05": "flex flex-col gap-0.5",
    "pb05Fontbold": "pb-0.5 font-bold",
    "pb15Textbalance": "pb-1.5 text-balance"
  },
  "src/renderer/src/components/4-dialogs/1-dlg-filter-files/1-files-list/1-filtered-files-list.tsx": {
    "h50vhMaxh75vh": "h-[50vh] max-h-[75vh]"
  },
  "src/renderer/src/components/4-dialogs/1-dlg-filter-files/2-right-side-options/1-drawer-items.tsx": {
    "wmaxGridGridcolsauto_minmax01fr": "w-max grid grid-cols-[auto_minmax(0,1fr)]",
    "w3H3InlineFillforeground70Strokeforeground50": "w-3 h-3 inline fill-foreground/70 stroke-foreground/50 stroke-2",
    "forWindowsApps": "for Windows apps",
    "forWebsites": "for websites"
  },
  "src/renderer/src/components/4-dialogs/1-dlg-filter-files/2-right-side-options/3-nun-drawer.tsx": {
    "uishadcn": "@ui/shadcn",
    "uishadcndrawer": "@ui/shadcn/drawer",
    "mxautoPy4W12MaxwsmRounded": "mx-auto py-4 w-1/2 max-w-sm rounded",
    "filterOptions": "Filter options"
  },
  "src/renderer/src/components/4-dialogs/1-dlg-filter-files/2-right-side-options/4-nun-sort-by.tsx": {
    "uishadcn": "@ui/shadcn",
    "textxsFontnormalFlexPlaceitemscenterGap15": "text-xs font-normal flex place-items-center gap-1.5"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/1-dlg-w-saw/1-entry-saw-monitor/0-all-saw-dlg.tsx": {
    "fixedInset0Bgbackground1bgsky300Z100": "fixed inset-0 bg-background 1bg-sky-300 z-[100]",
    "absoluteLeft15Bottom4": "absolute left-1.5 bottom-4",
    "placeselfcenterActivescale97": "place-self-center active:scale-[.97]"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/1-dlg-w-saw/1-entry-saw-monitor/1-current-app.tsx": {
    "relativePx4Py2WfullBgbackground": "relative px-4 py-2 w-full bg-background 1bg-muted/50 border-border border shadow-inner rounded-md grid place-items-center gap-2",
    "relativeH8GridGridcols1fr_2rem_1frGapx2": "relative h-8 grid grid-cols-[1fr_2rem_1fr] gap-x-2 select-none",
    "text65remTextforeground50": "text-[.65rem] text-foreground/50",
    "ofDetectedControls": "# of detected controls",
    "textwhiteBgorange500HovertextwhiteHoverbgorange600Activescale97": "text-white bg-orange-500 hover:text-white hover:bg-orange-600 active:scale-[.97] shadow"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/1-dlg-w-saw/1-entry-saw-monitor/3-corner-selector.tsx": {
    "thePositionOfThisMonitor": "The position of this monitor window on the screen",
    "absoluteSize4Left12Top12Translatex12": "absolute size-4 left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rounded-md",
    "bgaccent": "!bg-accent",
    "size35BgbackgroundBorderBorderborderGrid": "size-3.5 bg-background border border-border grid place-items-center select-none cursor-pointer"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/1-dlg-w-saw/1-entry-saw-monitor/8-debug-frame.tsx": {
    "radixuireacticons": "@radix-ui/react-icons",
    "absoluteLeft0Top16Py05Wfull": "absolute left-0 -top-16 py-0.5 w-full text-right border-border/75 border rounded-md shadow opacity-50",
    "scale74Originleft": "scale-[.74] origin-left",
    "relativePx3Py3WfullTextsm": "relative px-3 py-3 w-full text-sm border-border/30 border-b flex items-center justify-center select-none",
    "absoluteRight2Top12Translatey12Hovertextwhite": "absolute right-2 top-1/2 -translate-y-1/2 hover:text-white hover:bg-red-500",
    "relativeBgmuted101bgsky40020": "relative bg-muted/10 1bg-sky-400/20",
    "relativeW320pxBgmuted101bgsky40020Borderborder30": "relative w-[320px] bg-muted/10 1bg-sky-400/20 border-border/30 border shadow rounded-md"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/1-dlg-w-saw/2-entry-create-dlg/0-all-dlg.tsx": {
    "radixuireacticons": "@radix-ui/react-icons",
    "createManifest": "Create manifest",
    "relativeTextbaseFontboldBorderbBorderforeground20": "relative text-base font-bold border-b border-foreground/20 flex items-center",
    "sizefullTextxs1bgsky300GridGridrowsauto_auto_1fr": "size-full text-xs 1bg-sky-300 grid grid-rows-[auto_auto_1fr]",
    "py3BordertBorderforeground20": "py-3 border-t border-foreground/20",
    "constDialogclasses": ";\r\n// const dialogClasses = ",
    "constClosebuttonclasses": ";\r\n\r\nconst closeButtonClasses = ",
    "noindata": "no.in.data"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/1-dlg-w-saw/2-entry-create-dlg/2-saw-page-header.tsx": {
    "px3Py3TextsmBgmuted30Flex": "px-3 py-3 text-sm bg-muted/30 flex items-center justify-between gap-0.5",
    "flexFlexcolGap05": "flex flex-col gap-0.5",
    "textxsTextforeground50": "text-xs text-foreground/50",
    "newManifest": "New manifest",
    "sellectTheFieldsYouWant": "Sellect the fields you want to use for the new manifest, submit method and other options."
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/2-mani-content-editor/1-new-mani-mani-body.tsx": {
    "containertabcontentPx2Py1Sizefull": "@container/tab-content px-2 py-1 size-full",
    "thisIsDerivedAtomFrom": " (this is derived atom from newManiContent.newFileUsAtomAtom)"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/2-mani-content-editor/2-new-mani-xml-body.tsx": {
    "absoluteRight25Top05Activescaley95Z10": "absolute right-2.5 top-0.5 active:scale-y-95 z-10"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/8-test-buttons/0-all-test-buttons.tsx": {
    "px2Py05Text67remGridGridcolsauto_auto_auto_auto_auto": "px-2 py-0.5 text-[.67rem] grid grid-cols-[auto_auto_auto_auto_auto] grid-rows-2 gap-x-2",
    "gridGridcols1fr_autoGap1Selectnone": "grid grid-cols-[1fr_auto] gap-1 select-none",
    "flexFlexcolJustifycenterGap05": "flex flex-col justify-center gap-0.5",
    "2LinesFakeCaption": "2 lines fake caption"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/8-test-buttons/8-utils.tsx": {
    "delayWillBe10010000In": "delay will be 100...10000 in ms or 1..100 in sec.",
    "text67remFlexItemscenterGap1": "text-[.67rem] flex items-center gap-1",
    "px05Maxw10H5FontnormalTextforeground": "px-0.5 max-w-10 h-5 font-normal text-foreground bg-background outline-sky-500 -outline-offset-1 bordr-border border rounded"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/0-all/1-entry-drawer-and-new-dlg.tsx": {
    "uishadcndrawer": "@ui/shadcn/drawer",
    "createManifest": "Create manifest"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/0-new-mani-ctx/2-current-page.tsx": {
    "buildRunning": "Build running...",
    "cannotSaveYet": "Cannot save yet.",
    "firstSelectTheApplicationWindow": "First, select the application window."
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/0-new-mani-ctx/8-step-items-data.tsx": {
    "applicationWindow": "Application window",
    "selectTheApplicationWindowFor": "Select the application window for training.",
    "fieldsAndSubmit": "Fields and submit",
    "setUpNewFormFields": "Set up new form fields and submission method.",
    "configureTheNewManifestSettings": "Configure the new manifest settings.",
    "nameTheManifestAndSave": "Name the manifest and save the file."
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/2-right/0-all-wizard/1-wizard-body.tsx": {
    "radixuireacticons": "@radix-ui/react-icons",
    "relativeTextbaseFontboldBorderbBorderforeground20": "relative text-base font-bold border-b border-foreground/20 flex items-center",
    "absoluteLeft38pxTop14pxScale74Bgmuted50": "absolute -left-[38px] -top-[14px] scale-[.74] bg-muted/50 rounded-tl-md border border-foreground/10",
    "absolutePy4Right2Top05Hovertextwhite": "absolute py-4 right-2 -top-0.5 hover:text-white hover:bg-red-500",
    "hfullGridGridcolsauto_1fr": "h-full grid grid-cols-[auto_1fr]",
    "p4BgmutedBorderrBorderforeground20Justifycenter": "p-4 bg-muted border-r border-foreground/20 justify-center",
    "py3BordertBorderforeground20": "py-3 border-t border-foreground/20"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/2-right/0-all-wizard/2-pages-body.tsx": {
    "hfullGridGridrows1fr_autoOverflowhidden": "h-full grid grid-rows-[1fr_auto] overflow-hidden",
    "createNewManifest": "Create new manifest"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/2-right/2-pages/1-page-apps/0-all-body-1.tsx": {
    "hfullTextxsGridGridrowsauto_1fr_auto": "h-full text-xs grid grid-rows-[auto_1fr_auto]",
    "px2Py1SizefullBgmuted50Border": "px-2 py-1 size-full bg-muted/50 border border-border rounded-md"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/2-right/2-pages/1-page-apps/1-apps-grid/0-all.tsx": {
    "gridGap1Gridcolsrepeatautofillminmax160px1fr": "grid gap-1 grid-cols-[repeat(auto-fill,minmax(160px,1fr))]"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/2-right/2-pages/1-page-apps/1-apps-grid/1-tlw-renderer-selector.tsx": {
    "sharedipctypes": "@shared/ipc-types",
    "brokenImage": "Broken image",
    "infoerrorcode": "{info.errorCode}"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/2-right/2-pages/1-page-apps/1-apps-grid/2-tlw-render-image.tsx": {
    "sharedipctypes": "@shared/ipc-types",
    "constCheckboxclasses": ";\r\n\r\nconst checkboxClasses = "
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/2-right/2-pages/1-page-apps/2-btn-refresh-apps.tsx": {
    "refreshWindowList": "Refresh window list",
    "refreshWindowsList": "Refresh windows list",
    "sDoubleProtectedAlreadyBy": "s double protected already by button disabled state\r\n        }\r\n\r\n        setRefreshInProgress(true);\r\n        try {\r\n            await doRefreshApps();\r\n            setToastId(toast.info(",
    "catchErrorConstMsgErrortostringerror": "));\r\n        } catch (error) {\r\n            const msg = errorToString(error);\r\n            console.error(`",
    "msgToasterror": " ${msg}`);\r\n            toast.error(`",
    "toasterror": ");\r\n            toast.error("
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/2-right/2-pages/1-page-apps/3-btn-refresh-progress.tsx": {
    "text65rem": "text-[.65rem]",
    "w6H4Textsky500Barh5Framew1px": "w-6 h-4 text-sky-500 [--barh:5%] [--framew:1px]",
    "refreshWindowsList": "Refresh windows list"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/2-right/2-pages/2-page-fields/0-all-body-2.tsx": {
    "sizefullTextxs1bgsky300GridGridrowsauto_1fr_auto": "size-full text-xs 1bg-sky-300 grid grid-rows-[auto_1fr_auto]"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/2-right/2-pages/3-page-options/0-all-body-3.tsx": {
    "hfullTextxsBgyellow300GridGridrowsauto_1fr_auto": "h-full text-xs bg-yellow-300 grid grid-rows-[auto_1fr_auto]",
    "px1Py2Bgmuted30BordertBorderborder": "px-1 py-2 bg-muted/30 border-t border-border",
    "createNewManifest": "Create new manifest"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/2-right/2-pages/4-page-save/0-all-body-4.tsx": {
    "hfullTextxsBggreen300GridGridrowsauto_1fr_auto": "h-full text-xs bg-green-300 grid grid-rows-[auto_1fr_auto]",
    "px1Py2Bgmuted30BordertBorderborder": "px-1 py-2 bg-muted/30 border-t border-border",
    "createNewManifest": "Create new manifest"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/3-wizard-buttons/0-all-bottom-nav.tsx": {
    "absoluteLeft2Top12Translatey12": "absolute left-2 top-1/2 -translate-y-1/2"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/3-wizard-buttons/1-progress-cancel.tsx": {
    "w6H4Textorange500Barh100Framew4px": "w-6 h-4 text-orange-500 [--barh:100%] [--framew:4px] [--speed:1s]",
    "refreshWindowsList": "Refresh windows list",
    "textxsTextforeground50": "text-xs text-foreground/50",
    "ml2TextwhiteBgorange500HovertextwhiteHoverbgorange600": "ml-2 text-white bg-orange-500 hover:text-white hover:bg-orange-600 active:scale-[.97] shadow"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/8-create-ui/1-steps/1-steps.tsx": {
    "maxw64Bgmuted20FlexFlexcolGap4": "max-w-64 bg-muted/20 flex flex-col gap-4"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/8-create-ui/1-steps/2-step.tsx": {
    "flexItemsstartGap4Size40pxPt8px": "flex items-start gap-4 [--size:40px] [--pt:8px]",
    "relativeSizecalcvarsize": "relative size-[calc(var(--size))]",
    "flex1Ptvarpt": "flex-1 pt-[var(--pt)]",
    "textsmFontmediumTextgray500Darktextgray400": "text-sm font-medium text-gray-500 dark:text-gray-400",
    "textbackgroundBg5c90f0": "text-background bg-[#5c90f0]",
    "bg5c90f050": "bg-[#5c90f0]/50",
    "bg5c90f0": "bg-[#5c90f0]",
    "bg5c90f020": "bg-[#5c90f0]/20",
    "m162782929": "m16.2 7.8 2.9-2.9",
    "m1621622929": "m16.2 16.2 2.9 2.9",
    "m491912929": "m4.9 19.1 2.9-2.9",
    "m49492929": "m4.9 4.9 2.9 2.9",
    "divClassname": "} />\r\n                    <div className={",
    "iconDivDivIslastDiv": "}>\r\n                        {Icon}\r\n                    </div>\r\n                </div>\r\n\r\n                {!isLast && <div className={"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/8-create-ui/3-page-header/0-all-header.tsx": {
    "px3Py3TextsmBgmuted30Flex": "px-3 py-3 text-sm bg-muted/30 flex items-center justify-between gap-0.5",
    "flexFlexcolGap05": "flex flex-col gap-0.5",
    "textxsTextforeground50": "text-xs text-foreground/50"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/8-create-ui/3-page-header/1-btn-source-code.tsx": {
    "1absoluteRight4Top05Activescaley95Z10": "1absolute right-4 top-0.5 active:scale-y-95 z-10"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/8-create-ui/7-select-create-mani-type/2-nun-how-selecor.tsx": {
    "createNewManifest": "Create new manifest"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/8-create-ui/8-nun-steps/1-steps-dot.tsx": {
    "m513l44l197": "M5 13l4 4L19 7"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/8-create-ui/8-nun-steps/2-steps-line.tsx": {
    "constLinevariantsInactiveBackgroundcolor": ";\r\n\r\nconst lineVariants = {\r\n    inactive: {\r\n        backgroundColor: ",
    "neutralTransitionDelay0Duration": ", // neutral\r\n        transition: { delay: 0, duration: 0.7, },\r\n    },\r\n    complete: {\r\n        backgroundColor: "
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/8-create-ui/8-nun-steps/8-steps-demo.tsx": {
    "h4W56RoundedBgneutral100": "h-4 w-5/6 rounded bg-neutral-100",
    "h4W46RoundedBgneutral100": "h-4 w-4/6 rounded bg-neutral-100",
    "constContainer2classes": ";\r\n\r\nconst container2Classes = ",
    "constPrevbuttonclasses": ";\r\n\r\nconst prevButtonClasses = ",
    "constNextbuttonclasses": ";\r\n\r\nconst nextButtonClasses = ",
    "backButtonButtonOnclickSetstepstep": "}\r\n                        >\r\n                            Back\r\n                        </button>\r\n\r\n                        <button\r\n                            onClick={() => setStep(step > 4 ? step : step + 1)}\r\n                            className={"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-1-nun-dlg-w-screenshots/8-create-ui/8-nun-steps/8-steps-demo2.tsx": {
    "constContainer2classes": ";\r\n\r\nconst container2Classes = ",
    "constPrevbuttonclasses": ";\r\n\r\nconst prevButtonClasses = ",
    "constNextbuttonclasses": ";\r\n\r\nconst nextButtonClasses = ",
    "backButtonButtonOnclickSetstepstep": "}\r\n                >\r\n                    Back\r\n                </button>\r\n\r\n                <button\r\n                    onClick={() => setStep(step > 4 ? step : step + 1)}\r\n                    className={"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-2-nun-dlg-w-apps-list/0-entry.tsx": {
    "p0W23Maxw3xlRoundedmdDatastateopenanimationduration200ms": "p-0 !w-2/3 max-w-3xl rounded-md data-[state=open]:[animation-duration:200ms]",
    "newManifest": "New Manifest"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-2-nun-dlg-w-apps-list/1-body.tsx": {
    "refreshWindowsList": "Refresh windows list"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-2-nun-dlg-w-apps-list/2-windows-list.tsx": {
    "px3Py15TextxsFontnormalCursorpointer": "px-3 py-1.5 text-xs font-normal cursor-pointer select-none flex items-center gap-2.5"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-2-nun-dlg-w-apps-list/3-button-create.tsx": {
    "selectApplicationWindowFirst": "Select application window first.",
    "noLoginFieldsDetected": "No login fields detected."
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-2-nun-dlg-w-apps-list/4-test-detected-windows.tsx": {
    "loginWindow": "Login window",
    "registerWindow": "Register window",
    "forgotPasswordWindow": "Forgot password window",
    "resetPasswordWindow": "Reset password window",
    "profileWindow": "Profile window",
    "settingsWindow": "Settings window",
    "termsWindow": "Terms window",
    "privacyWindow": "Privacy window",
    "cookiePolicyWindow": "Cookie policy window",
    "404Window": "404 window",
    "500Window": "500 window",
    "maintenanceWindow": "Maintenance window",
    "comingSoonWindow": "Coming soon window",
    "underConstructionWindow": "Under construction window",
    "customWindow": "Custom window"
  },
  "src/renderer/src/components/4-dialogs/2-dlg-create-login/x-2-nun-dlg-w-apps-list/8-entry-second-dialog-nun.tsx": {
    "p0W23Maxw3xlRoundedmdDatastateopenanimationduration200ms": "p-0 !w-2/3 max-w-3xl rounded-md data-[state=open]:[animation-duration:200ms]"
  },
  "src/renderer/src/components/4-dialogs/4-dlg-field-catalog/0-all/0-all.tsx": {
    "radixuireactdialog": "@radix-ui/react-dialog",
    "w45Maxw4xl": "!w-4/5 max-w-4xl",
    "w80MinwfitMaxwxl": "!w-80 min-w-fit max-w-xl",
    "tempMinh60vhToFitRight": "; // temp.:  min-h-[60vh] to fit right panel height until it will be floated w/ absolute position\r\n\r\nexport function FceDialog() {\r\n    const doCancelFceDlg = useSetAtom(doCancelFceDlgAtom);\r\n\r\n    const fceCtx = useAtomValue(fceDlgTriggerAtom);\r\n    const openMainDlg = !fceCtx?.inData?.openItemPickerDlg;\r\n\r\n    return (\r\n        <D.Dialog open={!!fceCtx} onOpenChange={doCancelFceDlg}>\r\n            {/* <MotionConfig transition={{ type: ",
    "duration7AnimatepresenceFcectxDialogcontentportal": ", duration: .7 }}> */}\r\n            <AnimatePresence>\r\n\r\n            {!!fceCtx && (\r\n                <DialogContentPortal>\r\n                        //{/* We need to scale Prim.Content right after DialogPortal */ }\r\n                        <motion.div\r\n                            // initial={{ opacity: 0, scale: .9 }}\r\n                            // animate={{ opacity: 1, scale: 1 }}\r\n                            // exit={{ opacity: 0, scale: .9 }}\r\n                            // transition={{ duration: .3 }}\r\n                            // layout\r\n                            // layoutId=",
    "classname": "\r\n\r\n                        // className=",
    "fcectxDialogcontentClassnameclassnamesopenmaindlgContentmainclassesContentclasses": "\r\n                        >\r\n                            {/* {fceCtx && */}\r\n                            <DialogContent\r\n                                className={classNames(openMainDlg ? contentMainClasses : contentClasses, contentRestClasses)}\r\n                                noClose\r\n                                hiddenTitle=",
    "overlayclassesoverlayclassesForcemountMotiondivClassname": "\r\n                                overlayClasses={overlayClasses}\r\n                            // forceMount\r\n                            >\r\n                                {/* <motion.div className=",
    "transitionDuration3FcectxFcedialogbodyselector": " transition={{ duration: .3 }}> */}\r\n                                {/* {fceCtx && */}\r\n                                <FceDialogBodySelector fceCtx={fceCtx} />\r\n                                {/* } */}\r\n                            </DialogContent>\r\n                            {/* } */}\r\n                        </motion.div>\r\n\r\n                        // {/* </motion.div> */}\r\n                </DialogContentPortal>\r\n                    )}\r\n            </AnimatePresence>\r\n            {/* </MotionConfig> */}\r\n        </D.Dialog >\r\n    );\r\n}\r\n\r\n//TODO: add initial selection\r\n\r\n//version by https://codesandbox.io/p/sandbox/dialog-radix-framer-motion-8w7dqz?file=%2Fsrc%2FApp.js%3A10%2C55\r\n\r\nimport * as Prim from ",
    "exportConstDialogcontentclasses": ";\r\n\r\nexport const DialogContentClasses = ",
    "typeDialogcontentpropsComponentpropswithoutreftypeofPrimcontentModal": ";\r\n\r\ntype DialogContentProps = ComponentPropsWithoutRef<typeof Prim.Content> & {\r\n    modal?: boolean;\r\n    container?: DialogPortalProps['container'];\r\n    noClose?: boolean;\r\n    withScroll?: boolean; // by default DialogContent has no scroll for popups\r\n    hiddenTitle?: string; // If headenTitle is not provided, then parent component should provide own Prim.Title (same for aria-describedby)\r\n    overlayClasses?: string;\r\n};\r\n\r\nconst preventClose = (e: Event) => e.preventDefault();\r\n\r\nconst DialogContent = forwardRef<ElementRef<typeof Prim.Content>, DialogContentProps>(\r\n    ({ className, children, noClose, withScroll, modal, overlayClasses, onPointerDownOutside, hiddenTitle, ...rest }, ref) => (\r\n        <>\r\n            {withScroll ? <D.DialogOverlayWithScroll className={overlayClasses} /> : <D.DialogOverlay className={overlayClasses} />}\r\n\r\n            <Prim.Content\r\n                ref={ref}\r\n                className={cn(DialogContentClasses, className)}\r\n                onPointerDownOutside={modal ? preventClose : onPointerDownOutside}\r\n                aria-describedby={undefined}\r\n                forceMount\r\n                {...rest}\r\n            >\r\n                {hiddenTitle && (\r\n                    <Prim.Title className="
  },
  "src/renderer/src/components/4-dialogs/4-dlg-field-catalog/0-all/1-dialog-body.tsx": {
    "functionFcedialogmainbodyFcectxFcectxFcectx": ";\r\n\r\nfunction FceDialogMainBody({ fceCtx }: { fceCtx: FceCtx; }) {\r\n    return (\r\n        <div className=",
    "headerFcectxfcectxDivClassname": ">\r\n            <Header fceCtx={fceCtx} />\r\n\r\n            <div className=",
    "fieldcatalogtoolbarClassname": ">\r\n                <FieldCatalogToolbar className=",
    "fcectxfcectxShowpropsexpandtrueDivClassnamegridclassesFldcatitemsgrid": " fceCtx={fceCtx} showPropsExpand={true} />\r\n\r\n                <div className={gridClasses}>\r\n                    <FldCatItemsGrid className=",
    "fcectxfcectxDivClassname": " fceCtx={fceCtx} />\r\n\r\n                    <div className=",
    "selecteditempropsbodyFcectxfcectxDivDivDiv": ">\r\n                        <SelectedItemPropsBody fceCtx={fceCtx} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=",
    "bottombuttonsFcectxfcectxDivDivDiv": ">\r\n                    <BottomButtons fceCtx={fceCtx} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction FceDialogPickerBody({ fceCtx }: { fceCtx: FceCtx; }) {\r\n    return (\r\n        <div className=",
    "fcectxfcectxShowpropsexpandtrueDivClassname": " fceCtx={fceCtx} showPropsExpand={true} />\r\n\r\n                <div className=",
    "fldcatitemsgridClassname": ">\r\n                    <FldCatItemsGrid className=",
    "fcectxfcectxRightpanelguardClassname": " fceCtx={fceCtx} />\r\n                    {/* <RightPanelGuard className=",
    "fcectxfcectxDivDivClassname": " fceCtx={fceCtx} /> */}\r\n                </div>\r\n\r\n                {/* <div className=",
    "totalitemsFcectxfcectxDivDivClassname": ">\r\n                    <TotalItems fceCtx={fceCtx} />\r\n                </div> */}\r\n\r\n                <div className="
  },
  "src/renderer/src/components/4-dialogs/4-dlg-field-catalog/0-all/3-header.tsx": {
    "absoluteRight1Top12Translatey12P2": "absolute right-1 top-1/2 -translate-y-1/2 p-2 hover:bg-muted hover:rounded-sm"
  },
  "src/renderer/src/components/4-dialogs/4-dlg-field-catalog/2-toolbar/6-btn-show-poprs.trigger.tsx": {
    "showItemDetails": "Show item details"
  },
  "src/renderer/src/components/4-dialogs/4-dlg-field-catalog/3-items-grid/0-all.tsx": {
    "gridGridcolsminmax32pxauto_auto_minmax0px1frOutlinenoneSelectnone": "grid grid-cols-[minmax(32px,auto)_auto_minmax(0px,1fr)] outline-none select-none"
  },
  "src/renderer/src/components/4-dialogs/4-dlg-field-catalog/3-items-grid/2-fld-cat-item-row.tsx": {
    "colstart1Pr15Text065remTextrightTextmutedforeground": "col-start-1 pr-1.5 text-[0.65rem] text-right text-muted-foreground",
    "colstart2Mr15Size4Opacity50": "col-start-2 mr-1.5 size-4 opacity-50",
    "constListselectiondarkclasses": ";\r\n\r\nconst listSelectionDarkClasses = ",
    "constParentactiveclasses": ";\r\n\r\nconst parentActiveClasses = ",
    "exportConstRowparentactiveclassesListselectionlightclassesListselectiondarkclasses": ";\r\n\r\nexport const rowParentActiveClasses = `${listSelectionLightClasses} ${listSelectionDarkClasses} ${parentActiveClasses}`;\r\n\r\nexport const rowSelectClasses = ",
    "specificToThisFileStyles": ";\r\n\r\n// Specific to this file styles\r\n\r\nconst rowLocalClasses = ",
    "constRowclassesRowlocalclassesRowselectclassesFunction": ";\r\n\r\nconst rowClasses = `${rowLocalClasses} ${rowSelectClasses}`;\r\n\r\nfunction FieldIcon({ isPsw, className }: { isPsw: boolean | undefined, className: string; }) {\r\n    const type = isPsw ? 'psw' : 'edit';\r\n    const Icon = fieldIcons[type]?.({ className, title: `Field type: ${type}`, });\r\n    return Icon ? Icon : <div className=",
    "functionFieldiconIspswClassnameIspsw": ";\r\n\r\nfunction FieldIcon({ isPsw, className }: { isPsw: boolean | undefined, className: string; }) {\r\n    const type = isPsw ? 'psw' : 'edit';\r\n    const Icon = fieldIcons[type]?.({ className, title: "
  },
  "src/renderer/src/components/4-dialogs/4-dlg-field-catalog/4-selected-item-props/1-props-body.tsx": {
    "pt2FlexFlexcolDisabledopacity25Disabledpointereventsnone": "pt-2 flex flex-col disabled:opacity-25 disabled:pointer-events-none"
  },
  "src/renderer/src/components/4-dialogs/4-dlg-field-catalog/4-selected-item-props/7-view-of-selected.tsx": {
    "exportFunctionViewofselectedindexFcectxFcectx": ";\r\n\r\nexport function ViewOfSelectedIndex({ fceCtx }: { fceCtx: FceCtx; }) {\r\n    const selectedIdx = useAtomValue(fceCtx.selectedIdxStoreAtom);\r\n    return (\r\n        <div className={ixsClasses}>\r\n            {selectedIdx === -1 ? '' : `${selectedIdx + 1}`}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function ViewOfSelectedId({ fceCtx }: { fceCtx: FceCtx; }) {\r\n    const selectedItem = useAtomValue(fceCtx.selectedItemAtom);\r\n    const openMainDlg = !fceCtx.inData?.openItemPickerDlg;\r\n    return (<>\r\n        {openMainDlg && (\r\n            <div className=",
    "noItemSelected": "No item selected"
  },
  "src/renderer/src/components/4-dialogs/4-dlg-field-catalog/4-selected-item-props/8-inputs.tsx": {
    "constInputfocusclasses2": ";\r\n\r\nconst inputFocusClasses2 = ",
    "constFixtextarearesizeclasses2": ";\r\nconst fixTextareaResizeClasses2 = ",
    "constInputringclasses2": ";\r\nconst inputRingClasses2 = ",
    "typeProptextpropsInputhtmlattributeshtmlinputelementEditatomPrimitiveatomstring": ";\r\n\r\ntype PropTextProps = InputHTMLAttributes<HTMLInputElement> & {\r\n    editAtom: PrimitiveAtom<string>;\r\n};\r\n\r\nexport function PropText({ editAtom, className, ...rest }: PropTextProps) {\r\n    const [text, setText] = useAtom(editAtom);\r\n    return (\r\n        <Input\r\n            className={classNames(",
    "inputfocusclasses2InputringclassesClassnameTurnoffautocompleteValuetext": ", inputFocusClasses2, inputRingClasses, className)}\r\n            {...turnOffAutoComplete}\r\n            value={text} onChange={(e) => setText(e.target.value)}\r\n            {...rest}\r\n        />\r\n    );\r\n}\r\n\r\ntype PropTextareaProps = InputHTMLAttributes<HTMLTextAreaElement> & {\r\n    editAtom: PrimitiveAtom<string>;\r\n};\r\n\r\nexport function PropTextarea({ editAtom, className, ...rest }: PropTextareaProps) {\r\n    const [text, setText] = useAtom(editAtom);\r\n    return (\r\n        <Textarea\r\n            className={classNames(",
    "fixtextarearesizeclasses2InputfocusclassesClassnameValuetextOnchangee": ", fixTextareaResizeClasses2, inputFocusClasses, className)}\r\n            value={text} onChange={(e) => setText(e.target.value)}\r\n            {...turnOffAutoComplete}\r\n            {...rest}\r\n        />\r\n    );\r\n}\r\n\r\ntype PropValueProps = InputHTMLAttributes<HTMLInputElement> & {\r\n    fceCtx: FceCtx;\r\n    parentDisabled?: boolean;\r\n};\r\n\r\nexport function PropValue({ fceCtx, ...rest }: PropValueProps) {\r\n    const { useItAtom, valueLifeAtom } = fceCtx.fcePropAtoms;\r\n    return (\r\n        <Column4_Value\r\n            useItAtom={useItAtom}\r\n            valueLifeAtom={valueLifeAtom}\r\n            choosevalue="
  },
  "src/renderer/src/components/4-dialogs/5-confirm/1-confirmation-dlg.tsx": {
    "p0W72RoundedlgMaxwsmDatastateopenanimationduration200ms": "p-0 !w-72 rounded-lg max-w-sm data-[state=open]:[animation-duration:200ms]",
    "justifycenter": "!justify-center",
    "noindata": "no.in.data"
  },
  "src/renderer/src/components/4-dialogs/5-confirm/5-mani-name-dlg.tsx": {
    "managedLoginName": "Managed login name",
    "p0W72RoundedlgMaxwsmGap0": "p-0 !w-72 rounded-lg max-w-sm gap-0 data-[state=open]:[animation-duration:200ms]"
  },
  "src/renderer/src/components/4-dialogs/5-confirm/6-about-dlg.tsx": {
    "sharedipctypes": "@shared/ipc-types",
    "mb151fontsemibold": "mb-1.5 1font-semibold",
    "text065remGrid": "text-[0.65rem] grid",
    "aboutinfo": "about.info:",
    "passwordManagerAdminTool": "Password Manager Admin Tool",
    "noOtherProductsInstalled": "No other products installed"
  },
  "src/renderer/src/components/4-dialogs/5-confirm/8-dialog-title-header.tsx": {
    "relativeRight0Top0P2Hovertextwhite": "!relative !right-0 !top-0 p-2 hover:text-white hover:bg-red-500 hover:opacity-100"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/0-all/0-all-dlg/2-dlg-body.tsx": {
    "passwordPolicyEditor": "Password Policy Editor",
    "p0Pb2WfitMinw440pxMaxw500px": "p-0 pb-2 w-fit min-w-[440px] max-w-[500px] text-xs gap-1 select-none",
    "textxsFontsemiboldBordergray50050Borderb": "text-xs font-semibold border-gray-500/50 border-b"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/0-all/0-conv/1-for-atoms.tsx": {
    "useCustomRule": "Use custom rule",
    "constrainset0": ",\r\n            constrainSet0: ",
    "iscustomFalseCustomMinlenInitrowinputstate8": ",\r\n    isCustom: false,\r\n    custom: '',\r\n    minLen: initRowInputState('8', { type: 'number' }),\r\n    maxLen: initRowInputState('12', { type: 'number' }),\r\n    explanation: '',\r\n    errorText: '',\r\n    testPassword: '',\r\n    testVerified: '',\r\n    constrainPsw: ",
    "useas": ",\r\n            useAs: ",
    "fakeoptionsAtomsExportConstChsetrulenames": ",\r\n    fakeOptions: '',\r\n};\r\n\r\n// Atoms\r\n\r\nexport const chSetRuleNames = [...namesConstrainSet, 'Use custom rule'];\r\n\r\nexport function forAtoms(policies: Mani.FieldPolicy): PolicyDlgTypes.ForAtoms {\r\n    const policy = policyFromStrings(policies.policy, policies.policy2, policies.options);\r\n\r\n    const hasPolicy = policy.useAs !== Poli.UseAs.none;\r\n    const isCustom = policy.custom !== '';\r\n\r\n    if (hasPolicy) {\r\n        const rv: PolicyDlgTypes.ForAtoms = {\r\n            ...initialForAtoms,\r\n            enabled: hasPolicy,\r\n            constrainSet: isCustom ? ",
    "iscustomIscustomCustomPolicycustomMinlen": ",\r\n            isCustom: isCustom,\r\n            custom: policy.custom,\r\n            minLen: initRowInputState(",
    "typeNumberValidateValidateminlenMaxlen": ", { type: 'number', validate: validateMinLen, }),\r\n            maxLen: initRowInputState(",
    "typeNumberValidateValidatemaxlenConstrainpsw": ", { type: 'number', validate: validateMaxLen, }),\r\n            constrainPsw: "
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/0-all/0-create-ui-atoms.tsx": {
    "cdlgUsememoToPolicycreateuiatoms": "%cDlg. useMemo to Policy.createUiAtoms"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/0-all/1-do-close-dlg-atom.tsx": {
    "customRuleIsEmpty": "Custom rule is empty",
    "minLengthMustBeLess": "Min length must be less than max length",
    "dlgCloseToastidFromAtom": "Dlg. close: toastId from atom",
    "backgroundcolorPurpleColorBisque": "background-color: purple; color: bisque",
    "backgroundcolor282828ColorWhite": "background-color: #282828; color: white",
    "consolelog": " : '';\r\n        console.log("
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/0-all/1-util-atoms/3-do-generate-psw.ts": {
    "theCustomRuleIsEmpty": "The custom rule is empty"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/0-all/1-util-atoms/8-utility-check-fns.ts": {
    "minPasswordLengthIsNot": "Min password length is not a number",
    "maxPasswordLengthIsNot": "Max password length is not a number",
    "minPasswordLengthCannotBe": "Min password length cannot be less than 1",
    "maxPasswordLengthIsLess": "Max password length is less than min password length",
    "ifMaxTotalmaxReturn": ";\r\n    }\r\n\r\n    if (max < totalMax) {\r\n        return "
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/2-1st-row-rule-select/1-all.tsx": {
    "gridGridcols1fr_auto_autoGapx2": "grid grid-cols-[1fr_auto_auto] gap-x-2",
    "r11R12R21R22R33": "'r11 r12' 'r21 r22' 'r33 r33'",
    "px2H7TextxsMaxw6ch": "px-2 h-7 text-xs max-w-[6ch]",
    "outlineoffset0pxOutlinered500": "outline-offset-[0px] outline-red-500"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/3-2nd-row-custom-rule/0-all-custom-rule/1-all.tsx": {
    "absoluteRight05FlexItemscenterGap05": "absolute right-0.5 flex items-center gap-0.5"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/3-2nd-row-custom-rule/2-btn-error-info/index.tsx": {
    "p0Textred500Hovertextred500Aspectsquare": "p-0 text-red-500 hover:text-red-500 aspect-square",
    "attentionClickToSeeThe": "Attention. Click to see the message"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/3-2nd-row-custom-rule/3-btn-add-menu-template-part/1-all.tsx": {
    "focuswithinring1FocuswithinringringRoundedmdFlexItemscenter": "focus-within:ring-1 focus-within:ring-ring rounded-md flex items-center",
    "addTemplateParts": "Add template parts",
    "addCharactersSetAz": "Add characters set [a-z]",
    "addSetOfNumbers": "Add set of numbers",
    "addSpecialCharacters": "Add special characters",
    "addCharactersSet": "Add characters set",
    "xz12": "[X-Z!-/]{1,2}"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/3-2nd-row-custom-rule/4-btn-explanation/1-all.tsx": {
    "relativeMx4P0W460pxTextforeground": "relative mx-4 p-0 w-[460px] text-foreground bg-background border-border border shadow",
    "mb4Px4GridGridcolsauto_autoGap2": "mb-4 px-4 grid grid-cols-[auto_auto] gap-2"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/3-2nd-row-custom-rule/4-btn-explanation/9-explanation-rules-text.tsx": {
    "uppercaseLettersIeAThrough": "Uppercase letters, i.e. A through Z",
    "lowercaseLettersIeAThrough": "Lowercase letters, i.e. a through z ",
    "digitsIe0Through9": "Digits, i.e. 0 through 9",
    "specialCharactersIe_": "Special characters, i.e. !”#$%&’()*+,?./:;??@[\\]^_`{|}~",
    "c1": "\r\n    // },\r\n    {\r\n        c1: ",
    "c2": ",\r\n    //     c2: "
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/3-2nd-row-custom-rule/5-btn-show-test-area-trigger/2-button-test-area.tsx": {
    "px1Spacex05": "px-1 space-x-0.5"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/3-2nd-row-custom-rule/8-inline-styles.tsx": {
    "h6BgbackgroundActivescale97Cursorpointer": "h-6 bg-background active:scale-[.97] cursor-pointer"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/3-3rd-row-test-area/1-all/1-all.tsx": {
    "relativeMt6Px2Pt2Pb1": "relative mt-6 px-2 pt-2 pb-1 border-border border rounded flex flex-col gap-0.5",
    "absoluteLeft0Top19px": "absolute left-0 -top-[19px]"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/3-3rd-row-test-area/2-input-with-counter.tsx": {
    "absoluteRight2Top12Translatey12Flex": "absolute right-2 top-1/2 -translate-y-1/2 flex items-center gap-0.5",
    "text065rem": "text-[0.65rem]",
    "whitespacepreText065remFontmonoTextmutedforeground": "whitespace-pre text-[0.65rem] font-mono text-muted-foreground"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/3-3rd-row-test-area/3-button-generate.tsx": {
    "px1Activescale97": "px-1 active:scale-[.97]"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/3-3rd-row-test-area/4-rule-explanation.tsx": {
    "pl4TextxsGridGridcolsauto_1frGapx2": "pl-4 text-xs grid grid-cols-[auto_1fr] gap-x-2"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/3-3rd-row-test-area/7-generate-list/1-all.tsx": {
    "wfullH8Border0RoundedtnoneActivescale90": "w-full h-8 border-0 rounded-t-none active:scale-90",
    "copyAllGeneratedPasswordsTo": "Copy all generated passwords to clipboard"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/2-complexity/3-3rd-row-test-area/7-generate-list/3-generated-list-body.tsx": {
    "mb4MxautoPx4WfitGrid": "mb-4 mx-auto px-4 w-fit grid grid-cols-[auto_auto_auto_auto] gap-x-2 gap-y-0.5",
    "text065remTextendTextmutedforegroundSelectnone": "text-[0.65rem] text-end text-muted-foreground select-none",
    "resultOfChecking": "result of checking",
    "generatedPassword": "generated password",
    "constIdxclassesText065remTextendTextmutedforeground": ";\r\n                    const idxClasses = \"text-[0.65rem] text-end text-muted-foreground select-none\";\r\n                    const idxStr = ",
    "padstart2ConstLenstr": ".padStart(2, ' ');\r\n                    const lenStr = ",
    "padstart2ReturnFragmentKeyidxDiv": ".padStart(2, ' ');\r\n\r\n                    return (\r\n                        <Fragment key={idx}>\r\n                            <div className={testResultClasses} title={titleResult}>\r\n                                {item.ok ? '✔' : '✖'}\r\n                            </div>\r\n\r\n                            <div className={idxClasses} title={titleIndex}>\r\n                                {idxStr}\r\n                            </div>\r\n\r\n                            <div className=\"font-mono\" title={titleGeneratedPassword}>\r\n                                {item.psw}\r\n                            </div>\r\n\r\n                            <div className={idxClasses} title={titlePasswordLength}>\r\n                                {lenStr}\r\n                            </div>\r\n                        </Fragment>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst titleResult = \"result of checking\";\r\nconst titleIndex = \"index\";\r\nconst titleGeneratedPassword = \"generated password\";\r\nconst titlePasswordLength = \"password length\";\r\n\r\nexport function copyToClipboard(generatedList: GenNPasswordsItem[]) {\r\n    const text = generatedList.map(\r\n        (item, idx) => "
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/4-generate-by/index.tsx": {
    "onchangeSetuseus": "} onChange={() => setUseUs(",
    "theUserWillEnterA": ")}>\r\n                The user will enter a password\r\n            </Radio>\r\n\r\n            <Radio name=\"gen-type\" checked={useAs === "
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/9-constrols/1-check.tsx": {
    "wmaxInlineflexItemscenterGapx15Selectnone": "w-max inline-flex items-center gap-x-1.5 select-none cursor-pointer"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/9-constrols/2-radio.tsx": {
    "wmaxInlineflexItemscenterGapx15Selectnone": "w-max inline-flex items-center gap-x-1.5 select-none cursor-pointer"
  },
  "src/renderer/src/components/4-dialogs/7-dlg-policy/9-constrols/4-nun-dropdown.tsx": {
    "radixuireactselect": "@radix-ui/react-select",
    "radixuireacticons": "@radix-ui/react-icons",
    "constSelectitemclasses": ";\r\n\r\nconst selectItemClasses = ",
    "constTriggerclasses": ";\r\n\r\nconst triggerClasses = ",
    "typeDropdownpropsHtmlattributeshtmlbuttonelementItemsString": ";\r\n\r\ntype DropdownProps = HTMLAttributes<HTMLButtonElement> & {\r\n    items: string[];\r\n    value?: string;\r\n    onValueChange?(value: string): void;\r\n};\r\n\r\nexport function NunDropdown({ items, value, onValueChange, className }: DropdownProps) {\r\n    return (\r\n        <Select.Root value={value} onValueChange={onValueChange}>\r\n\r\n            <Select.Trigger asChild>\r\n                <div className={classNames(triggerClasses, className)} tabIndex={0}>\r\n                    <Select.Value className={inputFocusClasses} />\r\n\r\n                    <Select.Icon>\r\n                        <SymbolChevronDown className=",
    "selecticonDivSelecttriggerSelectportalContainerdocumentgetelementbyidportal": " />\r\n                    </Select.Icon>\r\n                </div>\r\n            </Select.Trigger>\r\n\r\n            <Select.Portal> {/* container={document.getElementById('portal')} // dialog from select portal will throw warning */}\r\n                <Select.Content className=",
    "selectviewportClassnameviewportclassesItemsmapItemIdx": ">\r\n                    <Select.Viewport className={viewportClasses}>\r\n                        {items.map(\r\n                            (item, idx) => (\r\n                                <Select.Item className={selectItemClasses} value={`${idx}`} key={idx}>\r\n                                    <Select.ItemText>{item}</Select.ItemText>\r\n\r\n                                    <Select.ItemIndicator className="
  },
  "src/renderer/src/components/4-dialogs/8-dlg-options/0-all.tsx": {
    "p0W45MaxwxlH45Minh56": "p-0 !w-4/5 max-w-xl h-4/5 min-h-56 max-h-[700px] data-[state=open]:[animation-duration:200ms]",
    "textxsSelectnoneGridGridrowsauto_1fr_autoGap4": "text-xs select-none grid grid-rows-[auto_1fr_auto] gap-4",
    "right1Top05P2HoverbgmutedHoverroundedmd": "right-1 -top-0.5 p-2 hover:bg-muted hover:rounded-md",
    "dialogPasswordPolicy": "Dialog Password Policy"
  },
  "src/renderer/src/components/4-dialogs/8-dlg-options/5-settings-advanced.tsx": {
    "hiddenFromTheEndUser": "Hidden from the end user debug only",
    "py1GridGridcolsauto_autoGap2Gridflowdense": "py-1 grid grid-cols-[auto_auto] gap-2 grid-flow-dense",
    "colstart2Hasdisabledopacity50": "col-start-2 has-[:disabled]:opacity-50",
    "pt4Colstart1Colspan2Text65remLeading3": "pt-4 col-start-1 col-span-2 text-[.65rem] leading-3 text-foreground/50 flex gap-2",
    "px1Bgmuted40BorderborderBorderRounded": "px-1 bg-muted/40 border-border border rounded",
    "nametestext": "[name.test.ext]"
  },
  "src/renderer/src/components/4-dialogs/8-dlg-options/8-shared-classes.tsx": {
    "textxsFontnormalFlexPlaceitemscenterGap15": "text-xs font-normal flex place-items-center gap-1.5 cursor-pointer"
  },
  "src/renderer/src/store/0-serve-atoms/0-create/0-create-mani-ctx-atoms/0-create-mani-atoms.ts": {
    "sUmbrellaSoWeCan": "s umbrella, so we can safely use ! enywhere under it\r\n    if (!metaForm) {\r\n        return;\r\n    }\r\n\r\n    let normal: NFormCnt | undefined;\r\n    let manual: MFormCnt | undefined;\r\n\r\n    if (metaForm.disp.isScript) {\r\n        manual = ManualFieldsState.createManualFormCnt(fileUsCtx);\r\n    } else {\r\n        normal = NormalModeState.createNormalFormCnt(fileUsCtx);\r\n    }\r\n    //console.log(`%c🥑 createFormFieldsAtom ${formIdx ? ",
    "normaloManualo": "} normal:%o manual:%o`, ",
    "normalManualConstRvAnyformctx": ", normal, manual);\r\n\r\n    const rv: AnyFormCtx = {\r\n        normal,\r\n        manual,\r\n        fieldsAtom: createFormFieldsAtom(normal, manual, formIdx),\r\n        options: OptionsState.createAtoms(fileUsCtx),\r\n        fileUsCtx: fileUsCtx,\r\n    };\r\n\r\n    return rv;\r\n}\r\n\r\nfunction printCreateManiAtoms(fileUsAtom: FileUsAtom, fileUs: FileUs, maniAtoms: ManiAtoms) {\r\n    console.groupCollapsed(\r\n        `%c⛓ createManiAtoms: fileUsAtom:%c${fileUsAtom.toString()} %cuuid:${fileUs.fileCnt.unid}`,\r\n        ",
    "key_rctoo77": ",\r\n        ",
    "colorMagentaNormalManualConst": ", 'color: magenta', normal, manual);\r\n\r\n    const rv: AnyFormCtx = {\r\n        normal,\r\n        manual,\r\n        fieldsAtom: createFormFieldsAtom(normal, manual, formIdx),\r\n        options: OptionsState.createAtoms(fileUsCtx),\r\n        fileUsCtx: fileUsCtx,\r\n    };\r\n\r\n    return rv;\r\n}\r\n\r\nfunction printCreateManiAtoms(fileUsAtom: FileUsAtom, fileUs: FileUs, maniAtoms: ManiAtoms) {\r\n    console.groupCollapsed(\r\n        "
  },
  "src/renderer/src/store/0-serve-atoms/0-create/1-create-new-mani-ctx/0-ctx-content.tsx": {
    "newfileusatomatomShouldBeUndefined": "newFileUsAtomAtom should be undefined",
    "sNotDisposedFromThere": "s not disposed from there.\r\n        }\r\n        set(this.newFileUsAtomAtom, undefined);\r\n    }\r\n\r\n    disposeActive({ get, set }: GetSet) {\r\n        const atomToAtom = get(newManiContent.newFileUsAtomAtom);\r\n        set(newManiContent.newFileUsAtomAtom, undefined);\r\n        atomToAtom && set(doDisposeFileUsAtomAtom, atomToAtom); // The previuos operation will clean up the fileUsAtom if it was saved otherwise it will be undefined.\r\n    }\r\n};\r\n\r\nexport const newManiContent = new NewManiContent();\r\n\r\nexport const doInitNewManiContentAtom = atom(null, (get, set) => newManiContent.init({ get, set }));\r\n\r\n/**\r\n * New manifest fileUs atom.\r\n */\r\nexport const newManiFileUsAtom = atom<FileUs | undefined>(\r\n    (get) => {\r\n        const newFileUsAtom = get(newManiContent.newFileUsAtomAtom);\r\n        return newFileUsAtom && get(newFileUsAtom);\r\n    }\r\n);\r\n\r\n/**\r\n * New manifest display name atom. This is non-reactive field to atom, just to use it in UI when new FileUs atom created.\r\n */\r\nexport const newManiDispNameAtom = atom<RowInputStateAtom | undefined>(\r\n    (get) => {\r\n        //printNewManiCtx(get);\r\n        const fileUs = get(newManiFileUsAtom);\r\n        const rv = fileUs?.maniAtomsAtom && pathToManiNameAtom(get(fileUs.maniAtomsAtom));\r\n        return rv;\r\n    },\r\n);\r\n\r\nfunction printNewManiCtxInit({ get }: GetSet) {\r\n    const newAtom = get(newManiContent.newFileUsAtomAtom);\r\n    const atomStr = newAtom ? newAtom.toString() : null;\r\n    console.groupCollapsed(\r\n        `%c🎈🎈🎈 newMani.ctx.init: new fileUsAtom:%c ${atomStr}%c (if OK then it should be null)`,\r\n        newAtom ? ",
    "key_bdhgk4x": ",\r\n        ",
    "consoletraceConsolegroupendFunctionPrintnewmanictxGet": ",\r\n    );\r\n    console.trace();\r\n    console.groupEnd();\r\n}\r\n\r\nfunction printNewManiCtx({ get }: GetSet) {\r\n    const newAtom = get(newManiContent.newFileUsAtomAtom);\r\n    const atomStr = newAtom ? newAtom.toString() : null;\r\n    console.groupCollapsed(\r\n        `%c  newMani.ctx.mani-name access: fileUsAtom:%c${atomStr} %c`,\r\n        ",
    "newatomFontweightNormalBackgroundcolorRed": ",\r\n        newAtom ? 'font-weight: normal; background-color: red; color: white' : 'font-weight: normal; background-color: limegreen; color: darkgreen',\r\n        'font-weight: normal; color: forestgreen',\r\n        'font-weight: normal; color: gray',\r\n    );\r\n    console.trace();\r\n    console.groupEnd();\r\n}\r\n\r\nfunction printNewManiCtx({ get }: GetSet) {\r\n    const newAtom = get(newManiContent.newFileUsAtomAtom);\r\n    const atomStr = newAtom ? newAtom.toString() : null;\r\n    console.groupCollapsed(\r\n        "
  },
  "src/renderer/src/store/0-serve-atoms/0-create/1-create-new-mani-ctx/1-ctx-create-fileus-from-xml.tsx": {
    "sharedipctypes": "@shared/ipc-types",
    "forgotYourPassword": "Forgot your Password?",
    "cpasswofileusormaniatoms": "cpass.wo.FileUs.or.ManiAtoms",
    "fontweightSemiboldBackgroundcolorLightgoldenrodyellowColor": "font-weight: semibold; background-color: lightgoldenrodyellow; color: forestgreen",
    "fontweightNormalColorMagenta": "font-weight: normal; color: magenta",
    "fontweightNormalColorGray": "font-weight: normal; color: gray",
    "fontweightNormalColorDarkmagenta": "font-weight: normal; color: darkmagenta",
    "consoleerrormessageShowmessageSetMessageIserror": ";\r\n        console.error(message);\r\n        showMessage({ set, message, isError: true });\r\n        return false;\r\n    }\r\n}\r\n\r\ntype MoveFromAppsToNextPageParams = {\r\n    params: Omit<ManifestForWindowCreatorParams, 'wantXml' | 'passwordChange'>;\r\n    showProgressAtom?: PA<boolean>; // show controls scan progress atom\r\n    getset: GetSet;\r\n};\r\n\r\n// Utilities\r\n\r\nfunction printNewFileUsCreated(fileUsAtom: FileUsAtom | undefined, { get }: GetSet) {\r\n    const atomStr = fileUsAtom ? fileUsAtom.toString() : 'null';\r\n    const fileUs = fileUsAtom ? get(fileUsAtom) : null;\r\n    const maniAtomsAtom = fileUs?.maniAtomsAtom;\r\n    const maniAtomsStr = maniAtomsAtom ? maniAtomsAtom.toString() : 'null';\r\n    console.groupCollapsed(\r\n        "
  },
  "src/renderer/src/store/0-serve-atoms/0-create/1-create-new-mani-ctx/2-ctx-create-messages.tsx": {
    "tooManyControls": "Too many controls",
    "thereAreNoInputControls": "There are no input controls in the window",
    "hidPasswordManagerIsNot": "HID Password Manager is not installed",
    "hidPasswordManagerExtensionIs": "HID Password Manager extension is not installed",
    "updateHidPasswordManagerExtension": "Update HID Password Manager extension",
    "cannotAccessApplicationContent": "Cannot access application content",
    "colordimgrayExportFunctionShowbuilderrorreasonsetSetter": ", \"color:dimgray\");\r\n}\r\n\r\nexport function showBuildErrorReason(set: Setter) {\r\n    if (!stateNapiAccess.buildError) {\r\n        return;\r\n    }\r\n\r\n    const typedError = splitTypedError(stateNapiAccess.buildError);\r\n\r\n    console.error("
  },
  "src/renderer/src/store/0-serve-atoms/1-do-set-files/1-do-set-delivered-files.tsx": {
    "sharedipctypes": "@shared/ipc-types",
    "maxh50vhTextforegroundDarktextbackgroundOverflowautoSmallscroll": "max-h-[50vh] text-foreground dark:text-background overflow-auto smallscroll",
    "filefilecntfname": "${file.fileCnt.fname}",
    "fcfpath": "${fc.fpath}",
    "sNotSetUndefinedIf": "s not set undefined if the root folder is empty?\r\n * File content is populated from web or electron environment:\r\n```\r\n┌───────────────────────────────────────────┬─────────────────────────────────────┐\r\n│ with electron                             │ without electron                    │\r\n├───────────────────────────────────────────┼─────────────────────────────────────┤\r\n│ from renderer                             │ from web process only               │\r\n│ ─────────────                             │ ─────────────────────               │\r\n│     dropped filenames                     │     dropped files                   │\r\n│         just files from a single folder   │ just files from a single folder     │\r\n│         (no folders or subfolders)        │ or if dropped folder then           │\r\n│                                           │ files and folders w/ relative path  │ \r\n├───────────────────────────────────────────┼─────────────────────────────────────┤\r\n│ from main process                         │ from web process only               │\r\n│ ─────────────────                         │ ─────────────────────               │\r\n│     dialog open files                     │     dialog open files               │\r\n│         just files from a single folder   │     just files from a single folder │\r\n│         (no folders or subfolders)        │     (no folders or subfolders)      │\r\n├───────────────────────────────────────────┼─────────────────────────────────────┤\r\n│ from main process                         │                                     │\r\n│ ─────────────────                         │                                     │\r\n│     dialog open folder                    │                                     │\r\n│         from a single chosen folder       │                                     │\r\n│         all files and folders recursively │                                     │\r\n└───────────────────────────────────────────┴─────────────────────────────────────┘\r\n```\r\n- deliveredAtom - files content populated from web or electron environments\r\n- filesAtom     - files with reactive content and IDs\r\n- filteredAtom  - files to show in the tree\r\n*/\r\nexport const doSetDeliveredFilesAtom = atom(\r\n    null,\r\n    async (get, set, { root, deliveredFileContents }: SetDeliveredFiles) => {\r\n        //printDelivered(deliveredFileContents);\r\n\r\n        let runningClearFiles = typeof deliveredFileContents === ",
    "deliveredfilecontentsDeliveredfilecontentsIfDeliveredfilecontentslength100": ";\r\n        deliveredFileContents = deliveredFileContents || [];\r\n\r\n        if (deliveredFileContents.length > 100) {   // Allow fast cleaning, no files, no delay\r\n            busyIndicator.msg = ",
    "todoAllHeavyStuffIs": ";       // TODO: all heavy stuff is already done in the main process, so it should be done earlier\r\n            await delay(100);                       // Delay to update busyIndicator UI (it",
    "openingMultipleFilesOrFolders": "Opening multiple files or folders is not allowed. Drag and drop one folder.",
    "unsupportedFiles": "Unsupported files:",
    "clearFileList": "clear file list",
    "superDebugOptions": "super debug options",
    "withElectronWithoutElectronFrom": "\r\n┌───────────────────────────────────────────┬─────────────────────────────────────┐\r\n│ with electron                             │ without electron                    │\r\n├───────────────────────────────────────────┼─────────────────────────────────────┤\r\n│ from renderer                             │ from web process only               │\r\n│ ─────────────                             │ ─────────────────────               │\r\n│     dropped filenames                     │     dropped files                   │\r\n│         just files from a single folder   │ just files from a single folder     │\r\n│         (no folders or subfolders)        │ or if dropped folder then           │\r\n│                                           │ files and folders w/ relative path  │ \r\n├───────────────────────────────────────────┼─────────────────────────────────────┤\r\n│ from main process                         │ from web process only               │\r\n│ ─────────────────                         │ ─────────────────────               │\r\n│     dialog open files                     │     dialog open files               │\r\n│         just files from a single folder   │     just files from a single folder │\r\n│         (no folders or subfolders)        │     (no folders or subfolders)      │\r\n├───────────────────────────────────────────┼─────────────────────────────────────┤\r\n│ from main process                         │                                     │\r\n│ ─────────────────                         │                                     │\r\n│     dialog open folder                    │                                     │\r\n│         from a single chosen folder       │                                     │\r\n│         all files and folders recursively │                                     │\r\n└───────────────────────────────────────────┴─────────────────────────────────────┘\r\n",
    "spanUnsupportedmapFileSpanClassnamemultiple": "}\r\n            </span>\r\n\r\n            {unsupported.map(\r\n                (file) => <span className={multiple ? \"block\" : undefined} key={file.fileCnt.unid}>{",
    "spanDivToastwarningmsgTodoAdd": "}</span>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n    toast.warning(msg, {\r\n        // TODO: add details popup dialog\r\n        // action: { label: 'Details', onClick: () => { console.log('Unsupported files:', unsupported); }, }\r\n    });\r\n}\r\n\r\nfunction printDelivered(deliveredFileContents: FileContent[]) {\r\n    console.log(",
    "colorMagentaDeliveredfilecontentsforeachFcConsolelog": ", 'color: magenta');\r\n\r\n    deliveredFileContents.forEach(\r\n        (fc) => {\r\n            console.log("
  },
  "src/renderer/src/store/0-serve-atoms/1-do-set-files/2-create-parsed-src.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "noAppDetectionPart": "No app detection part",
    "noManiForCpass": "No mani for cpass",
    "tNeedThisIfWe": "t need this if we add some predefined fields, which maybe not bad idea\r\n        const createdForm = maniForCpass ? maniForCpass.parsedSrc.meta?.[FormIdx.cpass] : newParsedSrc.meta?.[FormIdx.login];\r\n        if (!createdForm) {\r\n            throw new Error(",
    "createdformdispisscriptTrueExportFunctionCreateparsedsrcforemptyfcefilecnt": ");\r\n        }\r\n        createdForm.disp.isScript = true;\r\n    }\r\n}\r\n\r\nexport function createParsedSrcForEmptyFce(fileCnt: FileContent): ParsedSrc {\r\n    const rv: ParsedSrc = {\r\n        mani: undefined,\r\n        meta: undefined,\r\n        fcat: { names: [] }, // descriptor.id is optional and never used in the old PMAT\r\n        stats: {} as FileUsStats,\r\n    };\r\n    rv.stats = createFileUsStats(fileCnt, rv);\r\n    return rv;\r\n}\r\n\r\nfunction createFileUsStats(fileCnt: FileContent, parsedSrc: ParsedSrc): FileUsStats {\r\n    const loginForm = parsedSrc.mani?.forms[0];\r\n    const loginFormDomain = parsedSrc.meta?.[0]?.disp.domain;\r\n    const isSubFolder = !!fileCnt.fpath && !fileCnt.fromMain; // fpath is empty for single items //const hasSubFolders = !!fileCnt.fpath?.match(/\\//);\r\n\r\n    const rv: FileUsStats = {\r\n        loginFormDomain,\r\n\r\n        isFCat: !!parsedSrc.fcat,\r\n        isFCatRoot: false,\r\n        isCustomization: !parsedSrc.meta?.length && !!parsedSrc.mani?.options,\r\n\r\n        loginFormChooseNameAtom: atom(loginForm?.options?.choosename || ",
    "issubfolderIssubfolderSubfolderFilecntfpath": "),\r\n\r\n        isSubFolder: isSubFolder,\r\n        subFolder: fileCnt.fpath || ",
    "subfolderHassubfoldersStripfirstfolderfilecntfpathFilecntfpath": ", // subFolder: hasSubFolders ? stripFirstFolder(fileCnt.fpath) : fileCnt.fpath || "
  },
  "src/renderer/src/store/0-serve-atoms/1-do-set-files/3-create-fileus.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "fontweightNormalBackgroundcolorDarkcyanColor": ",\r\n        'font-weight: normal; background-color: darkcyan; color: lavender',\r\n        'font-weight: normal; background-color: darkcyan; color: lavender',\r\n        'font-weight: normal; color: gray',\r\n    );\r\n    console.trace();\r\n    console.groupEnd();\r\n}\r\n\r\nfunction printManiAtomsSet(baseAtomsAtom: ManiAtomsAtom, maniAtoms: ManiAtoms | null, maniAtomsAtom: ManiAtomsAtom) {\r\n    const fileUsAtom = maniAtoms?.[0]?.fileUsCtx?.fileUsAtom;\r\n    const fileUs = maniAtoms?.[0]?.fileUsCtx?.fileUs;\r\n    console.groupCollapsed(\r\n        ",
    "fontweightNormalColorGray": "font-weight: normal; color: gray",
    "fontweightNormalColorMagenta": "font-weight: normal; color: magenta",
    "fontweightNormalColorDarkmagenta": "font-weight: normal; color: darkmagenta"
  },
  "src/renderer/src/store/0-serve-atoms/2-do-load-files/0-all/0-all-set-atoms.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "userAborted": "user aborted",
    "mruiteminvalid": "MRU.item.invalid"
  },
  "src/renderer/src/store/0-serve-atoms/2-do-load-files/0-all/1-filecnt-from-main.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/0-serve-atoms/2-do-load-files/0-all/2-filecnt-from-main-mru.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/0-serve-atoms/2-do-load-files/0-all/3-filecnt-from-web-dnd.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "cannotReadFromDatatransferitemlist": "cannot read from DataTransferItemList"
  },
  "src/renderer/src/store/0-serve-atoms/2-do-load-files/0-all/4-filecnt-from-web-dlg.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "cannotReadFromFile": "cannot read from File[]"
  },
  "src/renderer/src/store/0-serve-atoms/2-do-load-files/0-all/7-load-web-files-create-filecnts.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "emptyEntryOrFile": "Empty entry or file",
    "errorProcessingDropItem": "Error processing drop item:"
  },
  "src/renderer/src/store/0-serve-atoms/2-do-load-files/0-all/9-types.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "filenamesidx": "${filenames[idx]}",
    "cdosetfilesfrom_moderndlg_atom": "%cdoSetFilesFrom_ModernDlg_Atom",
    "ccreatefilecontents_from_main": "%ccreateFileContents_From_Main"
  },
  "src/renderer/src/store/0-serve-atoms/2-do-load-files/1-modern-handles/3-1-collect-dnd-items.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "filepath": "${file.path}",
    "fullpath": "${fullPath}",
    "handlename": "${handle.name}",
    "itemlegacypath": "${item.legacyPath}",
    "theWindowsShortcutCannotBe": "The Windows shortcut cannot be opened by the web version of PMAT.",
    "youCanOnlyOpenOne": "You can only open one folder at a time.",
    "sEmptyRvpushitemReturnRv": "s empty\r\n                rv.push(item);\r\n                return rv;\r\n            }\r\n        }\r\n\r\n        const tree = pathsToFolderTree(handles.map((item) => ({ path: item[0], isFolder: (userData: DndHandle) => userData[1]?.kind === ",
    "userdataItemConstPmathandlesGetpmatfilehandlestree": ", userData: item })));\r\n        const pmatHandles = getPmatFileHandles(tree);\r\n        // printHandles(handles);\r\n        // printTreeHandles(tree);\r\n        // printHandles(pmatHandles);\r\n\r\n        for (const dndHandle of pmatHandles) {\r\n            const item = await asyncDndHandleToWebFsItem(dndHandle);\r\n            rv.push(item);\r\n        }\r\n    }\r\n\r\n    //printWebFsitems(rv);\r\n    /*\r\n        125 - dropped\r\n        125/c\r\n        125/c/c\r\n        125/c/c/c\r\n        125/c/c/c/6ba4ea1a-4329-424c-b36f-4ea85629870b.test.dpm\r\n    rv is [\r\n        {\"owner\":{kind:",
    "handlekind": "},  \"handle\":{kind:",
    "legacyentrynulllegacyfilenulllegacypath125Ownerkind": "},      \"legacyEntry\":null,\"legacyFile\":null,\"legacyPath\":\"125\"},\r\n        {\"owner\":{kind:",
    "legacyentrynulllegacyfilenulllegacypath125cOwnerkind": "},    \"legacyEntry\":null,\"legacyFile\":null,\"legacyPath\":\"125/c\"},\r\n        {\"owner\":{kind:",
    "legacyentrynulllegacyfilenulllegacypath125ccOwnerkind": "},  \"legacyEntry\":null,\"legacyFile\":null,\"legacyPath\":\"125/c/c\"},\r\n        {\"owner\":{kind:",
    "legacyentrynulllegacyfilenulllegacypath125cccOwnerkind": "},\"legacyEntry\":null,\"legacyFile\":null,\"legacyPath\":\"125/c/c/c\"},\r\n        \r\n        {\"owner\":{kind:",
    "legacyentrynullLegacyfilename": "},\r\n            \"legacyEntry\":null,\r\n            \"legacyFile\":{name:",
    "lastmodified1679072000000lastmodified1679072000000lastmodifieddate": ",lastModified:1679072000000,lastModified:1679072000000,lastModifiedDate:",
    "webkitrelativepath": ",webkitRelativePath:",
    "size2044type": ",size:2044,type:",
    "legacypath125cccReturnRvAsyncFunction": "},\r\n            \"legacyPath\":\"125/c/c/c\"\r\n        },\r\n    ]\r\n    */\r\n    return rv;\r\n}\r\n\r\nasync function asyncDndHandleToWebFsItem([fullPath, handle, ownerDir]: DndHandle): Promise<WebFsItem> {\r\n    const rv = new WebFsItem({\r\n        legacyFile: handle.kind === ",
    "awaitHandlegetfileNullHandleOwner": " ? await handle.getFile() : null,\r\n        handle,\r\n        owner: ownerDir,\r\n        legacyPath: fullPath,\r\n    });\r\n    return rv;\r\n}\r\n\r\nfunction getPmatFileHandles(tree: FolderTree<DndHandle>): DndHandle[] {\r\n    const values = Object.values(tree);\r\n    const root = values.length === 1 && values[0]; // allow only one folder in the root of the tree\r\n    if (!root) {\r\n        return [];\r\n    }\r\n\r\n    const rv: DndHandle[] = [\r\n        ...root.files,\r\n        ...(root.children?.[",
    "filesRootchildren": "]?.files || []),\r\n        ...(root.children?.[",
    "filesReturnRvFunctionPrintentryfileshandles": "]?.files || []),\r\n    ];\r\n\r\n    return rv;\r\n}\r\n\r\nfunction printEntryFiles(handles: FileWithPath[]) {\r\n    console.log(",
    "forConstFileOfHandles": ");\r\n    for (const file of handles) {\r\n        console.log(`%cpath: \"${file.path}\"%o`, `color: tan`, { file });\r\n    }\r\n}\r\n\r\nfunction printHandles(handles: DndHandle[]) {\r\n    console.log(",
    "forConstFullpathHandleOwnerdir": ");\r\n\r\n    for (const [fullPath, handle, ownerDir] of handles) {\r\n        const isFile = handle.kind === ",
    "constFilecolorIsfile": ";\r\n        const fileColor = isFile ? ",
    "constHandlestrFshandlestringhandleConstOwnerdirstr": ";\r\n        const handleStr = FSHandleString(handle);\r\n        const ownerDirStr = FSHandleString(ownerDir);\r\n        console.log(\r\n            `%c       ${isFile ? ",
    "fullPathCfullpathCownerdirOwnerdirstr": "} full path: %c\"${fullPath}\" %cownerDir: ${ownerDirStr} %chandle: ${handleStr}`,\r\n            ",
    "colorFilecolor": ",\r\n            `color: ${fileColor}`,\r\n            ",
    "key_0uoiyow": ",\r\n            ",
    "allPathHandleDirFunction": ",\r\n            // { all: [path, handle, dir] }\r\n        );\r\n    }\r\n\r\n    function FSHandleString(handle: FileSystemHandle | FileSystemHandleUnion | null): string {\r\n        if (!handle) {\r\n            return ",
    "ifHandleInstanceofFilesystemhandleReturn": ";\r\n        }\r\n        if (handle instanceof FileSystemHandle) {\r\n            return `%c${handle.kind === ",
    "chandlenameReturn": "}:%c\"${handle.name}\"`;\r\n        }\r\n        return ",
    "traverseTreeAndPrintEach": ";\r\n    }\r\n}\r\n\r\n// traverse tree and print each item",
    "ctreeDndhandles": "🔊 %cTree DndHandles:",
    "cwebfsitems": "🔊 %cWebFsItems:",
    "itemkindFile": "item.kind === 'file'",
    "fileFunctionPrinthandleshandlesDndhandleConsolelog": ", { file });\r\n    }\r\n}\r\n\r\nfunction printHandles(handles: DndHandle[]) {\r\n    console.log('🔊 %cDndHandles:', 'color: saddlebrown');\r\n\r\n    for (const [fullPath, handle, ownerDir] of handles) {\r\n        const isFile = handle.kind === 'file';\r\n        const fileColor = isFile ? 'tan' : 'fuchsia';\r\n        const handleStr = FSHandleString(handle);\r\n        const ownerDirStr = FSHandleString(ownerDir);\r\n        console.log(\r\n            ",
    "colorGrayFontsize05rem": ",\r\n            'color: gray; font-size: 0.5rem;',\r\n            ",
    "colorGrayFontsize05remColor": ",\r\n            'color: gray; font-size: 0.5rem;',\r\n            'color: saddlebrown',\r\n            'color: saddlebrown',\r\n            'color: gray; font-size: 0.5rem;',\r\n            'color: saddlebrown',\r\n            'color: saddlebrown',\r\n            // { all: [path, handle, dir] }\r\n        );\r\n    }\r\n\r\n    function FSHandleString(handle: FileSystemHandle | FileSystemHandleUnion | null): string {\r\n        if (!handle) {\r\n            return 'null';\r\n        }\r\n        if (handle instanceof FileSystemHandle) {\r\n            return ",
    "returnTraverseTreeAndPrint": ";\r\n        }\r\n        return '???';\r\n    }\r\n}\r\n\r\n// traverse tree and print each item's userData handles using FSHandleString()\r\nfunction printTreeHandles<T>(nodeMap: Record<string, FolderNode<T>>, indent = '') {\r\n    !indent && console.log('🔊 %cTree DndHandles:', 'color: saddlebrown');\r\n\r\n    for (const [name, node] of Object.entries(nodeMap)) {\r\n        console.log(",
    "colorFuchsiaFontweight600For": ", 'color: fuchsia; font-weight: 600;');\r\n\r\n        for (const file of node.files) {\r\n            const ud = file as unknown as DndHandle | undefined;\r\n            if (Array.isArray(ud) && ud.length >= 3) {\r\n                const [fullPath, handle, ownerDir] = ud;\r\n                const handleStr = FSHandleString(handle);\r\n                const ownerStr = FSHandleString(ownerDir);\r\n                console.log(\r\n                    ",
    "colorGrayFontsize05remPath": ",\r\n                    'color: gray; font-size: 0.5rem;', // path\r\n                    'color: saddlebrown',\r\n                    'color: gray; font-size: 0.5rem;', // handle\r\n                    'color: saddlebrown',\r\n                    'color: saddlebrown',\r\n                    'color: gray; font-size: 0.5rem;',  // owner\r\n                    'color: saddlebrown',\r\n                    'color: saddlebrown',\r\n                );\r\n            } else {\r\n                console.log(",
    "colorRedFileIfNodechildren": ", 'color: red', { file });\r\n            }\r\n        }\r\n\r\n        if (node.children && Object.keys(node.children).length > 0) {\r\n            printTreeHandles(node.children, indent + '    ');\r\n        }\r\n    }\r\n\r\n    function FSHandleString(handle: FileSystemHandle | FileSystemHandleUnion | null): string {\r\n        if (!handle) {\r\n            return 'null';\r\n        }\r\n        if (handle instanceof FileSystemHandle) {\r\n            return ",
    "returnFunctionPrintwebfsitemsitemsWebfsitemConsolelog": ";\r\n        }\r\n        return '???';\r\n    }\r\n}\r\n\r\nfunction printWebFsitems(items: WebFsItem[]) {\r\n    console.log('🔊 %cWebFsItems:', 'color: saddlebrown');\r\n\r\n    for (const item of items) {\r\n        console.log("
  },
  "src/renderer/src/store/0-serve-atoms/2-do-load-files/1-modern-handles/3-3-paths-to-tree.ts": {
    "asSeparatorsIfAPath": "\\' as separators\r\n * - if a path is a directory (prefix of other paths) it becomes a folder key\r\n * - files are stored as objects { name, userData }\r\n */\r\nexport function pathsToFolderTree<T = unknown>(items: InputItem<T>[]): FolderTree<T> {\r\n    const norm = (p: string) => p.replace(/\\\\/g, ",
    "replaceg": ").replace(/^\\/+|\\/+$/g, ",
    "makeAllSlashesForwardAnd": "); // make all slashes forward and remove leading and trailing slashes\r\n    const normalized = items.map((it) => ({ path: norm(it.path), isFolder: it.isFolder, userData: it.userData }));\r\n\r\n    // any path that is a prefix of another path is a directory\r\n    const dirSet = new Set<string>();\r\n    for (const item of normalized) {\r\n        const { path, userData } = item;\r\n        if (userData && item.isFolder(userData)) {\r\n            const parts = path ? path.split(",
    "letPrefix": ") : [];\r\n            let prefix = ",
    "forLetI0I": ";\r\n            for (let i = 0; i < parts.length; i++) {\r\n                prefix = prefix ? `${prefix}/${parts[i]}` : parts[i];\r\n                dirSet.add(prefix);\r\n            }\r\n        }\r\n    }\r\n\r\n    const tree: FolderTree<T> = {};\r\n\r\n    dirSet.forEach((dir) => ensureNode(dir.split(",
    "treeExplicitOrImplicitFolder": "), tree)); // explicit or implicit folder entry - ensure node exists\r\n\r\n    for (const item of normalized) {\r\n        const { path, userData } = item;\r\n        if (!path || !userData) {\r\n            continue;\r\n        }\r\n        \r\n        const parts = path.split(",
    "ifItemisfolderuserdataConstNodeEnsurenodeparts": ");\r\n\r\n        if (item.isFolder(userData)) {\r\n            const node = ensureNode(parts, tree);\r\n            node.folderData = userData;\r\n            continue;\r\n        }\r\n\r\n        // file entry -> attach to parent folder (or root pseudo-folder)\r\n        const node = ensureNode(parts, tree);\r\n        node.files.push(userData);\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\nfunction ensureNode<T>(parts: string[], tree: FolderTree<T>): FolderNode<T> {\r\n    // create nested nodes for parts; return node for last part\r\n    if (!parts.length) {\r\n        if (!tree[",
    "tree": "]) {\r\n            tree[",
    "filesChildrenFolderdataUndefinedCreatereturn": "] = { files: [], children: {}, folderData: undefined }; // create/return pseudo-root\r\n        }\r\n        return tree[",
    "letCurrentlevelTreeLetNode": "];\r\n    }\r\n\r\n    let currentLevel = tree;\r\n    let node: FolderNode<T> | undefined;\r\n\r\n    for (const part of parts) {\r\n        node = currentLevel[part];\r\n        if (!node) {\r\n            node = { files: [], children: {}, folderData: undefined };\r\n            currentLevel[part] = node;\r\n        } else if (!node.children) {\r\n            node.children = {};\r\n        }\r\n        currentLevel = node.children!;\r\n    }\r\n\r\n    return node!;\r\n}\r\n\r\n// Example usage\r\n/*\r\nconst input: InputItem<any>[] = [\r\n  { path: ",
    "userdataIsfoldermarkerTruePath": ", userData: { isFolderMarker: true } },\r\n  { path: ",
    "userdataSize123Path": ", userData: { size: 123 } },\r\n  { path: ",
    "userdataSize456Path": ", userData: { size: 456 } },\r\n  { path: ",
    "userdataUndefinedPath": ", userData: undefined },\r\n  { path: ",
    "userdataSize11Path": ", userData: { size: 11 } },\r\n  { path: "
  },
  "src/renderer/src/store/0-serve-atoms/2-do-load-files/1-modern-handles/8-nun-webFileSystemAccess.ts": {
    "supportedwindow": "supported(window)"
  },
  "src/renderer/src/store/0-serve-atoms/3-do-save-mani-atom/0-save-atom/1-do-save-one.tsx": {
    "sharedipctypes": "@shared/ipc-types",
    "ttNull": "\\t\\t: null",
    "tAllowToSaveTo": "t allow to save to the different folder.\r\n//TODO: we need to select the new file in the files tree if it",
    "saveBefore": "⏱ save before",
    "saveAfter": "⏱ save after"
  },
  "src/renderer/src/store/0-serve-atoms/3-do-save-mani-atom/0-save-atom/3-save-or-rst-maniatoms.ts": {
    "noUpdateForFc": "no update for FC",
    "cdisposefileusmaniatomsTempNotDisposing": "%cdisposeFileUsManiAtoms temp not disposing"
  },
  "src/renderer/src/store/0-serve-atoms/3-do-save-mani-atom/0-save-atom/7-fileus-to-xml-string.ts": {
    "errorConvertingToXml": "Error converting to xml",
    "noManiatoms": "No maniAtoms"
  },
  "src/renderer/src/store/0-serve-atoms/3-do-save-mani-atom/0-save-atom/8-save-utils.tsx": {
    "mt4Text6rem": "mt-4 text-[.6rem]",
    "fileusfilecntfname": "${fileUs.fileCnt.fname}",
    "gNames_ext": "/g, 'names_ext=",
    "printShortenManifestForDebugging": "');\r\n}\r\n\r\n/**\r\n * Print shorten manifest for debugging without destructing the original manifest.\r\n */\r\nexport function printTestManifest(newMani: Partial<Mani.Manifest> | FileMani.Manifest) {\r\n    const rv = { ...newMani };\r\n    if (rv.forms?.[0]?.detection.names_ext) {\r\n        rv.forms[0] = { ...rv.forms[0] };\r\n        rv.forms[0].detection = { ...rv.forms[0].detection };\r\n        rv.forms[0].detection.names_ext = ",
    "ifRvforms1detectionnames_extRvforms1Rvforms1Rvforms1detection": ";\r\n    }\r\n    if (rv.forms?.[1]?.detection.names_ext) {\r\n        rv.forms[1] = { ...rv.forms[1] };\r\n        rv.forms[1].detection = { ...rv.forms[1].detection };\r\n        rv.forms[1].detection.names_ext = ",
    "noParentDirectory": "no parent directory",
    "cXmln": "%c🚀 ~ xml:\\n",
    "names_ext": "names_ext=\"...\"",
    "cnewManifestn": "%cnew manifest\\n",
    "divDuration5000ExportFunction": "}\r\n        </div>\r\n    </>), { duration: 5000 }\r\n    );\r\n}\r\n\r\nexport function notificationNewSaved(fileUs: FileUs) {\r\n    if (appSettings.appUi.uiGeneral.notifyNewFile) {\r\n        toast.info(",
    "consolelogsavedFileusfilecntfnameGenerateDebugOnly": ");\r\n    }\r\n    console.log('saved', fileUs.fileCnt.fname);\r\n}\r\n\r\n/**\r\n * Generate debug only filename\r\n */\r\nexport function debugTestFilename(fileName: string) {\r\n    if (!appSettings.appUi.uiAdvanced.saveWDebugExt) {\r\n        return fileName;\r\n    }\r\n    const [name, ext] = getFilenameAndExt(fileName);\r\n    if (name.endsWith('.test')) { // if allready there, just return\r\n        return fileName;\r\n    }\r\n    return "
  },
  "src/renderer/src/store/0-serve-atoms/3-do-save-mani-atom/1-stop-if-validation-failed/2-form-verify-errors.ts": {
    "noLoginFieldsSelected": "No login fields selected",
    "noPasswordChangeFieldsSelected": "No password change fields selected"
  },
  "src/renderer/src/store/0-serve-atoms/3-do-save-mani-atom/1-stop-if-validation-failed/3-form-manual-verify-errors.tsx": {
    "theActionListMustContain": "The action list must contain at least one \"Field\" action."
  },
  "src/renderer/src/store/0-serve-atoms/3-do-save-mani-atom/2-pack/0-pack-mani/1-pack-manifest.ts": {
    "createdTimeutilstimenowasdptimeAsManidescriptorDescriptormodified": ", created: TimeUtils.timeNowAsDpTime(), } as Mani.Descriptor;\r\n\r\n    descriptor.modified = TimeUtils.timeNowAsDpTime();\r\n    descriptor.version = '2.4.5';\r\n\r\n    newMani.descriptor = descriptor;\r\n\r\n    fileUs.parsedSrc.mani?.options && (newMani.options = fileUs.parsedSrc.mani.options);\r\n}\r\n\r\nfunction packForm(form: AnyFormCtx | undefined, formIdx: FormIdx, packParams: PackManifestDataParams): void {\r\n    if (form) {\r\n        const { newMani } = packParams;\r\n\r\n        const { detection, options } = packFormOptions(form.options, formIdx, packParams);\r\n\r\n        newMani.forms = newMani.forms || [];\r\n        newMani.forms[formIdx] = {\r\n            detection,\r\n            options,\r\n            fields: [],\r\n        };\r\n\r\n        const newForm = newMani.forms[formIdx];\r\n\r\n        if (form.normal) {\r\n            const { newFields, submittype } = packNormalFieldsAndSubmit(form.normal, formIdx, packParams);\r\n            newForm.fields = newFields;\r\n            newForm.options.submittype = submittype;\r\n        }\r\n        else if (form.manual) {\r\n            const fields = packManualFields(form.manual, formIdx, packParams);\r\n            newForm.fields = fields;\r\n        }\r\n\r\n        //printFields(",
    "newformfieldsFunctionConvertcpassuuidtoidxformsManiformUndefined": ", newForm.fields);\r\n    }\r\n}\r\n\r\nfunction convertCpassUuidToIdx(forms: Mani.Form[] | undefined) {\r\n    const loginFields = forms?.[FormIdx.login]?.fields || [];\r\n    const cpassFields = forms?.[FormIdx.cpass]?.fields || [];\r\n\r\n    cpassFields.forEach(\r\n        (field: Mani.Field) => {\r\n            const rfieldUuid = field.rfieldindex;\r\n            if (rfieldUuid) {\r\n                const loginIdx = loginFields.findIndex((loginField) => loginField.memOnly?.uuidThis === rfieldUuid);\r\n                field.rfieldindex = loginIdx >= 0 ? loginIdx : undefined;\r\n            }\r\n        }\r\n    );\r\n\r\n}\r\n\r\n// Utilities\r\n\r\nfunction printFields(label: string, fields: Mani.Field[], keepEmptyvalues?: boolean) {\r\n    const items =\r\n        keepEmptyvalues\r\n            ? fields\r\n            : fields.map(\r\n                (field) => {\r\n                    const f = filterOneLevelEmptyValues({ ...field });\r\n                    delete f?.path_ext;\r\n                    return f;\r\n                }\r\n            );\r\n    console.log("
  },
  "src/renderer/src/store/0-serve-atoms/3-do-save-mani-atom/2-pack/1-normal/0-pack-normal-fields.ts": {
    "tCleanUpUseitFor": "t clean up useIt for submit and buttons. They are ignore by browser extension.\r\n        doFormSubmit = !!selected ? SUBMIT.dosubmit : SUBMIT.nosubmit;\r\n        selected = -1;\r\n    }\r\n\r\n    const newSubmitsByUuid: RecordOldNewFieldByUuid = submitsValues.buttonNameItems.reduce<RecordOldNewFieldByUuid>(\r\n        (acc, field, idx) => {\r\n            if (field.metaField) { // metaField is empty for "
  },
  "src/renderer/src/store/0-serve-atoms/3-do-save-mani-atom/2-pack/1-normal/7-duplicate-mani-field.ts": {
    "tCareAboutChgpoloptsFieldpolicyoptions": "t care about chgpolopts (FieldPolicyOptions) because it"
  },
  "src/renderer/src/store/0-serve-atoms/3-do-save-mani-atom/2-pack/1-normal/8-print-fields.ts": {
    "noName": "???no name",
    "colorvalueMtypeButtonColor8eacf8": ",         /**/ colorValue: m.type === 'button' ? 'color: #8eacf8' : 'color: #888888' });\r\n            add({ name: ' useIt: ', /**/ value: m.useit ? 'true' : '    ',          /**/ colorValue: m.useit ? 'color: #00a000' : 'color: #ababab' });\r\n            add({ name: ' uuid: ',  /**/ value: ",
    "colorvalueColorAbababFontsize05rem": ",               /**/ colorValue: 'color: #ababab; font-size: 0.5rem' });\r\n            add({ name: ' name: ',  /**/ value: ",
    "colorvalueColorVarconsolecoloryellowFontsize06rem": ", /**/ colorValue: 'color: var(--console-color-yellow); font-size: 0.6rem' });\r\n            add({ name: '',         /**/ value: '',                                 /**/ colorValue: 'color: black' }); // the last dummy item to fix font-size\r\n            idx !== fields.length - 1 && items.push('\\n');\r\n        }\r\n    );\r\n\r\n    console.log(",
    "colorsFunctionAddNameValue": ", ...colors);\r\n\r\n    function add({ name, value, colorValue, colorName }: { name: string; value: string; colorValue?: string; colorName?: string; }) {\r\n        items.push(",
    "colorspushcolornameColorGrayColorspushcolorvalueColor": ");\r\n        colors.push(colorName || 'color: gray');\r\n        colors.push(colorValue || 'color: #d58e00');\r\n    }\r\n}\r\n\r\nexport function printFinalFields(newSubmitsByUuid: RecordOldNewFieldByUuid, doFormSubmit: SUBMIT | undefined, newSortedFields: OldNewField[]) {\r\n\r\n    const values = Object.values(newSubmitsByUuid);\r\n    if (values.length) {\r\n        console.log('newSortedFields2', JSON.stringify(values.map(\r\n            (item) => (",
    "null2Printfieldsastable": ")\r\n        ), null, 2));\r\n    }\r\n\r\n    printFieldsAsTable("
  },
  "src/renderer/src/store/0-serve-atoms/3-do-save-mani-atom/2-pack/1-normal/nun-7-conv-mani-field copy.ts": {
    "rfieldindexRfieldindex": " }),\r\n        ...(rfieldindex && { rfieldindex: "
  },
  "src/renderer/src/store/0-serve-atoms/3-do-save-mani-atom/2-pack/3-options/0-all.ts": {
    "names_ext": "\"names_ext\": \"...\","
  },
  "src/renderer/src/store/0-serve-atoms/4-do-reset-atom/0-all.ts": {
    "resettingFieldCatalogIsNot": "Resetting field catalog is not a good idea. Do it only if you know what you are doing."
  },
  "src/renderer/src/store/0-serve-atoms/5-do-delete-rename-reveal-quit/1-all-delete.ts": {
    "notInFilesatom": "not in filesAtom",
    "returnIfGetfileusmaniintestatomAwaitIntest_set": ");\r\n            return;\r\n        }\r\n\r\n        if (get(fileUs.maniInTestAtom)) {\r\n            await inTest_Set({ fileUs, inTest: false, deleteFile: true });\r\n        }\r\n\r\n        // 4.1. clear right panel\r\n        set(rightPanelAtomAtom, undefined);\r\n\r\n        // 4.2. remove from files tree\r\n        const newFiles = files.filter((item) => item !== fileUsAtom);\r\n        set(filesAtom, newFiles);\r\n\r\n        // 4.3. update counters\r\n        removeFromTotalManis(fileUs);\r\n\r\n        // 4.4. clear file changes\r\n        fileUsChanges.setUnchanged({ fileUs });\r\n\r\n        // 5. dispose edit atoms, after all done to avoid UI updates\r\n        printDeleteFile(fileUsAtom);\r\n        set(doDisposeFileUsAtomAtom, fileUsAtom);\r\n    }\r\n);\r\n\r\nexport const doDeleteCpassFromFileUsAtom = atom(null,\r\n    async (get, set, fileUsAtom: FileUsAtom) => {\r\n        const fileUs = get(fileUsAtom);\r\n        if (!fileUs || fileUs.parsedSrc.stats.isFCat || !fileUs.parsedSrc.mani || !fileUs.parsedSrc.meta) {\r\n            return;\r\n        }\r\n\r\n        // get maniAtoms\r\n        const maniAtoms = get(fileUs.maniAtomsAtom);\r\n        if (!maniAtoms?.[FormIdx.cpass]) {\r\n            return;\r\n        }\r\n\r\n        const ok = await set(doAsyncExecuteConfirmDialogAtom, confirmDeleteCpassMessages);\r\n        if (!ok) {\r\n            return;\r\n        }\r\n\r\n        // update parsedSrc meta and mani forms\r\n        rebuildMetaFormsWithoutCpassForm(fileUs.parsedSrc.meta, fileUs.parsedSrc.mani.forms);\r\n\r\n        // update maniAtoms\r\n        const loginForm = maniAtoms[FormIdx.login];\r\n        const newManiAtoms: ManiAtoms = [loginForm, undefined, loginForm?.fieldsAtom || atom([]), atom([])];\r\n        set(fileUs.maniAtomsAtom, newManiAtoms);\r\n\r\n        // set file changed\r\n        const state = fileUsChanges.hasCpassChange({ fileUs }) ? false : true; // if cpass was added then set as unchanged\r\n        fileUsChanges.setCpass({ fileUs }, state);\r\n\r\n        setManiActiveTab('options');\r\n    }\r\n);\r\n\r\nfunction printDeleteFile(fileUsAtom: FileUsAtom | undefined) {\r\n    console.groupCollapsed("
  },
  "src/renderer/src/store/0-serve-atoms/5-do-delete-rename-reveal-quit/3-reveal-in-explorer.ts": {
    "noMainapi": "No mainApi",
    "noFpathOrFname": "No fpath or fname",
    "revealError": "Reveal error"
  },
  "src/renderer/src/store/0-serve-atoms/6-do-inuse-test/7-get-in-test-in-use.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "filecntfpathcfilecntfname": "${fileCnt.fpath}%c/${fileCnt.fname}",
    "sNotOurSubfolderReturn": "s not our subfolder\r\n    }\r\n\r\n    return { inTest: m[1] === ",
    "inuseM1": ", inUse: m[1] === ",
    "exportFunctionIspmatfiletoloadfilecntFilecontentBoolean": ", };\r\n}\r\n\r\nexport function isPmatFileToLoad(fileCnt: FileContent): boolean {\r\n    const { inUse, inTest } = getInTestInUse(fileCnt.fpath);\r\n    //printInTestInUse(fileCnt, inUse, inTest);\r\n    return inUse || inTest;\r\n}\r\n\r\nfunction printInTestInUse(fileCnt: FileContent, inUse: boolean, inTest: boolean) {\r\n    const colorPath =\r\n        inUse\r\n            ? ",
    "intest": "\r\n            : inTest\r\n                ? ",
    "key_fvzkx63": "\r\n                : ",
    "consolelogCinusecinuse": ";\r\n    console.log(\r\n        `%cinUse:%c${inUse ? ",
    "cintestcintest": "} %cinTest:%c${inTest ? ",
    "cfilecntfpathcfilecntfname": "} %c\"${fileCnt.fpath}%c/${fileCnt.fname}\":`,\r\n        ",
    "key_yd7sdjm": ",\r\n        ",
    "colorpath": ",\r\n        colorPath,\r\n        ",
    "seeAlsoSrcrenderersrccomponents2main2right1header0all2row3filenamepartstsxConstRefilenamematch": ",\r\n    );\r\n}\r\n\r\n// see also src/renderer/src/components/2-main/2-right/1-header/0-all/2-row3-filename-parts.tsx:\r\n//      const reFilenameMatch = /^\\{([0-9A-Za-z]{3,3})(.*)([0-9A-Za-z]{3,3})\\}\\.dpm$/; //TODO: handle ",
    "iItShouldBeA": ", 'i'); // It should be a direct 'a' or 'c' folder from the root (which is always normalized to Unix and lower case)\r\n\r\n    const m = fpath.match(regex);\r\n    if (m === null) {\r\n        return { inTest: false, inUse: false, }; // if not matched suffix then it's not our subfolder\r\n    }\r\n\r\n    return { inTest: m[1] === 'c', inUse: m[1] === 'a', };\r\n}\r\n\r\nexport function isPmatFileToLoad(fileCnt: FileContent): boolean {\r\n    const { inUse, inTest } = getInTestInUse(fileCnt.fpath);\r\n    //printInTestInUse(fileCnt, inUse, inTest);\r\n    return inUse || inTest;\r\n}\r\n\r\nfunction printInTestInUse(fileCnt: FileContent, inUse: boolean, inTest: boolean) {\r\n    const colorPath =\r\n        inUse\r\n            ? 'color: green'\r\n            : inTest\r\n                ? 'color: orange'\r\n                : 'color: blue';\r\n    console.log(\r\n        "
  },
  "src/renderer/src/store/0-serve-atoms/6-do-inuse-test/8-in-test-commands.ts": {
    "sharedipctypes9testinuse": "@shared/ipc-types/9-test-inuse"
  },
  "src/renderer/src/store/0-serve-atoms/7-file-system-manipulation/1-save-to-file-system.ts": {
    "cannotSaveWoWebfsitem": "Cannot save wo/ webFsItem"
  },
  "src/renderer/src/store/0-serve-atoms/7-file-system-manipulation/2-delete-from-file-system.ts": {
    "deleteError": "Delete error",
    "noRootdirhandle": "No rootDir.handle"
  },
  "src/renderer/src/store/0-serve-atoms/7-file-system-manipulation/3-move-by-in-test-file-system.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "cannotMoveWoWebfsitem": "Cannot move wo/ webFsItem",
    "cannotMoveWoOwnerhandle": "Cannot move wo/ ownerHandle",
    "cannotGetNewDirectoryHandle": "Cannot get new directory handle",
    "rootdirfpathConstOldfullname": " : rootDir.fpath;\r\n\r\n        const oldFullName = ",
    "constNewfullname": ";\r\n        const newFullName = ",
    "letEmptyokorerrorAwaitMovefrommainOldfullname": ";\r\n\r\n        let emptyOkOrError = await moveFromMain({ oldFullName, newFullName, content });\r\n        if (emptyOkOrError) {\r\n            return emptyOkOrError;\r\n        }\r\n\r\n        //TODO: check that we run not from the cache folder\r\n\r\n        fileCnt.fpath = newPath; //TODO: Should fpath be reactive?\r\n    } else {\r\n        return await moveFromWeb({ fileUs, content, inTest });\r\n    }\r\n}\r\n\r\nasync function moveFromMain({ oldFullName, newFullName, content }: { oldFullName: string; newFullName: string; content: string; }): Promise<R2MInvoke.EmptyOkOrError | undefined> {\r\n    let emptyOkOrError = await invokeMainTyped({ type: 'r2mi:save-file', fileName: newFullName, content });\r\n\r\n    if (!emptyOkOrError) {\r\n        emptyOkOrError = await invokeMainTyped({ type: 'r2mi:delete-file', fileName: oldFullName });\r\n    }\r\n\r\n    return emptyOkOrError;\r\n}\r\n\r\nasync function moveFromWeb({ fileUs, content, inTest }: { fileUs: FileUs; content: string; inTest: boolean; }): Promise<R2MInvoke.EmptyOkOrError | undefined> {\r\n    const fileCnt = fileUs.fileCnt;\r\n    const fileName = fileCnt.fname;\r\n\r\n    const webFsItem = fileCnt.webFsItem;\r\n    if (!webFsItem || !rootDir.handle) {\r\n        return 'Cannot move wo/ webFsItem';\r\n    }\r\n\r\n    const ownerHandle = webFsItem.owner;\r\n    if (!ownerHandle) {\r\n        return 'Cannot move wo/ ownerHandle';\r\n    }\r\n\r\n    if ((inTest && ownerHandle.name === 'c') || (!inTest && ownerHandle.name !== 'c')) {\r\n        return; // Already in the right mode\r\n    }\r\n\r\n    const newDirHandle = inTest ? await rootDir.handle.getDirectoryHandle('c', { create: true }) : rootDir.handle;\r\n    if (!newDirHandle) {\r\n        return 'Cannot get new directory handle';\r\n    }\r\n\r\n    const newPath = inTest ? "
  },
  "src/renderer/src/store/2-file-mani-atoms/1-normal-fields/1-create-normal-cnt/1-n-create-fields-content.tsx": {
    "backgroundcolorNavyColorBisque": "background-color: navy; color: bisque",
    "backgroundcolor282828ColorWhite": "background-color: #282828; color: white",
    "constStr1JsonstringifyfromuipoliciesNull2": "));\r\n\r\n    /** /\r\n    const str1 = JSON.stringify(fromUi.policies, null, 2);\r\n    const str2 = JSON.stringify(rowAtoms.fromFile.policies, null, 2);\r\n    const str3 = changes.size ? ",
    "consolelog": " : '';\r\n    console.log("
  },
  "src/renderer/src/store/2-file-mani-atoms/1-normal-fields/2-conv-submit/2-s-for-atoms.tsx": {
    "thereIsNoControlTo": "There is no control to submit",
    "dontSubmit": "Don't submit"
  },
  "src/renderer/src/store/2-file-mani-atoms/2-manual-fields/1-create-manual-cnt/1-m-create-form-content.tsx": {
    "updatename": "${updateName}",
    "onchangewscopechunks": "onChangeWScope.chunks",
    "onchangewscopeitem": "onChangeWScope.item"
  },
  "src/renderer/src/store/2-file-mani-atoms/2-manual-fields/2-conv-manual/1-m-create-atoms.tsx": {
    "repeatKey": "Repeat key",
    "repeatatomAtomwithcallbackrepeatdataOnscopedchange": ")),\r\n                repeatAtom: atomWithCallback(repeatData, onScopedChange(",
    "shiftatomCreateatomforinputchunkshiftOnscopedchange": ")),\r\n                shiftAtom: createAtomForInput(chunk.shift, onScopedChange(",
    "ctrlatomCreateatomforinputchunkctrlOnscopedchange": ")),\r\n                ctrlAtom: createAtomForInput(chunk.ctrl, onScopedChange(",
    "altatomCreateatomforinputchunkaltOnscopedchange": ")),\r\n                altAtom: createAtomForInput(chunk.alt, onScopedChange(",
    "constRvManualfieldstatectxkbdTypeKbd": ")),\r\n            };\r\n\r\n            const rv: ManualFieldState.CtxKbd = {\r\n                type: 'kbd',\r\n                uid5,\r\n                selectedAtom,\r\n                hasErrorAtom: atom(!!repeatData.error),\r\n                original: chunk,\r\n                ...chunkData,\r\n            };\r\n            return rv;\r\n        }\r\n        case \"pos\": {\r\n            function onScopedChange(name: string) {\r\n                return ({ get, set, nextValue }): void => {\r\n                    onChange(name)({ get, set, nextValue: rv });\r\n                };\r\n            };\r\n\r\n            const xData = createDataForStateAtom(chunk.x, validateNumberOptions);\r\n            const yData = createDataForStateAtom(chunk.y, validateNumberOptions);\r\n            const resData = createDataForStateAtom(chunk.res, validateNumberOptions);\r\n\r\n            const chunkData = {\r\n                xAtom: atomWithCallback(xData, onScopedChange(",
    "yatomAtomwithcallbackydataOnscopedchange": ")),\r\n                yAtom: atomWithCallback(yData, onScopedChange(",
    "unitsatomCreateatomforcheckchunkunitsOnscopedchange": ")),\r\n                unitsAtom: createAtomForCheck(chunk.units, onScopedChange(",
    "resatomAtomwithcallbackresdataOnscopedchange": ")),\r\n                resAtom: atomWithCallback(resData, onScopedChange(",
    "constRvManualfieldstatectxposTypePos": ")),\r\n            };\r\n\r\n            const rv: ManualFieldState.CtxPos = {\r\n                type: 'pos',\r\n                uid5,\r\n                selectedAtom,\r\n                hasErrorAtom: atom(!!xData.error || !!yData.error || !!resData.error),\r\n                original: chunk,\r\n                ...chunkData,\r\n            };\r\n            return rv;\r\n        }\r\n        case \"dly\": {\r\n            function onScopedChange(name: string) {\r\n                return ({ get, set, nextValue }): void => {\r\n                    onChange(name)({ get, set, nextValue: rv });\r\n                };\r\n            };\r\n\r\n            const nData = createDataForStateAtom(chunk.n, validateNumberOptions);\r\n\r\n            const chunkData = {\r\n                nAtom: atomWithCallback(nData, onScopedChange(",
    "constRvManualfieldstatectxdlyTypeDly": ")),\r\n            };\r\n\r\n            const rv: ManualFieldState.CtxDly = {\r\n                type: 'dly',\r\n                uid5,\r\n                selectedAtom,\r\n                hasErrorAtom: atom(!!nData.error),\r\n                original: chunk,\r\n                ...chunkData,\r\n            };\r\n            return rv;\r\n        }\r\n        case \"fld\": {\r\n            function onScopedChange(name: string) {\r\n                return ({ get, set, nextValue }): void => {\r\n                    console.log(",
    "chunkUid5NextvalueOnchangenameGet": ", { chunk, uid5, nextValue });\r\n                    onChange(name)({ get, set, nextValue: rv });\r\n                };\r\n            };\r\n\r\n            const fieldForAtoms: EditorField.ForAtoms = convFieldForEditor(chunk.field.mani);\r\n            const fldAtoms: Atomize<EditorField.ForAtoms> = NormalFieldConv.createAtoms(fieldForAtoms, onScopedChange("
  },
  "src/renderer/src/store/2-file-mani-atoms/2-manual-fields/3-panels/1-panel-actions/5-op-atoms/c-nun-editor-data-atom.tsx": {
    "jotaiGetAtomWithParameters": "jotai get atom with parameters"
  },
  "src/renderer/src/store/2-file-mani-atoms/2-manual-fields/3-panels/1-panel-actions/5-op-atoms/d-panel-actions-list-activation.ts": {
    "formidx": "${formIdx}"
  },
  "src/renderer/src/store/2-file-mani-atoms/3-options/1-create-options-ctx/0-create-options-atoms.ts": {
    "updatename": "${updateName}",
    "colorDarkgoldenrodFontsize06rem": ", 'color: darkgoldenrod; font-size: 0.6rem;', "
  },
  "src/renderer/src/store/2-file-mani-atoms/3-options/2-conv-options/2-o-create-atoms.tsx": {
    "theScreenCannotBeDetected": "The screen cannot be detected if the window caption is empty.",
    "valueCannotBeEmpty": "Value cannot be empty."
  },
  "src/renderer/src/store/2-file-mani-atoms/3-options/2-conv-options/8-name-access.tsx": {
    "getfileusmaniatomsatomformidxloginoptionsp1generalnameatom": "get(fileUs.maniAtomsAtom)?.[FormIdx.login]?.options.p1General.nameAtom",
    "constManiatomsGetfileusmaniatomsatomConstLogin": "\r\n * const maniAtoms = get(fileUs.maniAtomsAtom);\r\n * const login = maniAtoms?.[FormIdx.login];\r\n * if (!login) {\r\n *     return null;\r\n * }\r\n * const loginCtx: OFormContextProps | undefined = { maniAtoms, oAllAtoms: { fileUsCtx: login.fileUsCtx, options: login.options }, formIdx: FormIdx.login };\r\n * const { nameAtom } = loginCtx.oAllAtoms.options.p1General;\r\n * "
  },
  "src/renderer/src/store/2-file-mani-atoms/3-options/2-conv-options/9-types.tsx": {
    "sStoredAsStringSubmittype": "s stored as string\r\n        submitType: string;                     // \"dosubmit\" | \"nosubmit\"\r\n        qlName: string;                         // Quick Link Name\r\n        qlWoCred: boolean;                      // Quick reauthentication enable/disable (QL wo/ crededntials). I",
    "sHereAtAllUnkattrs": "s here at all\r\n        unkAttrs: string;                       // unknown attributes\r\n    };\r\n\r\n    type p2Detect = {                           // Part Screen Detection\r\n        ourl: string;                           // original URL\r\n        murl: string;                           // match URL\r\n        \r\n        webCheckUrl: boolean;                   // ",
    "notUsedByEditorOnly": " not used by editor; only for detection section creation; in file ",
    "captionStringWindowsCaptionVariablecaption": "\r\n        caption: string;                        // Windows Caption\r\n        variablecaption: string;                // Variable Caption\r\n        monitor: boolean;                       // Monitor screen changes\r\n\r\n        dlg_tab: string;\r\n        dlg_class: string;\r\n        dlg_checkexe: boolean;\r\n\r\n        emu_pattern: string;\r\n\r\n        names: string;\r\n        names_ext: string;\r\n        processname: string;\r\n        commandline: string;\r\n\r\n        reCheck: boolean;                       // re-check window after fillin\r\n    };\r\n\r\n    type p3Auth = {                             // Part Authentication\r\n        aim: boolean;                           // Start authentication immediately\r\n        lock: boolean;                          // Lock out login fields\r\n        auth_pl: string;                        // extended policy (see AuthTokenValues); only one bit as hex string (auth_pl=\"100\"); used only for login form\r\n    };\r\n\r\n    type p4QL = {                               // Part Quick Links\r\n        qName: string;                          // Quick Link Name\r\n        qUrl: string;                           // Quick Link URL\r\n        qUse: boolean;                          // Use Quick Link, i.e display on mini-dashboard; now totally depends on "
  },
  "src/renderer/src/store/2-file-mani-atoms/4-cpass-to-login-links/1-create-fields-list.tsx": {
    "loginOrCpassAtCreate": "login (or cpass at create time)",
    "fontsize05rem": "font-size:0.5rem",
    "getfieldlabelatom": "${get(field.labelAtom)}",
    "fontsize05remColorForestgreen": "font-size:0.5rem; color: forestgreen",
    "fontsize05remFormidxColorForestgreenColor": ",\r\n        'font-size:0.5rem',\r\n        !formIdx ? 'color: forestgreen' : 'color: darkseagreen');\r\n\r\n    const colors: string[] = [];\r\n    const lines: string[] = [];\r\n\r\n    fields.forEach(\r\n        (field) => {\r\n            lines.push("
  },
  "src/renderer/src/store/2-file-mani-atoms/4-cpass-to-login-links/3-login-fields-dropdown.tsx": {
    "rindexuuid": "${rindexUuid}",
    "notLinked": "Not linked",
    "thereIsNoPasswordIn": "There is no password in the login form",
    "ifLoginpasswordslengthRvunshiftnotLinked0": "]));\r\n\r\n        if (loginPasswords.length) {\r\n            rv.unshift(['Not linked', '0']); // vs. 'No link'\r\n        } else {\r\n            rv.unshift(['There is no password in the login form', '0']);\r\n        }\r\n\r\n        return rv;\r\n    }\r\n);\r\n\r\nfunction printFields(rowCtx: FieldRowCtx, fields: FieldRowCtx[] | undefined, formIdx: FormIdx, { get }: GetOnly) {\r\n    if (!fields) {\r\n        return;\r\n    }\r\n    console.log(",
    "constRindexuuidGetrowctxrfielduuidatomConstAll": ");\r\n    const rindexUuid = get(rowCtx.rfieldUuidAtom);\r\n\r\n    const all = fields.map((field) => ",
    "joinConsolelog": ").join('') || '[]';\r\n    console.log("
  },
  "src/renderer/src/store/2-file-mani-atoms/9-types/1-mani-atoms-type.ts": {
    "sReadOnlyAndReactive": "s []), read only, and reactive\r\n    cFields: Atom<FieldRowCtx[]>,               // cpass fields\r\n];\r\n\r\n// Props given to children of form editor\r\n\r\nexport type NFormProps = {                      // To access ",
    "formFieldsAndSubmitManiatoms": " form fields and submit\r\n    maniAtoms: ManiAtoms;\r\n    nFormCtx: NFormCtx;                         // This is maniAtoms[formIdx] with required ",
    "memberExportTypeMformpropsTo": " member\r\n};\r\n\r\nexport type MFormProps = {                      // To access ",
    "formFieldsManiatomsManiatomsMformctx": " form fields\r\n    maniAtoms: ManiAtoms;\r\n    mFormCtx: MFormCtx;                         // This is maniAtoms[formIdx] with required ",
    "memberExportTypeOformpropsTo": " member\r\n};\r\n\r\nexport type OFormProps = {                      // To access form options\r\n    maniAtoms: ManiAtoms;\r\n    oAllAtoms: OFormCtx;\r\n};\r\n\r\nexport type NFormCtx = Prettify<RequireAtLeastOne<Omit<AnyFormCtx, ",
    "exportTypeMformctxPrettifyrequireatleastoneomitanyformctx": ">>;\r\nexport type MFormCtx = Prettify<RequireAtLeastOne<Omit<AnyFormCtx, ",
    "exportTypeOformctxPrettifypickanyformctx": ">>;\r\nexport type OFormCtx = Prettify<Pick<AnyFormCtx, ",
    "changesCallbackPropsExportType": ">>;\r\n\r\n// Changes callback props\r\n\r\nexport type OnChangeProps = {\r\n    fileUsCtx: FileUsCtx;\r\n    get: Getter;\r\n    set: Setter;\r\n};\r\n\r\n// Field highlight during manifest creation\r\n\r\nexport type FieldHighlightCtx = {\r\n    nFieldCtx?: FieldRowCtx;\r\n    mFieldCtx?: ManualFieldState.Ctx;\r\n    fileUs: FileUs;\r\n    formIdx: FormIdx;\r\n};\r\n\r\n// Safe accessors by context of calling function\r\n\r\nexport function safeByContext<T>(obj: T | null | undefined): NonNullable<T> {\r\n    if (!obj) {\r\n        throw new Error(",
    "returnObjExportFunctionSafemaniatomsmaniatoms": ");\r\n    }\r\n    return obj;\r\n}\r\n\r\nexport function safeManiAtoms(maniAtoms: ManiAtoms | null): ManiAtoms {\r\n    if (!maniAtoms) {\r\n        throw new Error(",
    "returnManiatomsExportFunctionSafemaniatomsfromfileusctxfileusctx": ");\r\n    }\r\n    return maniAtoms;\r\n}\r\n\r\nexport function safeManiAtomsFromFileUsCtx(fileUsCtx: FileUsCtx | null | undefined, get: Getter): ManiAtoms {\r\n    return safeByContext(get(safeByContext(fileUsCtx?.fileUs?.maniAtomsAtom)));\r\n}\r\n\r\n// Type safety guards\r\n\r\nexport function isNormalForm(formCtx: AnyFormCtx): formCtx is NFormCtx {\r\n    return !!formCtx.normal;\r\n}\r\n\r\nexport function isManualForm(formCtx: AnyFormCtx): formCtx is MFormCtx {\r\n    return !!formCtx.manual;\r\n}\r\n\r\n// Form fields access atoms\r\n\r\nexport type FieldRowCtx = NormalField.RowCtx;\r\n\r\ntype AllFormsFieldsAtoms = {\r\n    loginAtom: Atom<FieldRowCtx[]>,\r\n    cpassAtom: Atom<FieldRowCtx[]>,\r\n};\r\n\r\ntype AllFormsFields = {\r\n    login: FieldRowCtx[],\r\n    cpass: FieldRowCtx[],\r\n};\r\n\r\nexport const lFieldsIdx = 2;                    // Login fields index in maniAtoms\r\nexport const cFieldsIdx = 3;                    // Cpass fields index in maniAtoms\r\n\r\nexport function getAllFormsFieldsAtoms(maniAtoms: ManiAtoms): AllFormsFieldsAtoms {\r\n    return {\r\n        loginAtom: maniAtoms[lFieldsIdx],\r\n        cpassAtom: maniAtoms[cFieldsIdx],\r\n    };\r\n}\r\n\r\nexport function getAllFormsFields_byManiAtoms(maniAtoms: ManiAtoms, { get }: GetOnly): AllFormsFields {\r\n    const { loginAtom, cpassAtom } = getAllFormsFieldsAtoms(maniAtoms);\r\n    return {\r\n        login: get(loginAtom),\r\n        cpass: get(cpassAtom),\r\n    };\r\n}\r\n\r\nexport function getAllFormsFields_byFileUsCtx(fileUsCtx: FileUsCtx, getOnly: GetOnly): AllFormsFields {\r\n    const maniAtoms = safeManiAtoms(getOnly.get(fileUsCtx.fileUs.maniAtomsAtom));\r\n    return getAllFormsFields_byManiAtoms(maniAtoms, getOnly);\r\n}\r\n\r\n// Guards\r\n\r\nexport function guardedFormIdx(mFormProps: MFormProps): FormIdx {\r\n    if (mFormProps?.mFormCtx?.fileUsCtx?.formIdx === undefined) {\r\n        console.error("
  },
  "src/renderer/src/store/2-file-mani-atoms/9-types/2-file-us-changes.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "fileChanges": "🚼 File Changes:",
    "printchangesfileusReturnChangesFunctionSetnewloginchange": ");\r\n    printChanges(fileUs);\r\n\r\n    return changes;\r\n}\r\n\r\nfunction setNewLoginChange({ fileUs }: { fileUs: FileUs; }) {\r\n    setChangeFlag({ fileUs }, true, 'login');\r\n}\r\n\r\nfunction setCpassChange({ fileUs }: { fileUs: FileUs; }, changed: boolean) {\r\n    setChangeFlag({ fileUs }, changed, 'cpass');\r\n}\r\n\r\nfunction clearAllChanges({ fileUs }: { fileUs: FileUs; }) {\r\n    fileUs.fileCnt.changesSet.clear();\r\n    allFileUsChanges.delete(",
    "changesCheckFunctionHasanychangeFileus": ");\r\n}\r\n\r\n// Changes check\r\n\r\nfunction hasAnyChange({ fileUs }: { fileUs: FileUs; }): boolean {\r\n    return fileUs.fileCnt.changesSet.size > 0;\r\n}\r\n\r\nfunction hasChange({ fileUs }: { fileUs: FileUs; }, name: string): boolean {\r\n    return fileUs.fileCnt.changesSet.has(name);\r\n}\r\n\r\nfunction hasCpassChange({ fileUs }: { fileUs: FileUs; }): boolean {\r\n    return hasChange({ fileUs }, 'cpass');\r\n}\r\n\r\n// Name of change\r\n\r\nfunction changeName(formIdx: FormIdx, area: string, name: string): string { // area: 'o' - options, 'f' - form, manual, 'submit'\r\n    return "
  },
  "src/renderer/src/store/3-field-catalog-atoms/1-fc-file-atoms/1-create-fce/0-root-fce.ts": {
    "tKnowTheFolderFc": "t know the folder, fc may already exist there.\r\n * We should show a notification to prevent any attempts to use the field catalog\r\n * without having a drop operation prior.\r\n */\r\nexport function hasRootFceAtoms(): boolean {\r\n    return !!rootFcFileUs?.fceAtomsForFcFile;\r\n}\r\n\r\nexport function getRootFceAtoms(): FceAtoms {\r\n    if (!rootFcFileUs?.fceAtomsForFcFile) {\r\n        throw new Error("
  },
  "src/renderer/src/store/3-field-catalog-atoms/1-fc-file-atoms/1-create-fce/1-assign-fc-root.ts": {
    "ifGoodforfcFileusfceatomsrefformaniRootfcfceatomsforfcfile3": "));\r\n            if (goodForFc) {\r\n                fileUs.fceAtomsRefForMani = rootFc.fceAtomsForFcFile;\r\n            }\r\n        }\r\n    );\r\n\r\n    // 3. Set root field catalog as master\r\n\r\n    if (rootFc.fceAtomsForFcFile?.viewFceCtx) {\r\n        rootFc.fceAtomsForFcFile.viewFceCtx.isMaster = true;\r\n    }\r\n\r\n    setRootFcFileUs(rootFc);\r\n\r\n    return newlyCreatedFc;\r\n}\r\n\r\n/**\r\n * Find the root field catalog in fileUsItems.\r\n */\r\nfunction findRootFc(fileUsItems: FileUs[], rootPath: string): FileUs | undefined {\r\n    let rootFc: FileUs = undefined as unknown as FileUs;\r\n\r\n    const onlyFcs = fileUsItems.reduce(\r\n        (acc, fileUs) => {\r\n            if (fileUs.parsedSrc.stats.isFCat) {\r\n                const fpath = fileUs.fileCnt.fpath.toLowerCase();\r\n                const fname = fileUs.fileCnt.fname.toLowerCase();\r\n\r\n                createFceAtomsInFileUs(fileUs);\r\n\r\n                const isRoot = fname === defaultFcName && fpath === rootPath;\r\n                if (isRoot) {\r\n                    rootFc = fileUs;\r\n                } else {\r\n                    acc["
  },
  "src/renderer/src/store/3-field-catalog-atoms/1-fc-file-atoms/1-create-fce/2-create-fce-atoms.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "thisIsNotAField": "This is not a field catalog file"
  },
  "src/renderer/src/store/3-field-catalog-atoms/1-fc-file-atoms/1-create-fce/3-create-fce-ctx.ts": {
    "filterfceitemsRv": "filterFceItems rv:"
  },
  "src/renderer/src/store/3-field-catalog-atoms/1-fc-file-atoms/2-items/2-add-del-item.tsx": {
    "newitemfcemetaindexNewidxNewitembeforeeditdisplaynameNewnameNewitemfieldvaluedisplayname": ";\r\n\r\n        newItem.fceMeta.index = newIdx;\r\n        newItem.beforeEdit.displayname = newName;\r\n        newItem.fieldValue.displayname = newName;\r\n\r\n        set(doSelectIdxFcAtom, {fceCtx, idx: newIdx, doubleClick: false});\r\n        set(fceCtx.selectedItemAtom, newItem);\r\n\r\n        // update file changes\r\n\r\n        fileUsChanges.set(fceCtx.fceAtoms, true, ",
    "returnNewitemExportConstDodeleteselecteditematom": ");\r\n\r\n        return newItem;\r\n    }\r\n);\r\n\r\nexport const doDeleteSelectedItemAtom = atom(\r\n    null,\r\n    (get, set, fceCtx: FceCtx) => {\r\n\r\n        const fceAtoms = fceCtx.fceAtoms;\r\n        const items = get(fceCtx.shownAtom);\r\n        const idx = get(fceCtx.selectedIdxStoreAtom);\r\n        const currentfceItem = items[idx];\r\n\r\n        if (!currentfceItem) {\r\n            return;\r\n        }\r\n\r\n        set(removeLinksToFceItemAtom, { fceItem: currentfceItem });\r\n\r\n        const allItems = get(fceAtoms.allAtom);\r\n        const newItems = allItems.filter((item) => item.fceMeta.uuid !== currentfceItem.fceMeta.uuid);\r\n        set(fceAtoms.allAtom, newItems);\r\n\r\n        // select previous item if exists, otherwise select the next item or select nothing\r\n\r\n        const newIdx = idx > 0\r\n            ? idx - 1\r\n            : idx <= newItems.length - 1\r\n                ? idx\r\n                : -1;\r\n\r\n        const newItem = newItems[newIdx];\r\n\r\n        set(doSelectIdxFcAtom, {fceCtx, idx: newIdx, doubleClick: false});\r\n        set(fceCtx.selectedItemAtom, newItem);\r\n\r\n        // update file changes\r\n\r\n        const uuid = currentfceItem.fceMeta.uuid;\r\n\r\n        if (fileUsChanges.hasChange(fceAtoms, ",
    "fileuschangessetfceatomsFalse": ");\r\n            fileUsChanges.set(fceAtoms, false, ",
    "elseFileuschangessetfceatomsTrue": ");\r\n        } else {\r\n            fileUsChanges.set(fceAtoms, true, "
  },
  "src/renderer/src/store/3-field-catalog-atoms/1-fc-file-atoms/2-items/3-do-scroll-to-item.tsx": {
    "selecteditemfcemetauuid": "${selectedItem.fceMeta.uuid}",
    "dataradixscrollareaviewport": "[data-radix-scroll-area-viewport]",
    "ifParentItemdomReturnConst": ");\r\n\r\n        if (!parent || !itemDom) {\r\n            return;\r\n        }\r\n\r\n        const itemTop = itemIdx * itemDom.clientHeight;\r\n\r\n        // already visible; reduce parent height to fit the last item\r\n        const parentTop = parent.scrollTop;\r\n        if (itemTop >= parentTop && itemTop <= parentTop + parent.clientHeight - itemDom.clientHeight) {\r\n            return selectedItem;\r\n        }\r\n\r\n        // item is below the viewport\r\n        if (itemTop > parent.clientHeight - itemDom.clientHeight) {\r\n            parent.scrollTop = itemIdx * itemDom.clientHeight - parent.clientHeight / 2;\r\n        }\r\n\r\n        return selectedItem;\r\n    }\r\n);\r\n\r\n// TODO: we can use this to scroll to the selected item, but not used since we need to track the container size change and activation moment\r\nconst doScrollToOffsetAtom = atom(null,\r\n    (get, set, { container, fceCtx }: Omit<doScrollToItemAtomProps, 'scrollToIdx'>): void => {\r\n        if (!container) {\r\n            return;\r\n        }\r\n\r\n        const items = get(fceCtx.shownAtom);\r\n        if (!items.length) {\r\n            return;\r\n        }\r\n\r\n        const parent = container.querySelector("
  },
  "src/renderer/src/store/3-field-catalog-atoms/1-fc-file-atoms/2-items/5-file-us-refs-to-fc.ts": {
    "tCreateFieldCatalogIf": "t create field catalog if we clear files. //TODO: should we clear field catalog links if it was created?\r\n            return;\r\n        }\r\n\r\n        const fceItems = get(getRootFceAtoms().allAtom);\r\n        const fcQuickMap = fceItems.reduce<FceItemsMap>(\r\n            (acc, item) => (acc.set(item.beforeEdit.dbname, item), acc), new Map()\r\n        );\r\n\r\n        //TODO: for each function below convert to named function\r\n\r\n        fileUsAtoms.forEach(\r\n            (fileUsAtom) => {\r\n                const fileUs = get(fileUsAtom);\r\n                if (!fileUs.parsedSrc.mani || !fileUsHasFcRef(fileUs)) {\r\n                    return;\r\n                }\r\n\r\n                set(doPreloadManiAtomsAtom, fileUsAtom);\r\n                const maniAtoms = get(fileUs.maniAtomsAtom);\r\n                if (!maniAtoms) {\r\n                    return;\r\n                }\r\n\r\n                for (const formIdx of [FormIdx.login, FormIdx.cpass]) {\r\n                    const form = maniAtoms[formIdx];\r\n\r\n                    if (form?.normal) {\r\n                        const fields: FieldRowCtx[] = form.normal?.rowCtxs || [];\r\n\r\n                        for (const field of fields) {\r\n                            if (field.metaField.ftyp === FieldTyp.button || field.metaField.mani.rfieldform !== Mani.FORMNAME.fieldcatalog) {\r\n                                continue;\r\n                            }\r\n\r\n                            const fceItem = fcQuickMap.get(field.fromFile.dbname);\r\n                            if (fceItem) {\r\n                                set(field.fromFcAtom, fceItem);\r\n                            } else {\r\n                                field.metaField.mani.rfieldform = Mani.FORMNAME.brokenFcLink;\r\n                            }\r\n                            // printFceItem(fceItem, fileUs, field.fromFile.dbname);\r\n                        }\r\n                    }\r\n                    else if (form?.manual) {\r\n                        const chunks: ManualFieldState.Ctx[] = get(form?.manual.chunksAtom);\r\n\r\n                        for (const chunk of chunks) {\r\n                            if (chunk.type !== ",
    "chunkoriginalfieldmanirfieldformManiformnamefieldcatalogContinueConstFceitem": " || chunk.original.field.mani.rfieldform !== Mani.FORMNAME.fieldcatalog) {\r\n                                continue;\r\n                            }\r\n\r\n                            const fceItem = fcQuickMap.get(chunk.rowCtx.fromFile.dbname);\r\n                            if (fceItem) {\r\n                                set(chunk.rowCtx.fromFcAtom, fceItem);\r\n                            } else {\r\n                                chunk.rowCtx.metaField.mani.rfieldform = Mani.FORMNAME.brokenFcLink;\r\n                            }\r\n                            // printFceItem(fceItem, fileUs, chunk.rowCtx.fromFile.dbname);\r\n                        }\r\n                    }\r\n                }//for\r\n            }\r\n        );\r\n    }\r\n);\r\n\r\n/**\r\n * Remove links to field catalog from all files when field catalog item is removed\r\n */\r\nexport const removeLinksToFceItemAtom = atom(null,\r\n    (get, set, { fceItem }: { fceItem: FceItem; }) => {\r\n\r\n        const filesAtoms = get(filesAtom);\r\n\r\n        for (const fileAtom of filesAtoms) {\r\n            const fileUs = get(fileAtom);\r\n            if (!fileUs.parsedSrc.mani || !fileUsHasFcRef(fileUs)) {\r\n                continue;\r\n            }\r\n\r\n            const maniAtoms = get(fileUs.maniAtomsAtom);\r\n            if (!maniAtoms) {\r\n                continue;\r\n            }\r\n\r\n            for (const formIdx of [FormIdx.login, FormIdx.cpass]) {\r\n                const form = maniAtoms[formIdx];\r\n\r\n                if (form?.normal) {\r\n                    const fields: FieldRowCtx[] = form.normal?.rowCtxs || [];\r\n\r\n                    for (const field of fields) {\r\n                        if (field.metaField.ftyp === FieldTyp.button) {\r\n                            continue;\r\n                        }\r\n\r\n                        if (get(field.fromFcAtom) === fceItem) {\r\n                            set(field.fromFcAtom, undefined);\r\n                            field.metaField.mani.rfieldform = Mani.FORMNAME.noname;\r\n                        }\r\n                    }\r\n                } else if (form?.manual) {\r\n                    const chunks: ManualFieldState.Ctx[] = get(form?.manual.chunksAtom);\r\n\r\n                    for (const chunk of chunks) {\r\n                        if (chunk.type !== ",
    "continueIfGetchunkrowctxfromfcatomFceitemSetchunkrowctxfromfcatom": ") {\r\n                            continue;\r\n                        }\r\n\r\n                        if (get(chunk.rowCtx.fromFcAtom) === fceItem) {\r\n                            set(chunk.rowCtx.fromFcAtom, undefined);\r\n                            chunk.rowCtx.metaField.mani.rfieldform = Mani.FORMNAME.noname;\r\n                        }\r\n                    }\r\n                }\r\n            }//for\r\n        }\r\n    }\r\n);\r\n\r\nfunction fileUsHasFcRef(fileUs: FileUs): boolean {\r\n    if (!fileUs.parsedSrc.mani) {\r\n        return false;\r\n    }\r\n\r\n    const forms = fileUs.parsedSrc.mani.forms || [];\r\n\r\n    for (const form of forms) {\r\n        const fields = form.fields || [];\r\n        for (const field of fields) {\r\n            if (field.rfieldform === Mani.FORMNAME.fieldcatalog) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction printFceItem(fceItem: FceItem | undefined, fileUs: FileUs, dbname: string) {\r\n    console.log(`%c${fceItem ? ",
    "assignDbnameFileusfilecntfnameColorFceitem": "} assign ${dbname} ${fileUs.fileCnt.fname}`, `color: ${fceItem ? "
  },
  "src/renderer/src/store/3-field-catalog-atoms/1-fc-file-atoms/3-changes/2-handle-fce-prop-changes.ts": {
    "fceitemchange": "fceItem.change:",
    "changeprefix": "${changePrefix}",
    "changed": ", changed:",
    "currdbname": "${curr.dbname}",
    "currdisplayname": "${curr.displayname}",
    "printitemchangesselecteditemCtxChangedChangeprefixUuid": ");\r\n        printItemChanges(selectedItem, ctx, changed, changePrefix, uuid);\r\n    }\r\n}\r\n\r\nfunction printItemChanges(selectedItem: FceItem, ctx: FcePropChangesProps, changed: boolean, changePrefix: string, uuid: number) {\r\n    const { fceCtx/*, name, nextValue*/ } = ctx;\r\n\r\n    if (!fceCtx.fceAtoms.fileUs.parsedSrc.stats.isFCatRoot) {\r\n        return;\r\n    }\r\n\r\n    const curr = selectedItem.fieldValue;\r\n    // const next = nextValue as ValueLife;\r\n\r\n    const fmt = new ConsoleStyles();\r\n\r\n    fmt.add({ name: 'fceItem.change:', value: ",
    "cvalueColorEa900aFmtaddName": ", cValue: 'color: #ea900a' });\r\n    fmt.add({ name: ', changed:', value: changed ? 'true, ' : 'false,', cValue: changed ? 'color: #00a000' : 'color: #ababab' });\r\n    // valueLife2Styles(curr, fmt); // this not part of fc anymore\r\n    fmt.add({ name: ' dbid:', value: ",
    "fmtaddNameDispValue": " });\r\n    fmt.add({ name: ', disp:', value: ",
    "cvalueColor8eacf8ConsolelogfmttoformatedFunction": ", cValue: 'color: #8eacf8' });\r\n\r\n    console.log(...fmt.toFormated(''));\r\n}\r\n\r\nfunction valueLife2Styles(valueLife: ValueLife, out: ConsoleStyles = new ConsoleStyles()): ConsoleStyles {\r\n    const { value, valueAs, isRef, isNon } = valueLife;\r\n    out.add({ name: ' valueAs:',  /**/ value: valueAs2Str(valueAs),      /**/ cValue: 'color: #8eacf8' });\r\n    out.add({ name: ', value:',    /**/ value: "
  },
  "src/renderer/src/store/3-field-catalog-atoms/3-fc-mru/0-all.ts": {
    "itemsforeachItemIdxConsolelog": ");\r\n    items.forEach(\r\n        (item, idx) => console.log("
  },
  "src/renderer/src/store/3-field-catalog-atoms/3-fc-mru/1-mru-items.ts": {
    "null4Consolelogbuildmruwitem": "), null, 4);\r\n    //console.log('buildMruWItem', "
  },
  "src/renderer/src/store/3-field-catalog-atoms/3-fc-mru/2-use-fc-items-with-mru.tsx": {
    "fieldtyp": "${fieldTyp}",
    "moreFields": "More fields ...",
    "fieldName": "Field name",
    "notFromCatalog": "Not from catalog",
    "mruitemsConstRvUsememoIf": ", mruItems);\r\n\r\n    const rv = useMemo(() => {\r\n        if (isNonFcItem) {\r\n            return [CATALOG_NotFromFc];\r\n        }\r\n\r\n        const fType = isPsw ? FieldTyp.psw : FieldTyp.edit;\r\n        const mruItemsByType = mruItems.filter((item) => item.fieldValue.fType === fType);\r\n\r\n        if (fromFc) {\r\n            const inMru = mruItemsByType.findIndex((item) => item.fieldValue.dbname === fromFc.fieldValue.dbname);\r\n            if (inMru === -1) {\r\n                mruItemsByType.push(fromFc);\r\n            }\r\n            mruItemsByType.splice(mruSize + 1);\r\n        }\r\n\r\n        //printFceItems("
  },
  "src/renderer/src/store/3-field-catalog-atoms/9-types/1-types-fce-atoms.ts": {
    "tReallyNeedItCallback": "t really need it\r\n};\r\n\r\n// Callback\r\n\r\nexport type OnChangeFcePropParams = Prettify<{ name: string; fceCtx: FceCtx; } & OnValueChangeParams<string | ValueLife>>;\r\nexport type OnChangeFcePropValue = (props: OnChangeFcePropParams) => void;\r\n\r\n// Misc\r\n\r\nexport const defaultFcName = "
  },
  "src/renderer/src/store/4-dialogs-atoms/2-create-dialog-atoms/1-open-saw-monitor.ts": {
    "nomainforcpassatom": "no.mainForCpassAtom"
  },
  "src/renderer/src/store/4-dialogs-atoms/2-create-dialog-atoms/3-do-move-to-second-dlg.tsx": {
    "sharedipctypes": "@shared/ipc-types",
    "tUseItBelowSetclose_sawmonitoratom": "t use it below.\r\n            set(close_SawMonitorAtom);\r\n            set(setSizeNormal_SawMonitorAtom);\r\n            setBuildState({ error: ",
    "settimeoutR2mcallsshowhidewindowtrue500ReturnConst": " });\r\n            setTimeout(() => R2MCalls.showHideWindow(true), 500);\r\n            return;\r\n        }\r\n\r\n        const hwnd = get(sawHandleAtom)?.hwnd;\r\n        if (!hwnd) {\r\n            set(doAddNextToastIdAtom, toast.info(",
    "positionTopcenterReturn11Check": ", { position: \"top-center\" }));\r\n            return;\r\n        }\r\n\r\n        // 1.1. Check if can create new valid manifest\r\n\r\n        set(stopMonitorTimerAtom);\r\n\r\n        const created = await createFileUsFromNewXml({ params: { hwnd, manual: get(checkboxCreateManualModeAtom), }, showProgressAtom, getset });\r\n        if (!created) {\r\n            set(startMonitorTimerAtom);\r\n            return;\r\n        }\r\n\r\n        // 1.2. Close Saw monitor dialog\r\n\r\n        //R2MCalls.showHideWindow(false);\r\n        set(close_SawMonitorAtom);\r\n        //await delay(100);\r\n        set(setSizeNormal_SawMonitorAtom);\r\n        //setTimeout(() => R2MCalls.showHideWindow(true), 100); //TODO: we need to call R2MCalls.setSawModeOnMain({ setOn: false }); and show in one single call\r\n\r\n        // 2. Show dialog\r\n\r\n        const { noNewManiDlg } = appSettings.appUi.uiAdvanced;\r\n        const makingCpass = !!newManiContent.maniForCpassAtom;\r\n        const inlineEditor = noNewManiDlg || makingCpass;\r\n\r\n        const newFileUsAtomAtom = newManiContent.maniForCpassAtom || get(newManiContent.newFileUsAtomAtom);\r\n        const fileUs = newFileUsAtomAtom && get(newFileUsAtomAtom);\r\n        if (!fileUs) {\r\n            throw new Error(",
    "consolelogcCreate": ");\r\n        }\r\n\r\n        //console.log(`%c ✴ Create (",
    "fileusatomcnewfileusatomatomtostring": ") fileUsAtom:%c${newFileUsAtomAtom.toString()}`, ",
    "ifInlineeditorConstEndedbyokAwait": ");\r\n\r\n        if (!inlineEditor) {\r\n            const endedByOk = await asyncExecuteNewManiDlg(set); //TODO: fields highlight should be done differently for dialog editor (if we need it at all)\r\n            if (!endedByOk) {\r\n                newManiContent.disposeActive(getset);\r\n                set(close_NewManiDlgAtom);\r\n                return;\r\n            }\r\n\r\n            initFileUsFname({ fileUs, makingCpass: false });\r\n\r\n            const saved = await set(doSaveOneAtom, { fileUsAtom: newFileUsAtomAtom });\r\n            if (!saved) {\r\n                return;\r\n            }\r\n\r\n            set(close_NewManiDlgAtom);\r\n        } else {\r\n            initFileUsFname({ fileUs, makingCpass });\r\n            makingCpass ? fileUsChanges.setCpass({ fileUs }, true) : fileUsChanges.setNewLogin({ fileUs });\r\n        }\r\n\r\n        setHighlightAtoms({ fileUs, makingCpass, getset });\r\n        addToFilesTree({ fileUsAtom: newFileUsAtomAtom, fileUs, makingCpass, getset });\r\n        setManiActiveTab(makingCpass ? ",
    "setnewmanicontentnewfileusatomatomUndefinedPreserveTheNew": ");\r\n\r\n        set(newManiContent.newFileUsAtomAtom, undefined); // preserve the new fileUsAtom from be disposed by newManiContent.init();\r\n\r\n        printAtomSaved(newFileUsAtomAtom);\r\n    }\r\n);\r\n\r\nfunction initFileUsFname({ fileUs, makingCpass }: { fileUs: FileUs; makingCpass: boolean; }): void {\r\n    if (makingCpass) {\r\n        return;\r\n    }\r\n\r\n    fileUs.fileCnt.fname = `${createGuid()}.${pmExtensionMani}`;\r\n    fileUs.fileCnt.fpath = rootDir.fpath;\r\n\r\n    fileUs.fileCnt.webFsItem = new WebFsItem({\r\n        handle: undefined,\r\n        owner: rootDir.handle,\r\n        legacyPath: rootDir.fpath,\r\n    });\r\n}\r\n\r\nfunction addToFilesTree({ fileUsAtom, fileUs, makingCpass, getset: { get, set } }: { fileUsAtom: FileUsAtom; fileUs: FileUs; makingCpass: boolean; getset: GetSet; }): void {\r\n    if (makingCpass) {\r\n        return;\r\n    }\r\n\r\n    set(filesAtom, [...get(filesAtom), fileUsAtom]);\r\n    addToTotalManis(fileUs);\r\n\r\n    set(doSelectFileUsTreeAtom, fileUsAtom);\r\n\r\n    notificationNewSaved(fileUs);\r\n}\r\n\r\nfunction setHighlightAtoms({ fileUs, makingCpass, getset: { get, set } }: { fileUs: FileUs; makingCpass: boolean; getset: GetSet; }): void {\r\n    const hwnd = get(sawHandleAtom);\r\n    if (makingCpass) {\r\n        set(fileUs.hwndCpassAtom, hwnd);\r\n    } else {\r\n        set(fileUs.hwndLoginAtom, hwnd);\r\n    }\r\n    set(doClearSawHandleAtom);\r\n}\r\n\r\n//\r\n\r\nfunction printAtomSaved(fileUsAtom: FileUsAtom | undefined) {\r\n    console.groupCollapsed(\r\n        `%c🗿 Save: new fileUsAtom:%c${fileUsAtom?.toString()} %c`,\r\n        ",
    "key_2p1vzdr": ",\r\n        ",
    "colorOrangeFontsize055remColorGreen": ", 'color: orange; font-size:0.55rem', 'color: green');\r\n\r\n        if (!inlineEditor) {\r\n            const endedByOk = await asyncExecuteNewManiDlg(set); //TODO: fields highlight should be done differently for dialog editor (if we need it at all)\r\n            if (!endedByOk) {\r\n                newManiContent.disposeActive(getset);\r\n                set(close_NewManiDlgAtom);\r\n                return;\r\n            }\r\n\r\n            initFileUsFname({ fileUs, makingCpass: false });\r\n\r\n            const saved = await set(doSaveOneAtom, { fileUsAtom: newFileUsAtomAtom });\r\n            if (!saved) {\r\n                return;\r\n            }\r\n\r\n            set(close_NewManiDlgAtom);\r\n        } else {\r\n            initFileUsFname({ fileUs, makingCpass });\r\n            makingCpass ? fileUsChanges.setCpass({ fileUs }, true) : fileUsChanges.setNewLogin({ fileUs });\r\n        }\r\n\r\n        setHighlightAtoms({ fileUs, makingCpass, getset });\r\n        addToFilesTree({ fileUsAtom: newFileUsAtomAtom, fileUs, makingCpass, getset });\r\n        setManiActiveTab(makingCpass ? 'cpass' : 'login');\r\n\r\n        set(newManiContent.newFileUsAtomAtom, undefined); // preserve the new fileUsAtom from be disposed by newManiContent.init();\r\n\r\n        printAtomSaved(newFileUsAtomAtom);\r\n    }\r\n);\r\n\r\nfunction initFileUsFname({ fileUs, makingCpass }: { fileUs: FileUs; makingCpass: boolean; }): void {\r\n    if (makingCpass) {\r\n        return;\r\n    }\r\n\r\n    fileUs.fileCnt.fname = ",
    "fileusfilecntfpathRootdirfpathFileusfilecntwebfsitemNewWebfsitem": ";\r\n    fileUs.fileCnt.fpath = rootDir.fpath;\r\n\r\n    fileUs.fileCnt.webFsItem = new WebFsItem({\r\n        handle: undefined,\r\n        owner: rootDir.handle,\r\n        legacyPath: rootDir.fpath,\r\n    });\r\n}\r\n\r\nfunction addToFilesTree({ fileUsAtom, fileUs, makingCpass, getset: { get, set } }: { fileUsAtom: FileUsAtom; fileUs: FileUs; makingCpass: boolean; getset: GetSet; }): void {\r\n    if (makingCpass) {\r\n        return;\r\n    }\r\n\r\n    set(filesAtom, [...get(filesAtom), fileUsAtom]);\r\n    addToTotalManis(fileUs);\r\n\r\n    set(doSelectFileUsTreeAtom, fileUsAtom);\r\n\r\n    notificationNewSaved(fileUs);\r\n}\r\n\r\nfunction setHighlightAtoms({ fileUs, makingCpass, getset: { get, set } }: { fileUs: FileUs; makingCpass: boolean; getset: GetSet; }): void {\r\n    const hwnd = get(sawHandleAtom);\r\n    if (makingCpass) {\r\n        set(fileUs.hwndCpassAtom, hwnd);\r\n    } else {\r\n        set(fileUs.hwndLoginAtom, hwnd);\r\n    }\r\n    set(doClearSawHandleAtom);\r\n}\r\n\r\n//\r\n\r\nfunction printAtomSaved(fileUsAtom: FileUsAtom | undefined) {\r\n    console.groupCollapsed(\r\n        "
  },
  "src/renderer/src/store/4-dialogs-atoms/5-confirm-atoms/8-confirmation-ui-messages.tsx": {
    "deleteFile": "Delete file?",
    "areYouSureYouWant": "Are you sure you want to delete all actions?",
    "deletePasswordChangeForm": "Delete password change form?",
    "deleteAllActions": "Delete all actions?",
    "discardChangesAndQuit": "Discard changes and quit?",
    "youHaveUnsavedChangesDo": "You have unsaved changes. Do you want to discard them and quit?",
    "youHaveUnsavedChangesAre": "You have unsaved changes. Are you sure you want to quit?",
    "discardAndQuit": "Discard and Quit",
    "aboutPmat": "About PMAT",
    "pmatIsDevelopedByThe": "PMAT is developed by the PMAT team.",
    "folderDoesNotExist": "Folder does not exist",
    "doYouWantToRemove": "Do you want to remove this name from the most recently used list?"
  },
  "src/renderer/src/store/5-1-open-files/2-root-dir.ts": {
    "norootdirfpath": "no.rootDir.fpath"
  },
  "src/renderer/src/store/5-1-open-files/4-mru-dirs.ts": {
    "llLooseTheHandleType": "ll loose the handle type and as result won",
    "sKindOfDangerousWe": "s kind of dangerous, we relly only on the last folder name.\r\n        if (replace) {\r\n            items.splice(idx, 1);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    else if (idx >= 0) { // remove from the list at current position\r\n        items.splice(idx, 1);\r\n    }\r\n\r\n    if (items.length > 10) {\r\n        items.shift();\r\n    }\r\n\r\n    items.unshift(newFolder);\r\n    return true;\r\n}\r\n\r\nfunction removeMruListItem(items: PmatFolder[], folder: PmatFolder): boolean {\r\n    if (isPmatFolderEmpty(folder)) {\r\n        return false;\r\n    }\r\n\r\n    folder.fpath = normalizeFpath(folder.fpath);\r\n\r\n    const idx = items.findIndex((item) => item.fpath === folder.fpath);\r\n    if (idx >= 0) {\r\n        items.splice(idx, 1);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n// Initialize\r\n\r\n/**\r\n * Call this function to initialize global settings before UI is rendered.\r\n * This is critical to initializeMruIndexDB() that will convert appSettings.files.mru.folders to valtio refs.\r\n * Do nothing just load module first and the rest will be done inside module load.\r\n */\r\nexport function initializeMru(hasMainReal: boolean) {\r\n    //showStack(",
    "hasmainrealIfHasmainrealReturnClearmrufromlocalstorage": ", hasMainReal);\r\n    if (hasMainReal) {\r\n        return;\r\n    }\r\n\r\n    clearMruFromLocalStorage();         // For non electron app clear MRU list from localStorage\r\n    initializeMruIndexDB();             // Intentionally call async wo/ await\r\n\r\n    function clearMruFromLocalStorage() {\r\n        // For non electron app clear MRU list from localStorage.\r\n        appSettings.appUi.mru.folders = []; // The list will be loaded from indexDB with FileSystemDirectoryHandles.\r\n    }\r\n\r\n    /**\r\n     * For non electron app subscribe, for electron no need to subscribe. electron has no directory handles.\r\n     * MRU list\r\n     * https://developer.chrome.com/docs/capabilities/web-apis/file-system-access ",
    "httpsfilehandledirectoryhandleindexeddbglitchme": "\r\n     *      https://filehandle-directoryhandle-indexeddb.glitch.me ",
    "httpsgithubcomjakearchibaldidbkeyvalAsyncFunctionInitializemruindexdbIf": "\r\n     *          https://github.com/jakearchibald/idb-keyval\r\n     */\r\n    async function initializeMruIndexDB() {\r\n        if (hasMainReal) {\r\n            return;\r\n        }\r\n\r\n        const folders = await get<PmatFolder[]>(",
    "appsettingsappuimrufoldersFoldersfilteritemItemfpathmaprefFilterOut": ") || [];\r\n        appSettings.appUi.mru.folders = folders.filter(item => item.fpath).map(ref); // filter out empty folders, somehow we had rpath instead of fpath and set items as valtio refs\r\n\r\n        subscribe(appSettings.appUi.mru, () => {\r\n            const snapFoloders = snapshot(appSettings.appUi.mru).folders as PmatFolder[];\r\n            //printMruList(snapFoloders);\r\n            set(",
    "snapfolodersUtilitiesFunctionPrintrootdirfolderPmatfolder": ", snapFoloders);\r\n        });\r\n    }\r\n}\r\n\r\n// Utilities\r\n\r\nfunction printRootDir(folder: PmatFolder, title: string) {\r\n    console.log(`%c ${title} `, ",
    "folderFunctionPrintmrulistfoldersPmatfolderFoldersforeachfolder": ", folder);\r\n}\r\n\r\nfunction printMruList(folders: PmatFolder[]) {\r\n    folders.forEach((folder) => printRootDir(folder, "
  },
  "src/renderer/src/store/5-2-tree-files/1-filtered-files.ts": {
    "fileusfilecntfname": "${fileUs.fileCnt.fname}",
    "tFilterItemsByFilename": "t filter items by filename, but by manifest content only.\r\n */\r\nexport const filteredAtom = atom<FileUsAtom[]>(\r\n    (get) => {\r\n        const { regex, winOnly, webOnly, whyOnly, capOnly, clsOnly } = createRegexByFilter(\r\n            get(searchFilterData.textAtom),\r\n            get(searchFilterData.caseSensitiveAtom)\r\n        );\r\n\r\n        // 1. Filter\r\n\r\n        const { shownManis: { showNormal, showManual, showEmpty, fcAllowed }, sortOrder: { order, sortBy } } = get(optionsFilesProxyAtom);\r\n        const skipFc = !fcAllowed || !get(optionsAppUiProxyAtom).uiAdvanced.showFieldCatalog;\r\n\r\n        const files = get(filesAtom);\r\n        //printFilterFiles(files, get);\r\n\r\n        const rv = files.filter(\r\n            (fileAtom: FileUsAtom) => {\r\n                const fileUs = get(fileAtom);\r\n                const { mani, meta, stats: { isFCat } } = fileUs.parsedSrc;\r\n\r\n                if (!isFCat && !mani) {\r\n                    return false;\r\n                }\r\n\r\n                if (isFCat && skipFc) {\r\n                    return false;\r\n                }\r\n\r\n                if (capOnly) {\r\n                    return isAnyMatchedCap(mani, regex);\r\n                }\r\n\r\n                if (clsOnly) {\r\n                    return isAnyMatchedCls(mani, regex);\r\n                }\r\n\r\n                const isWeb = isAnyWeb(meta);\r\n                if ((winOnly && isWeb) || (webOnly && !isWeb) || (whyOnly && !isAnyWhy(meta))) {\r\n                    return false;\r\n                }\r\n\r\n                let useItNow = isAnyEmpty(meta) ? showEmpty : isAnyManual(meta) ? showManual : showNormal;\r\n                if (useItNow && regex) {\r\n                    useItNow = useFileUsByFilter(fileUs, regex);\r\n                }\r\n                return useItNow;\r\n            }\r\n        );\r\n\r\n        // 2. Sort\r\n\r\n        sortResultInPlace(rv, sortBy, order, get);\r\n\r\n        return rv;\r\n    }\r\n\r\n);\r\n\r\nexport const isFilterActiveAtom = atom(\r\n    (get) => {\r\n        const files = get(filesAtom);\r\n        const filtered = get(filteredAtom);\r\n        return files.length !== filtered.length;\r\n    }\r\n);\r\n\r\nfunction printFilterFiles(files: FileUsAtom[], get: Getter) {\r\n    console.log(`%c All files before filter: lenght=${files.length} `, ",
    "filesforeachFileusatomConstFileusGetfileusatom": ");\r\n    files.forEach(\r\n        (fileUsAtom) => {\r\n            const fileUs = get(fileUsAtom);\r\n            if (fileUs?.fileCnt) {\r\n                console.log(\r\n                    `\\t\\ttreeAtom:%c${fileUsAtom.toString()} %cuuid:${fileUs.fileCnt.unid} fname:\"${fileUs.fileCnt.fname}\"`,\r\n                    ",
    "key_4wmuqvk": ",\r\n                    ",
    "backgroundcolorGreenColorWhiteFilesforeach": ", 'background-color: green; color: white');\r\n    files.forEach(\r\n        (fileUsAtom) => {\r\n            const fileUs = get(fileUsAtom);\r\n            if (fileUs?.fileCnt) {\r\n                console.log(\r\n                    ",
    "fontweightNormalColorMagentaFontweight": ",\r\n                    'font-weight: normal; color: magenta',\r\n                    'font-weight: normal; color: gray',\r\n                    { fileUs }\r\n                );\r\n            } else {\r\n                console.error("
  },
  "src/renderer/src/store/5-3-right-panel/8-print-fileus-atom-links.tsx": {
    "fontweightNormalBackgroundcolorRedColor": "font-weight: normal; background-color: red; color: white",
    "fontweightNormalBackgroundcolorLimegreenColor": "font-weight: normal; background-color: limegreen; color: white",
    "fontweightNormalColorForestgreen": "font-weight: normal; color: forestgreen",
    "fontweightNormalColorGray": "font-weight: normal; color: gray",
    "fieldstr": "${fieldStr}",
    "fontsize065remColorBlack": "font-size:0.65rem; color: black",
    "fontsize065remColorForestgreen": "font-size:0.65rem; color: forestgreen",
    "fontsize065remColorBlackFontfamilyMonospace": "font-size:0.65rem; color: black; font-family: monospace;",
    "newatomFontweightNormalBackgroundcolorRed": ",\r\n        //newAtom ? 'font-weight: normal; background-color: red; color: white' : 'font-weight: normal; background-color: limegreen; color: darkgreen',\r\n        'font-weight: normal; background-color: limegreen; color: darkgreen',\r\n        // 'font-weight: normal; color: forestgreen',\r\n        'font-weight: normal; background-color: limegreen; color: white',\r\n        'font-weight: normal; color: gray',\r\n    );\r\n\r\n    const fileUs = thisAtom && get(thisAtom);\r\n    const maniAtoms = fileUs && get(fileUs.maniAtomsAtom);\r\n    if (maniAtoms) {\r\n        printManiAtoms(maniAtoms, { get });\r\n    } else {\r\n        console.log(",
    "colorRedConsolegroupendFunctionPrintmaniatomsmaniatoms": ", 'color: red');\r\n    }\r\n\r\n    console.groupEnd();\r\n}\r\n\r\nfunction printManiAtoms(maniAtoms: ManiAtoms, getOnly: GetOnly) {\r\n    const { login, cpass } = getAllFormsFields_byManiAtoms(maniAtoms, getOnly);\r\n    printFormFields(login, getOnly);\r\n    printFormFields(cpass, getOnly);\r\n}\r\n\r\nfunction printFormFields(fields: FieldRowCtx[], { get }: GetOnly) {\r\n    const colors: string[] = [];\r\n    const lines: string[] = [];\r\n\r\n    fields.forEach(\r\n        (field) => {\r\n            const fieldStr = get(field.labelAtom);\r\n\r\n            const rfieldValue = get(field.rfieldAtom);\r\n            const rfield = rfieldValue === 'in' ? ' in' : rfieldValue === 'out' ? ' out' : '   ';\r\n            const other = ",
    "constMemonlyfromatmMemonlytostringfieldmemonlyatomGetfieldmemonlyatomUndefined": ";\r\n\r\n            const memOnlyFromAtm = memOnlyToString(field.memOnlyAtom ? get(field.memOnlyAtom) : undefined);\r\n            const memOnlyFromFld = memOnlyToString(field.metaField.mani.memOnly);\r\n\r\n            lines.push(",
    "colorspushFontsize065remColorBlackFontsize065rem": ");\r\n            colors.push(\r\n                'font-size:0.65rem; color: black',\r\n                'font-size:0.65rem; color: forestgreen',\r\n                'color: forestgreen',\r\n                'font-size:0.65rem; color: forestgreen',\r\n                'font-size:0.65rem; color: black; font-family: monospace;',\r\n                'font-size:0.65rem; color: black; font-family: monospace;',\r\n            );\r\n        }\r\n    );\r\n\r\n    console.log(lines.join('\\n'), ...colors);\r\n}\r\n\r\nfunction memOnlyToString(memOnly: Mani.MemOnly | undefined): string {\r\n    if (!memOnly) {\r\n        return 'memOnly:undefined';\r\n    }\r\n    const { formIdx, uuidThis, uuidLoginFld, dbnameInitial } = memOnly;\r\n    return "
  },
  "src/renderer/src/store/7-napi-atoms/1-do-get-hwnd/1-do-get-hwnd.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/7-napi-atoms/1-do-get-hwnd/2-do-get-hwnd-caption.ts": {
    "loginTailwindUiAnd2": "Login - Tailwind UI and 2 more pages - Personal - Microsoft​ Edge",
    "microsoftEdge": " - Microsoft​ Edge'",
    "longNameCyw2web0dppmat24litesrcrenderersrcstore7napiatoms1dogethwnd": "long name C:\\\\Y\\\\w\\\\2-web\\\\0-dp\\\\pmat24-lite\\\\src\\\\renderer\\\\src\\\\store\\\\7-napi-atoms\\\\1-do-get-hwnd",
    "shortName": "short name",
    "paramCaptionReturnsFunctionShortenwindowcaptioncaption": "\"\r\n * @param caption \r\n * @returns \r\n */\r\nfunction shortenWindowCaption(caption: string | undefined) {\r\n    let rv = caption || ",
    "ifRvRvRvreplaceGoogle": ";\r\n    if (rv) {\r\n        rv = rv.replace(/ - Google Chrome$/g, ",
    "rvRvreplaceMicrosoftEdgeg": ");\r\n        rv = rv.replace(/ - Microsoft.? Edge$/g, ",
    "rvRvreplacePersonalg": ");\r\n        rv = rv.replace(/ - Personal$/g, "
  },
  "src/renderer/src/store/7-napi-atoms/1-do-get-hwnd/8-do-get-hwnd-extra.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/7-napi-atoms/2-do-get-icon/2-do-get-icon.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "setsawiconatomImagePrinttocreatetestdataGetStatenapiaccessbuilderror": ";\r\n                set(sawIconAtom, image);\r\n            }\r\n\r\n            printToCreateTestData({ get });\r\n        }\r\n\r\n        stateNapiAccess.buildError = '';\r\n    } catch (error) {\r\n        set(doClearSawIconAtom);\r\n        stateNapiAccess.buildError = errorToString(error);\r\n\r\n        console.error(",
    "constIconscacheMapstringStringNew": ");\r\n    }\r\n}\r\n\r\nconst iconsCache: Map<string, string> = new Map(); // hwnd -> string with WindowIconGetterResult\r\n\r\nexport function clearIconsCache() { // Clear icons cache on monitor dialog close\r\n    iconsCache.clear();\r\n}\r\n\r\nasync function doTestIcon(hwnd: string, { get, set }: GetSet) {\r\n    // if (lastTestCreateHwnd === debugSettings.testCreate.hwnd) {\r\n    //     return;\r\n    // }\r\n    // lastTestCreateHwnd = debugSettings.testCreate.hwnd;\r\n\r\n    const testHwnd = (await set(doLoadFakeHwndAtom, debugSettings.testCreate.hwnd));\r\n\r\n    if (testHwnd?.icon?.data) {\r\n        const image = new Image();\r\n        image.src = ",
    "setsawiconatomImageSetsawiconstratomJsonstringifytesthwndElse": ";\r\n        set(sawIconAtom, image);\r\n        set(sawIconStrAtom, JSON.stringify(testHwnd));\r\n    } else {\r\n        set(doClearSawIconAtom);\r\n    }\r\n}\r\n\r\n// let lastTestCreateHwnd: typeof debugSettings.testCreate.hwnd = 'none';\r\n\r\nconst doClearSawIconAtom = atom(\r\n    null,\r\n    (get, set) => {\r\n        set(sawIconStrAtom, '');\r\n        set(sawIconAtom, null);\r\n    }\r\n);\r\n\r\n// Utilities. Print hwnd and icon in format that can be used in tests.\r\n\r\nfunction printToCreateTestData({ get }: GetOnly) {\r\n    const testHwnd = get(sawHandleAtom);\r\n    const testIcon = JSON.parse(get(sawIconStrAtom) || '{}') as WindowIconGetterResult;\r\n    const final = {\r\n        hwnd: testHwnd,\r\n        icon: testIcon,\r\n    };\r\n    final.icon.data = final.icon.data ? ",
    "consolelog": " : '';\r\n    console.log("
  },
  "src/renderer/src/store/7-napi-atoms/3-do-get-controls/1-do-get-controls.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/7-napi-atoms/3-do-get-controls/2-conv-controls-meta.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/7-napi-atoms/3-do-get-controls/8-utils-conv.tsx": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/7-napi-atoms/3-do-get-controls/9-types.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/7-napi-atoms/4-do-get-mani/1-do-get-mani.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/7-napi-atoms/5-do-screenshots/5-do-screenshots.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "couldNotFind0x240852In": "Could not find 0x240852 in 0x0000000000240852",
    "tlwinfohwnd": "${tlwInfo.hwnd}",
    "screenshothwnd": "${screenshot.hwnd}",
    "itemdatasubstring07": "${item.data?.substring(0, 7)}...",
    "itemcaption": "${item.caption}",
    "toasterror": ");\r\n//         toast.error(",
    "setallscreenshotatomFunctionCorrelatescreenshotsordertlwinfosTlwinfoScreenshots": ");\r\n        set(allScreenshotAtom, []);\r\n    }\r\n}\r\n\r\nfunction correlateScreenshotsOrder(tlwInfos: TlwInfo[], screenshots: TlwScreenshot[]): TlwScreenshot[] {\r\n    const rv: TlwScreenshot[] = []; //tlwInfos.forEach((tlwInfo, idx) => tlwInfo.hwnd.length < 16 && (tlwInfo.hwnd = ",
    "fixErrorCouldNotFind": ")); // Fix error: 'Could not find 0x240852 in 0x0000000000240852'\r\n\r\n    tlwInfos.forEach(\r\n        (tlwInfo) => {\r\n            const screenshotItem = screenshots.find(screenshot => screenshot.hwnd === tlwInfo.hwnd);\r\n            if (screenshotItem) {\r\n                rv.push(screenshotItem);\r\n            } else {\r\n                console.log(",
    "join": ").join(', ')}]",
    "setallscreenshotatomAsyncFunctionDotestscreenshotsSet": ");\r\n//         set(allScreenshotAtom, []);\r\n//     }\r\n// }\r\n\r\nasync function doTestScreenshots({ set }: SetOnly) {\r\n    const screen = debugSettings.testCreate.screen;\r\n    const screenshots = await set(doLoadFakeScreensAtom, screen);\r\n    set(allScreenshotAtom, addScreenshotsExtra(screenshots));\r\n}\r\n\r\nfunction addScreenshotsExtra(screenshots: TlwScreenshot[]): TlwScreenshotInfo[] {\r\n    const infos = screenshots.map(\r\n        (item, idx) => {\r\n            const newItem: TlwScreenshot = { ...item };\r\n            if (newItem.type === 'data') {\r\n                newItem.data = ",
    "constRvTlwscreenshotinfoItemNewitem": ";\r\n            }\r\n            const rv: TlwScreenshotInfo = {\r\n                item: newItem,\r\n                uuid: uuid.asRelativeNumber(),\r\n                editor: proxy({ selected: false }),\r\n            };\r\n            return rv;\r\n        }\r\n    );\r\n    return infos;\r\n}\r\n\r\nfunction printScreenshots(screenshots: TlwScreenshot[]) {\r\n    const lines: string[] = [];\r\n\r\n    screenshots.forEach(\r\n        (item, idx) => {\r\n            const idxStr = ",
    "padstart2IfItemtypeErrorLinespush": ".padStart(2, ' ');\r\n\r\n            if (item.type === 'error') {\r\n                lines.push(",
    "returnElseIfItemtypeData": ");\r\n                return;\r\n            } else if (item.type === 'data') {\r\n                lines.push(",
    "returnLinespushundefinedConsolelog": ");\r\n                return;\r\n            }\r\n\r\n            lines.push('undefined');\r\n        }\r\n    );\r\n\r\n    console.log("
  },
  "src/renderer/src/store/7-napi-atoms/5-do-screenshots/8-get-twl-infos.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/7-napi-atoms/6-do-highlight-control/1-do-highlight-control.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "chighlightnohwnd": "%chighlight.no.hwnd",
    "invparams": "inv.params"
  },
  "src/renderer/src/store/7-napi-atoms/6-do-highlight-control/2-get-highlight-params.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/7-napi-atoms/6-do-highlight-control/5-ui-find-and-highlight-click-atom.ts": {
    "openTargetWindowFirst": "Open target window first"
  },
  "src/renderer/src/store/7-napi-atoms/6-do-highlight-control/6-find-hwnd.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "noCaption": "no caption",
    "noClassname": "no classname"
  },
  "src/renderer/src/store/7-napi-atoms/6-do-highlight-window/0-use-saw-rect-monitor.tsx": {
    "sharedipctypes": "@shared/ipc-types",
    "sBetterToBlockSomewhere": "s better to block somewhere higher but here is ok as well\r\n            return;\r\n        }\r\n\r\n        let error: string | undefined;\r\n\r\n        if (action === ",
    "sethighlightisonatomTrueElseIfGethighlightisonatom": ") {\r\n            set(highlightIsOnAtom, true);\r\n        } else {\r\n            if (!get(highlightIsOnAtom)) {\r\n                return;\r\n            }\r\n            set(highlightIsOnAtom, false);\r\n        }\r\n\r\n        error = await invokeMainTyped({ type: ",
    "paramsErrorConsolelog": ", params });\r\n        error && console.log("
  },
  "src/renderer/src/store/7-napi-atoms/8-create-mani-tests-w-fetch/1-test-hwnds.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/7-napi-atoms/8-create-mani-tests-w-fetch/3-test-screens.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/7-napi-atoms/8-create-mani-tests-w-fetch/8-easy-delay-input.ts": {
    "delayWillBe10010000In": "delay will be 100...10000 in ms or 1..100 in sec."
  },
  "src/renderer/src/store/7-napi-atoms/9-napi-build-state/1-build-state-types.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/7-napi-atoms/9-napi-build-state/3-napi-lock.ts": {
    "thisname": "${this.name}"
  },
  "src/renderer/src/store/7-napi-atoms/9-napi-build-state/9-types-napi-error.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "builderrorincompatiblepm": ">>>build-error:::incompatiblePM",
    "atTheEndToDistinguish": "; // ::: at the end to distinguish from call with extra\r\n    }\r\n    if (params.extra) {\r\n        return ",
    "return": ";\r\n    }\r\n    return ",
    "exportTypeTypederrorTypedNapicallerror": ";\r\n}\r\n\r\nexport type TypedError = {\r\n    typed: NapiCallError;\r\n    extra: string | undefined;\r\n    sub?: BrowserExtErrors | ''; // error ruturned from ManifestForWindowCreatorResult as 'incompatiblePM' from '>>>build-error:::incompatiblePM'\r\n};\r\n\r\nexport function splitTypedError(errorStr: string): TypedError {\r\n    const typed = errorStr.split('>>>').at(-1) as NapiCallError;\r\n\r\n    if (!typed) {\r\n        return {\r\n            typed: 'unknown',\r\n            extra: errorStr,\r\n        };\r\n    }\r\n\r\n    const parts = typed.split(':::');\r\n    if (parts.length === 2) {\r\n        return {\r\n            typed: parts[0] as NapiCallError,\r\n            extra: parts[1],\r\n            sub: '',\r\n        };\r\n    } else {\r\n        return {\r\n            typed: parts[0] as NapiCallError,\r\n            extra: '',\r\n            sub: parts[1] as BrowserExtErrors,\r\n        };\r\n    }\r\n}\r\n\r\nexport function typedErrorToString(typedError: TypedError): string {\r\n    return "
  },
  "src/renderer/src/store/7-napi-atoms/a-do-get-general-info/0-all-general-info.ts": {
    "4101083": "4.1.0.1083",
    "altusAdWorkstation": "Altus AD Workstation",
    "passwordManager": "Password Manager",
    "copyright19962025HidGlobalCorporationassa": "Copyright � 1996-2025 HID Global Corporation/ASSA ABLOY AB",
    "curver2160128apiver2250613templatepathproductsproductaltusAdWorkstationversion4101083productpasswordManagerversion4101083copycopyright": "{\"curVer\": \"2160128\",\"apiVer\":\"2250613\",\"templatePath\":\"\",\"products\":[{\"product\":\"Altus AD Workstation\",\"version\":\"4.1.0.1083\"},{\"product\":\"Password Manager\",\"version\":\"4.1.0.1083\"}],\"copy\":\"Copyright � 1996-2025 HID Global Corporation/ASSA ABLOY AB\"}"
  },
  "src/renderer/src/store/7-napi-atoms/b-do-perform-command/0-all-perform-command.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "performcommanderror": "perform.command.error:"
  },
  "src/renderer/src/store/9-ui-state/0-local-storage-app/1-local-storage-app.ts": {
    "badStorageui": "bad storage:ui"
  },
  "src/renderer/src/store/9-ui-state/0-local-storage-debug/1-local-storage-debug.ts": {
    "badStoragedata": "bad storage:data"
  },
  "src/renderer/src/store/manifest/3-policy-io/1-policy/2-io/2-save.ts": {
    "functionPolicytostringextendedvPartialpolipolicyStringIf": ";\r\n}\r\n\r\nfunction policyToStringExtended(v: Partial<Poli.Policy>): string {\r\n    if (v.custom) {\r\n        let useAs = '';\r\n        switch (v.useAs) {\r\n            case Poli.UseAs.none: return '';\r\n            case Poli.UseAs.verify: useAs = \"[e1]v:\"; break;\r\n            case Poli.UseAs.generate: useAs = \"[e1]g:\"; break;\r\n        }\r\n        return "
  },
  "src/renderer/src/store/manifest/3-policy-io/1-policy/2-io/nun/1-load-for-parser.ts": {
    "preventTwoIdenticalConsecutiveCharacters": "Prevent two identical consecutive characters",
    "preventCharacterInSamePosition": "Prevent character in same position"
  },
  "src/renderer/src/store/manifest/3-policy-io/3-parser/2-parser.ts": {
    "0123456789": "0123456789",
    "_": "!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~",
    "unexpectedShorthand": "unexpected shorthand",
    "noMoreText": "no more text",
    "expectedNumber": "expected number",
    "invalidRange": "invalid range",
    "expectedDigit": "expected digit",
    "expected4HexDigits": "expected 4 hex digits",
    "unexpectedBefore": "unexpected '[' before ']'",
    "unexpectedEmptyCharset": "unexpected empty charset",
    "expectedLowerBoundaryCharBefore": "expected lower boundary char before '-'",
    "unexpectedDouble": "unexpected double '--'",
    "expectedSetNM": "expected set n <= m",
    "expected": "${expected}",
    "expectedLessThen1024Per": "expected less then 1024 per charset",
    "unexpectedChar": "unexpected char",
    "_212f3a405b607b7e": "()*+,-./:;<=>?@[\\\\]^_`{|}~\"; // 21-2F, 3A-40, 5B-60, 7B-7E\r\n\r\nfunction getShorthandChSet(shorthand: string, pos: number): string {\r\n    switch (shorthand) {\r\n        case ",
    "returnWshorthand_dCase": ": return WSHORTHAND_d;\r\n        case ",
    "returnWshorthand_aCase": ": return WSHORTHAND_A;\r\n        case ",
    "returnWshorthand_sDefaultThrowNew": ": return WSHORTHAND_s;\r\n        default: {\r\n            throw new ParseError(\"unexpected shorthand\", ParseErrorType.unexpShorthand, pos);\r\n        }\r\n    }\r\n}\r\n\r\ntype NextChar = { ch: string, hasChar: boolean; };\r\ntype NextNumber = { num: number, hasChar: boolean; };\r\n\r\nexport class PolicyParser {\r\n    sourceText: string = ",
    "sourceTextToParseRulesandmeta": ";    // Source text to parse.\r\n    rulesAndMeta: RulesAndMeta = new RulesAndMeta();\r\n    sourceTextPos: number = 0;  // Current parsing position starting from 0, but at error time it",
    "tEatIfItIs": "t eat if it is not an optional ",
    "get4HexidecimalDigitsLet": ".\r\n        }\r\n\r\n        // Get 4 hexidecimal digits.\r\n\r\n        let buffer = ",
    "letI0WhileI": ";\r\n        let i = 0;\r\n        while (i++ < 4) {\r\n            ch = this.getChar();\r\n\r\n            let gotDigit = isCharHexNumber(ch);\r\n            if (!gotDigit) {\r\n                throw new ParseError(\"expected digit\", ParseErrorType.expDigit, this.sourceTextPos);\r\n            }\r\n\r\n            buffer += ch;\r\n        }\r\n\r\n        // Convert number to character.\r\n\r\n        const number = parseInt(buffer, 16);\r\n\r\n        if (isNaN(number) || number > 0xFFFF || number < 0) {\r\n            throw new ParseError(\"expected 4 hex digits\", ParseErrorType.exp4Digits, this.sourceTextPos);\r\n        }\r\n\r\n        const rv = String.fromCharCode(number);\r\n        return rv;\r\n    }\r\n\r\n    private parse_charset(): string { // single character sets (don",
    "shouldBeEscapedIfCh": " should be escaped.\r\n                if (ch === ",
    "throwNewParseerrorunexpectedDouble": ") {\r\n                    throw new ParseError(\"unexpected double ",
    "parseerrortypeunexpdoublesetThissourcetextposThisungetcharIsrangeTrue": "\", ParseErrorType.unexpDoubleSet, this.sourceTextPos);\r\n                }\r\n\r\n                this.ungetChar();\r\n\r\n                isRange = true;\r\n            } else {\r\n                this.ungetChar();\r\n            }\r\n\r\n            let chCharset = this.getCharOfCharset();\r\n\r\n            if (isRange) {\r\n                let chFirst = rv_chSet[rv_chSet.length - 1]; // Cut the last char and use it as a first of range.\r\n                rv_chSet = rv_chSet.substring(0, rv_chSet.length - 1);\r\n\r\n                rv_chSet = generateCharRange(chFirst, chCharset, rv_chSet, this.sourceTextPos);\r\n                isRange = false;\r\n            } else {\r\n                rv_chSet += chCharset;\r\n            }\r\n\r\n        } //while\r\n\r\n        function generateCharRange(chFirst: string, chSecond: string, rv_chSet: string, pos: number): string {\r\n            // Generate (chFirst=a,chSecond=c as a-c -> abc), make sure that characters are unique in set, and sort.\r\n\r\n            if (chFirst > chSecond) {\r\n                throw new ParseError(\"expected set n <= m\", ParseErrorType.expCharALessB, pos);\r\n            }\r\n\r\n            while (chFirst <= chSecond) {\r\n                let isNew = rv_chSet.indexOf(chFirst) === -1;\r\n                if (isNew) {\r\n                    rv_chSet += chFirst;\r\n                }\r\n                chFirst = String.fromCharCode(chFirst.charCodeAt(0) + 1);\r\n            }\r\n\r\n            rv_chSet = rv_chSet.split(",
    "sortjoin": ").sort().join(",
    "ieAcbAbcForWchar_t": "); // i.e. \"acb\" -> \"abc\"\r\n\r\n            // for (wchar_t a = chFirst; a <= chSecond; a++)\r\n            // {\r\n            //     bool isNew = rv_charset_.find_first_of(a) === wstring_t::npos;\r\n            //     if (!isNew) {\r\n            //         continue;\r\n            //     }\r\n\r\n            //     rv_charset_ += a;\r\n            // }\r\n\r\n            //     std:: sort(rv_charset_.begin(), rv_charset_.end(), std:: less<wchar_t>()); // i.e. \"abc\"\r\n\r\n            return rv_chSet;\r\n        }\r\n    }\r\n\r\n    private parse_group(): Rule { // ",
    "rangeIsHandledOutsideLet": " // Range is handled outside.\r\n        let rv: Rule = new Rule();\r\n\r\n        let ch = this.getChar();\r\n        if (ch !== ",
    "throwNewParseerrorexpected": ") {\r\n            throw new ParseError(\"expected ",
    "parseerrortypeexpcharThissourcetextpos": "\", ParseErrorType.expChar, this.sourceTextPos, ",
    "thisIsJustInternalError": "); // This is just internal error and should be fixed in logic. //ungetChar(); // Eat only ",
    "rvgrouprulesThisparse_rulesChThisgetcharIf": "\r\n        }\r\n\r\n        rv.group.rules = this.parse_rules();\r\n\r\n        ch = this.getChar();\r\n        if (ch !== ",
    "expectedEndOfGroupConst": "); // Expected end of group.\r\n        }\r\n\r\n        const { ch: ch2, hasChar } = this.getCharIfExistWs();\r\n        if (hasChar) {\r\n            if (ch2 === ",
    "rvgroupmixFalseElseThisungetcharReturn": ") {\r\n                rv.group.mix = false;\r\n            }\r\n            else {\r\n                this.ungetChar();\r\n            }\r\n        }\r\n\r\n        return rv;\r\n    }\r\n\r\n    private parse_rule(): Rule { // single rule like: ",
    "letRvRuleNewRule": "\r\n        let rv: Rule = new Rule();\r\n\r\n        const { ch, hasChar } = this.getCharIfExistWs();\r\n        if (!hasChar) {\r\n            return rv;\r\n        }\r\n\r\n        switch (ch) {\r\n            case ",
    "groupThisungetcharRvThisparse_groupRvisgroup": ": { // group\r\n                this.ungetChar();\r\n                rv = this.parse_group();\r\n                rv.isGroup = true;\r\n                this.parse_range(rv.group);\r\n                break;\r\n            }\r\n            case ",
    "charsetThisungetcharRvchsetcharsThisparse_charsetRvisgroup": ": { // charset\r\n                this.ungetChar();\r\n                rv.chSet.chars = this.parse_charset();\r\n                rv.isGroup = false;\r\n                this.parse_range(rv.chSet);\r\n\r\n                if (rv.chSet.chars.length > 1024) {\r\n                    throw new ParseError(\"expected less then 1024 per charset\", ParseErrorType.moreThen1024, this.sourceTextPos); // Charsets can be splited into different sets and then grouped together.\r\n                }\r\n                break;\r\n            }\r\n            case ",
    "shorthandDCase": ": // shorthand d\r\n                case ",
    "shorthandACase": ": // shorthand A\r\n                case ",
    "shorthandSRvchsetcharsGetshorthandchsetchThissourcetextpos": ": { // shorthand s\r\n                rv.chSet.chars = getShorthandChSet(ch, this.sourceTextPos);\r\n                rv.isGroup = false;\r\n                this.parse_range(rv.chSet);\r\n                break;\r\n            }\r\n            default: {\r\n                throw new ParseError(\"unexpected char\", ParseErrorType.unexpChar, this.sourceTextPos, ch);\r\n            }\r\n        }\r\n\r\n        return rv;\r\n    }\r\n\r\n    private parse_rules(): Rule[] { // sequence of character sets like: a{1,2}A{1,1}[0-9]{1,1}\r\n        const rv: Rule[] = [];\r\n\r\n        while (true) {\r\n            const { ch, hasChar } = this.getCharNoThrow();\r\n            if (!hasChar) {\r\n                return rv;\r\n            }\r\n\r\n            switch (ch) {\r\n                case ",
    "groupCase": ": // group\r\n                case ",
    "charsetCase": ": // charset\r\n                case ",
    "shorthandSThisungetcharConstNewrule": ": { // shorthand s\r\n                    this.ungetChar();\r\n                    const newRule = this.parse_rule();\r\n                    rv.push(newRule);\r\n                    break;\r\n                }\r\n                default: {\r\n                    this.ungetChar();\r\n                    return rv;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private parse_start(): void {\r\n        while (true) {\r\n\r\n            const { ch, hasChar } = this.getCharIfExistWs();\r\n            if (!hasChar) {\r\n                return;\r\n            }\r\n\r\n            switch (ch) {\r\n                case ",
    "toAvoidTheSameCharacter": ": { // To avoid the same character in the same position from its previous value (recent one only).\r\n                    this.rulesAndMeta.noPrevPos = true;\r\n                    break;\r\n                }\r\n                case ",
    "shorthandSThisungetcharThisrulesandmetarulesThisparse_rules": ": { // shorthand s\r\n                    this.ungetChar();\r\n                    this.rulesAndMeta.rules = this.parse_rules();\r\n                    break;\r\n                }\r\n                case ",
    "finalPswLengthCanBe": ": { // final psw length can be at the begin or at the end of input string.\r\n                    this.ungetChar();\r\n                    const range: Range = this.parse_finalPswLength();\r\n                    this.rulesAndMeta.targetMin = range.min;\r\n                    this.rulesAndMeta.targetMax = range.max;\r\n                    break;\r\n                }\r\n                default: {\r\n                    throw new ParseError(`unexpected char ",
    "212f3a405b607b7eFunction": "{|}~\"; // 21-2F, 3A-40, 5B-60, 7B-7E\r\n\r\nfunction getShorthandChSet(shorthand: string, pos: number): string {\r\n    switch (shorthand) {\r\n        case 'd': return WSHORTHAND_d;\r\n        case 'a': return WSHORTHAND_a;\r\n        case 'A': return WSHORTHAND_A;\r\n        case 's': return WSHORTHAND_s;\r\n        default: {\r\n            throw new ParseError(\"unexpected shorthand\", ParseErrorType.unexpShorthand, pos);\r\n        }\r\n    }\r\n}\r\n\r\ntype NextChar = { ch: string, hasChar: boolean; };\r\ntype NextNumber = { num: number, hasChar: boolean; };\r\n\r\nexport class PolicyParser {\r\n    sourceText: string = '';    // Source text to parse.\r\n    rulesAndMeta: RulesAndMeta = new RulesAndMeta();\r\n    sourceTextPos: number = 0;  // Current parsing position starting from 0, but at error time it's +1 already.\r\n\r\n    public doParse({ custom, minTotal, maxTotal }: { custom: string; minTotal: number; maxTotal: number; }) {\r\n        this.sourceText = custom;\r\n        this.sourceTextPos = 0;\r\n        this.rulesAndMeta = new RulesAndMeta();\r\n\r\n        this.parse_start();\r\n\r\n        // Set conditionally minTotal and maxTotal from UI if not set by custom rule\r\n        this.rulesAndMeta.targetMin === -1 && (this.rulesAndMeta.targetMin = minTotal);\r\n        this.rulesAndMeta.targetMax === -1 && (this.rulesAndMeta.targetMax = maxTotal);\r\n    }\r\n\r\n    private skipWhitespace() {\r\n        while (this.sourceTextPos < this.sourceText.length) {\r\n            const { ch, hasChar } = this.getCharNoThrow();\r\n            if (!hasChar) {\r\n                return;\r\n            }\r\n\r\n            switch (ch) {\r\n                case ' ':\r\n                case '\\t':\r\n                    break;\r\n                default: {\r\n                    this.ungetChar();\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private hasChar(): boolean { // hasNextChar\r\n        const rv = this.sourceTextPos < this.sourceText.length;\r\n        return rv;\r\n    }\r\n\r\n    private ungetChar(): void {\r\n        if (this.sourceTextPos <= 0) {\r\n            console.error(\"impossible: no more unget\"); // This is just internal error and should be fixed in logic.\r\n            return;\r\n        }\r\n        this.sourceTextPos--;\r\n    }\r\n\r\n    private getChar(): string { // getNextChar\r\n        if (!this.hasChar()) {\r\n            throw new ParseError(\"no more text\", ParseErrorType.expMoreText, this.sourceTextPos);\r\n        }\r\n\r\n        const rv = this.sourceText[this.sourceTextPos];\r\n        this.sourceTextPos++;\r\n        return rv;\r\n    }\r\n\r\n    private getCharNoThrow(): NextChar { // Internal method to avoid recursion with skipWhitespace and getNumberIfExistWs.\r\n        if (!this.hasChar()) {\r\n            return { ch: '', hasChar: false };\r\n        }\r\n\r\n        const rv: NextChar = {\r\n            ch: this.sourceText[this.sourceTextPos++],\r\n            hasChar: true\r\n        };\r\n        return rv;\r\n    }\r\n\r\n    private getCharIfExistWs(): NextChar { // Skip whitespace and get next character.\r\n        this.skipWhitespace();\r\n\r\n        return this.getCharNoThrow();\r\n    }\r\n\r\n    private expectedCharWs(expected: string): void { // Skip whitespace and check next character.\r\n        this.skipWhitespace();\r\n\r\n        const { ch, hasChar } = this.getCharNoThrow();\r\n        if (!hasChar || ch !== expected) {\r\n            throw new ParseError(",
    "parseerrortypeexpcharThissourcetextposExpectedPrivateGetnumberifexistws": ", ParseErrorType.expChar, this.sourceTextPos, expected);\r\n        }\r\n    }\r\n\r\n    private getNumberIfExistWs(): NextNumber { // Skip whitespace and get number.\r\n        this.skipWhitespace();\r\n\r\n        let buffer = '';\r\n\r\n        while (true) {\r\n            const { ch, hasChar } = this.getCharNoThrow();\r\n            if (!hasChar) {\r\n                break;\r\n            }\r\n\r\n            let gotDigit = isCharNumber(ch);\r\n            if (!gotDigit) {\r\n                this.ungetChar();\r\n                break;\r\n            }\r\n\r\n            buffer += ch;\r\n        }\r\n\r\n        if (!buffer) {\r\n            return { num: -1, hasChar: false };\r\n        }\r\n\r\n        const rv: NextNumber = {\r\n            num: parseInt(buffer),\r\n            hasChar: true\r\n        };\r\n        return rv;\r\n    }\r\n\r\n    private getRangeEntryWs(OPEN_: string, CLOSE_: string): Range { // Get range if exist.\r\n        const rv: Range = { min: -1, max: -1 };\r\n\r\n        const { ch, hasChar } = this.getCharIfExistWs();\r\n        if (!hasChar) {\r\n            return rv;\r\n        }\r\n\r\n        if (ch !== OPEN_) {\r\n            this.ungetChar();\r\n            return rv;\r\n        }\r\n\r\n        const { num: min, hasChar: hasN } = this.getNumberIfExistWs();\r\n        rv.min = min;\r\n        if (!hasChar || isNaN(min)) {\r\n            throw new ParseError(\"expected number\", ParseErrorType.expNum, this.sourceTextPos);\r\n        }\r\n\r\n        this.skipWhitespace();\r\n        if (this.getChar() === CLOSE_) {\r\n            rv.max = rv.min; // Simplified version of length <2,2> as <2>.\r\n            return rv;\r\n        }\r\n        this.ungetChar();\r\n        this.expectedCharWs(',');\r\n\r\n        const { num: max, hasChar: hasM } = this.getNumberIfExistWs();\r\n        rv.max = max;\r\n        if (!hasM || isNaN(max)) {\r\n            rv.max = -2; //range.min;\r\n        }\r\n\r\n        this.expectedCharWs(CLOSE_);\r\n        if (hasM) {\r\n            if (rv.min > rv.max) {\r\n                throw new ParseError(\"invalid range\", ParseErrorType.invRange, this.sourceTextPos);\r\n            }\r\n        }\r\n        return rv;\r\n    }\r\n\r\n    private parse_finalPswLength(): Range { // Get final length of password: <2,2> or <2>.\r\n        const rv: Range = this.getRangeEntryWs('<', '>');\r\n\r\n        if (rv.max === -1) {\r\n            rv.max = rv.min;\r\n        }\r\n\r\n        return rv;\r\n    }\r\n\r\n    private parse_range(rv: ChSet | Group): void { // Allowed notation for ranges: {2,4} or {2,2} or {2} or {2,}\r\n        const minmax: Range = this.getRangeEntryWs('{', '}');\r\n        rv.min = minmax.min;\r\n        rv.max = minmax.max;\r\n    }\r\n\r\n    private getCharOfCharset(): string { // single character like: a b \\u1234 \\U1234 \\u+1234 \\U+1234 \\u-1234 \\U-1234\r\n        let ch = '';\r\n\r\n        ch = this.getChar();\r\n        if (ch !== '\\\\') {\r\n            return ch; // Not an escape then return as it is.\r\n        }\r\n\r\n        ch = this.getChar();\r\n        if (ch !== 'u' && ch !== 'U') {\r\n            return ch; // Not an unicode then return as it is.\r\n        }\r\n\r\n        ch = this.getChar();\r\n        if (ch !== '+' && ch !== '-') {\r\n            this.ungetChar(); // Don't eat if it is not an optional '+' or '-'.\r\n        }\r\n\r\n        // Get 4 hexidecimal digits.\r\n\r\n        let buffer = '';\r\n        let i = 0;\r\n        while (i++ < 4) {\r\n            ch = this.getChar();\r\n\r\n            let gotDigit = isCharHexNumber(ch);\r\n            if (!gotDigit) {\r\n                throw new ParseError(\"expected digit\", ParseErrorType.expDigit, this.sourceTextPos);\r\n            }\r\n\r\n            buffer += ch;\r\n        }\r\n\r\n        // Convert number to character.\r\n\r\n        const number = parseInt(buffer, 16);\r\n\r\n        if (isNaN(number) || number > 0xFFFF || number < 0) {\r\n            throw new ParseError(\"expected 4 hex digits\", ParseErrorType.exp4Digits, this.sourceTextPos);\r\n        }\r\n\r\n        const rv = String.fromCharCode(number);\r\n        return rv;\r\n    }\r\n\r\n    private parse_charset(): string { // single character sets (don't skip whitespace) like: [a-z02 A-M-ZZY02-1]\r\n        let rv_chSet = '';\r\n\r\n        let ch = this.getChar();\r\n\r\n        let isSquareBrStart = ch === '[';\r\n        if (ch !== '[') {\r\n            this.ungetChar(); // Eat only '['\r\n        }\r\n\r\n        while (true) {\r\n            ch = this.getChar();\r\n\r\n            if (ch === ']') { // Check if it is the end of character set and we started with '['.\r\n                if (!isSquareBrStart) {\r\n                    throw new ParseError(\"unexpected '[' before ']'\", ParseErrorType.unexpChSetClose, this.sourceTextPos); // expected charset beging before closing.\r\n                }\r\n\r\n                if (!rv_chSet) {\r\n                    throw new ParseError(\"unexpected empty charset\", ParseErrorType.chSetEmpty, this.sourceTextPos);\r\n                }\r\n\r\n                return rv_chSet;\r\n            }\r\n\r\n            let isRange = false;\r\n\r\n            if (ch === '-') { // If it is a range of characters then eat this character.\r\n                if (!rv_chSet) {\r\n                    throw new ParseError(\"expected lower boundary char before '-'\", ParseErrorType.expLowBoundCh, this.sourceTextPos);\r\n                }\r\n\r\n                ch = this.getChar(); // Check that we don't have '[--1]'. '-' should be escaped.\r\n                if (ch === '-') {\r\n                    throw new ParseError(\"unexpected double '--'\", ParseErrorType.unexpDoubleSet, this.sourceTextPos);\r\n                }\r\n\r\n                this.ungetChar();\r\n\r\n                isRange = true;\r\n            } else {\r\n                this.ungetChar();\r\n            }\r\n\r\n            let chCharset = this.getCharOfCharset();\r\n\r\n            if (isRange) {\r\n                let chFirst = rv_chSet[rv_chSet.length - 1]; // Cut the last char and use it as a first of range.\r\n                rv_chSet = rv_chSet.substring(0, rv_chSet.length - 1);\r\n\r\n                rv_chSet = generateCharRange(chFirst, chCharset, rv_chSet, this.sourceTextPos);\r\n                isRange = false;\r\n            } else {\r\n                rv_chSet += chCharset;\r\n            }\r\n\r\n        } //while\r\n\r\n        function generateCharRange(chFirst: string, chSecond: string, rv_chSet: string, pos: number): string {\r\n            // Generate (chFirst=a,chSecond=c as a-c -> abc), make sure that characters are unique in set, and sort.\r\n\r\n            if (chFirst > chSecond) {\r\n                throw new ParseError(\"expected set n <= m\", ParseErrorType.expCharALessB, pos);\r\n            }\r\n\r\n            while (chFirst <= chSecond) {\r\n                let isNew = rv_chSet.indexOf(chFirst) === -1;\r\n                if (isNew) {\r\n                    rv_chSet += chFirst;\r\n                }\r\n                chFirst = String.fromCharCode(chFirst.charCodeAt(0) + 1);\r\n            }\r\n\r\n            rv_chSet = rv_chSet.split('').sort().join(''); // i.e. \"acb\" -> \"abc\"\r\n\r\n            // for (wchar_t a = chFirst; a <= chSecond; a++)\r\n            // {\r\n            //     bool isNew = rv_charset_.find_first_of(a) === wstring_t::npos;\r\n            //     if (!isNew) {\r\n            //         continue;\r\n            //     }\r\n\r\n            //     rv_charset_ += a;\r\n            // }\r\n\r\n            //     std:: sort(rv_charset_.begin(), rv_charset_.end(), std:: less<wchar_t>()); // i.e. \"abc\"\r\n\r\n            return rv_chSet;\r\n        }\r\n    }\r\n\r\n    private parse_group(): Rule { // '(' Rules ')' '.' // Range is handled outside.\r\n        let rv: Rule = new Rule();\r\n\r\n        let ch = this.getChar();\r\n        if (ch !== '(') {\r\n            throw new ParseError(\"expected '('\", ParseErrorType.expChar, this.sourceTextPos, '('); // This is just internal error and should be fixed in logic. //ungetChar(); // Eat only '('\r\n        }\r\n\r\n        rv.group.rules = this.parse_rules();\r\n\r\n        ch = this.getChar();\r\n        if (ch !== ')') {\r\n            throw new ParseError(\"expected ')'\", ParseErrorType.expChar, this.sourceTextPos, ')'); // Expected end of group.\r\n        }\r\n\r\n        const { ch: ch2, hasChar } = this.getCharIfExistWs();\r\n        if (hasChar) {\r\n            if (ch2 === '.') {\r\n                rv.group.mix = false;\r\n            }\r\n            else {\r\n                this.ungetChar();\r\n            }\r\n        }\r\n\r\n        return rv;\r\n    }\r\n\r\n    private parse_rule(): Rule { // single rule like: 'a{1,2}' 'A{1,1}' '[0-9]{1,1}' '(a{1,2}).{1,2}'\r\n        let rv: Rule = new Rule();\r\n\r\n        const { ch, hasChar } = this.getCharIfExistWs();\r\n        if (!hasChar) {\r\n            return rv;\r\n        }\r\n\r\n        switch (ch) {\r\n            case '(': { // group\r\n                this.ungetChar();\r\n                rv = this.parse_group();\r\n                rv.isGroup = true;\r\n                this.parse_range(rv.group);\r\n                break;\r\n            }\r\n            case '[': { // charset\r\n                this.ungetChar();\r\n                rv.chSet.chars = this.parse_charset();\r\n                rv.isGroup = false;\r\n                this.parse_range(rv.chSet);\r\n\r\n                if (rv.chSet.chars.length > 1024) {\r\n                    throw new ParseError(\"expected less then 1024 per charset\", ParseErrorType.moreThen1024, this.sourceTextPos); // Charsets can be splited into different sets and then grouped together.\r\n                }\r\n                break;\r\n            }\r\n            case 'd': // shorthand d\r\n            case 'a': // shorthand a\r\n            case 'A': // shorthand A\r\n            case 's': { // shorthand s\r\n                rv.chSet.chars = getShorthandChSet(ch, this.sourceTextPos);\r\n                rv.isGroup = false;\r\n                this.parse_range(rv.chSet);\r\n                break;\r\n            }\r\n            default: {\r\n                throw new ParseError(\"unexpected char\", ParseErrorType.unexpChar, this.sourceTextPos, ch);\r\n            }\r\n        }\r\n\r\n        return rv;\r\n    }\r\n\r\n    private parse_rules(): Rule[] { // sequence of character sets like: a{1,2}A{1,1}[0-9]{1,1}\r\n        const rv: Rule[] = [];\r\n\r\n        while (true) {\r\n            const { ch, hasChar } = this.getCharNoThrow();\r\n            if (!hasChar) {\r\n                return rv;\r\n            }\r\n\r\n            switch (ch) {\r\n                case '(': // group\r\n                case '[': // charset\r\n                case 'd': // shorthand d\r\n                case 'a': // shorthand a\r\n                case 'A': // shorthand A\r\n                case 's': { // shorthand s\r\n                    this.ungetChar();\r\n                    const newRule = this.parse_rule();\r\n                    rv.push(newRule);\r\n                    break;\r\n                }\r\n                default: {\r\n                    this.ungetChar();\r\n                    return rv;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private parse_start(): void {\r\n        while (true) {\r\n\r\n            const { ch, hasChar } = this.getCharIfExistWs();\r\n            if (!hasChar) {\r\n                return;\r\n            }\r\n\r\n            switch (ch) {\r\n                case '~': { // To avoid the same character be used consecutively (global),\r\n                    this.rulesAndMeta.noRepeat = true;\r\n                    break;\r\n                }\r\n                case '&': { // To avoid the same character in the same position from its previous value (recent one only).\r\n                    this.rulesAndMeta.noPrevPos = true;\r\n                    break;\r\n                }\r\n                case '(': // group\r\n                case '[': // charset\r\n                case 'd': // shorthand d\r\n                case 'a': // shorthand a\r\n                case 'A': // shorthand A\r\n                case 's': { // shorthand s\r\n                    this.ungetChar();\r\n                    this.rulesAndMeta.rules = this.parse_rules();\r\n                    break;\r\n                }\r\n                case '<': { // final psw length can be at the begin or at the end of input string.\r\n                    this.ungetChar();\r\n                    const range: Range = this.parse_finalPswLength();\r\n                    this.rulesAndMeta.targetMin = range.min;\r\n                    this.rulesAndMeta.targetMax = range.max;\r\n                    break;\r\n                }\r\n                default: {\r\n                    throw new ParseError("
  },
  "src/renderer/src/store/manifest/3-policy-io/3-parser/3-parser-call.ts": {
    "ifRverrortypeParseerrortypenoneRvrulesandmetaParserrulesandmeta": ");\r\n    }\r\n\r\n    if (rv.error.type === ParseErrorType.none) {\r\n        rv.rulesAndMeta = parser.rulesAndMeta;\r\n    } else {\r\n        rv.rulesAndMeta.rules = [];\r\n    }\r\n\r\n    return rv;\r\n}\r\n\r\nexport function parseExtPolicy2RulesSet(policy: Poli.Policy): ParseAdvPolicyResult {\r\n    const patternWithMinMaxRange = "
  },
  "src/renderer/src/store/manifest/3-policy-io/3-parser/4-parser-error.ts": {
    "unexpectedShorthand": "unexpected shorthand",
    "unexpectedChar": "unexpected char",
    "expectedCharacterInSetAs": "expected character in set as a <= b",
    "noMoreText": "no more text",
    "expectedNumber": "expected number",
    "invalidRange": "invalid range",
    "expectedDigit": "expected digit",
    "expected4HexDigits": "expected 4 hex digits",
    "unexpectedBefore": "unexpected '[' before ']'",
    "unexpectedEmptyCharset": "unexpected empty charset",
    "expectedLowerBoundaryCharBefore": "expected lower boundary char before '-'",
    "unexpectedDouble": "unexpected double '--'",
    "expectedLessThen1024Per": "expected less then 1024 per charset",
    "eInstanceofErrorEmessage": "\r\n            : e instanceof Error\r\n                ? e.message\r\n                : "
  },
  "src/renderer/src/store/manifest/3-policy-io/3-verify-generate/1-verify/3-operation-verify.ts": {
    "invpollength": "inv.pol.length",
    "passwordWithDuplicateChars": "Password with duplicate chars.",
    "utilssetset_alphanumeric": "utils.setSET_AlphaNumeric",
    "noLetterInThePassword": "no letter in the password",
    "noNumberInThePassword": "no number in the password",
    "passwordWithAdjacentDigits": "Password with adjacent digits.",
    "noSpecCharacterInThe": "no spec character in the password",
    "noDigitInThePassword": "no digit in the password",
    "invpolmix": "Inv.pol.mix ="
  },
  "src/renderer/src/store/manifest/3-policy-io/3-verify-generate/3-explanation/0-all.ts": {
    "eachPasswordCharacterMustOnly": "Each password character must only be used one time."
  },
  "src/renderer/src/store/manifest/3-policy-io/3-verify-generate/3-explanation/3-custom-rule-explanation.ts": {
    "mustContainCharactersInAny": "Must contain characters in any sequence:\\n",
    "mustContainCharactersInThe": "Must contain characters in the sequence:\\n",
    "_": "[!@#$%^&*()_+=]",
    "mustContainAnyCharacter": "Must contain any character.",
    "letRvIfMin1": ";\r\n\r\n            let rv = '';\r\n\r\n            if (min === -1 && max === -1) {\r\n                rv = stringsPolicy.chSet(chars); //ai:'Must contain any character.';\r\n            } else if (max > 0 && min > 0) {\r\n                if (max === min) {\r\n                    if (max === 1) {\r\n                        rv = stringsPolicy.chSet(chars); //ai:'Must contain any character.';\r\n                    } else {\r\n                        rv = stringsPolicy.chSetMax(max, chars); //ai:",
    "elseRvStringspolicychsetminmaxminMaxChars": ";\r\n                    }\r\n                } else {\r\n                    rv = stringsPolicy.chSetMinMax(min, max, chars); //ai:",
    "elseIfMin0Rv": ";\r\n                }\r\n            } else if (min > 0) {\r\n                rv = stringsPolicy.chSetMin(min, chars); //ai:"
  },
  "src/renderer/src/store/manifest/3-policy-io/3-verify-generate/3-explanation/9-strings.ts": {
    "passwordLengthMustBeBetween": "   Password length must be between %d and %d characters.\\n",
    "passwordMustContainACharacter": "   Password must contain a character from %s.\\n",
    "passwordMustContainAtLeast": "   Password must contain at least %d character(s) and not more than  %d character(s) from %s.\\n",
    "passwordMustContainOnlyD": "   Password must contain only %d character(s) from %s.\\n",
    "passwordMustContainRepeatedOccurrence": "   Password must contain repeated occurrence of:\\n",
    "eachPasswordCharacterMustOnly": "   Each password character must only be used one time",
    "youMustEnterTheSame": "You must enter the same password in both new password fields.",
    "enterPassword": "Enter Password",
    "currentAndNewPasswordFields": "Current and new password fields have same values.",
    "npasswordPolicySettingsAreAs": "\\nPassword policy settings are as follows:\\n",
    "lengthMustBeBetweenD": "Length must be between %d and %d characters.\\n",
    "mustContainACharacterFrom": "Must contain a character from the set [%s].\\n",
    "mustContainAtleastDCharacters": "Must contain atleast %d character(s) from the set: %s.\\n",
    "mustContainOnlyDCharacters": "Must contain only %d character(s) from the set [%s].\\n",
    "mustContainAtleastDAnd": "Must contain atleast %d and atmost %d character(s) from the set: %s.\\n",
    "mustContainRepeatedOccuranceOfn": "Must contain repeated occurance of:\\n",
    "repeatedOccurrenceOf": "   repeated occurrence of:",
    "lettersAndNumbers": "Letters and numbers",
    "numbersOnly": "Numbers only",
    "lettersOnly": "Letters only",
    "lettersOrNumbersWithSpecial": "Letters or numbers with special characters",
    "lettersOrNumbersWithAt": "Letters or numbers with at least one number",
    "differentThanTheWindowsPassword": "Different than the Windows password",
    "differentFromWindowsPassword": "Different from Windows password",
    "uniqueWithinPasswordManagerLogons": "Unique within Password Manager logons",
    "differentThanTheCurrentPassword": "Different than the current password",
    "invalidValue": "Invalid value",
    "invalidRange": "Invalid range",
    "uniqueWithinPasswordManagerManaged": "Unique within Password Manager managed logons",
    "passwordStrengthS": "Password strength: %s",
    "exportConstStringspolicyChsetlenMin": ";\r\n\r\nexport const stringsPolicy = {\r\n    chSetLen: (min: number, max: number)             /**/ => ",
    "chsetSString": ",\r\n    chSet: (s: string)                               /**/ => ",
    "chsetminDNumberSString": ",\r\n    chSetMin: (d: number, s: string)                 /**/ => ",
    "chsetmaxDNumberSString": ",\r\n    chSetMax: (d: number, s: string)                 /**/ => ",
    "chsetminmaxD1NumberD2Number": ",\r\n    chSetMinMax: (d1: number, d2: number, s: string) /**/ => "
  },
  "src/renderer/src/store/manifest/3-policy-io/3-verify-generate/4-low-level/1-generate/4-generate-by-rule.ts": {
    "nochsetextra1": "no.chSetExtra.1"
  },
  "src/renderer/src/store/manifest/3-policy-io/3-verify-generate/9-gen-utils/1-char-sets.ts": {
    "0123456789": "0123456789",
    "_": "!\\\"#$%&'()*+,-./:;<=>?[\\\\]^_`{|}~@"
  },
  "src/renderer/src/store/manifest/3-policy-io/3-verify-generate/9-gen-utils/2-random-values.ts": {
    "weCannotGenerateNumbersLarger": "We cannot generate numbers larger than 53 bits.",
    "invrbounds": "inv.r.bounds"
  },
  "src/renderer/src/store/manifest/3-policy-io/3-verify-generate/9-gen-utils/3-gen-part-by-chars.ts": {
    "invarglength": "inv.arg.length",
    "emptycombset": "empty.comb.set"
  },
  "src/renderer/src/store/manifest/manifest-field-icons.tsx": {
    "sharedipctypes": "@shared/ipc-types",
    "radioButton": "radio button",
    "noChoices": "No choices",
    "key_ofrtwsw": "\r\n            : "
  },
  "src/renderer/src/store/store-types/0-file-us-type.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "sASimpleCheckTo": "s a simple check to see if the path is in front of the filename.\r\n    subFolder?: string;                                 //TODO: This is not really needed // This is now the full path available from the browser, i.e. not a subfolder.\r\n\r\n    dateCreated?: string;                               // TimeUtils.dpTimeToShow(fileUs.mani?.descriptor?.created)\r\n    dateModified?: string;                              // TimeUtils.dpTimeToShow(fileUs.mani?.descriptor?.modified)\r\n};\r\n\r\nexport type FileUsUiState = {\r\n    isGroupAtom: PA<boolean>;                           // this fileUs selected for bulk group operation\r\n    isCurrentAtom: PA<boolean>;                         // this fileUs is current and shown in the right panel\r\n};\r\n\r\nexport type ParsedSrc = {\r\n    mani: Mani.Manifest | undefined;                    // for manifest raw json\r\n    meta: Meta.Form[] | undefined;                      // for manifest file parsed content and meta forms\r\n    fcat: CatalogFile.Root | undefined;                 // for field catalog file parsed content\r\n    stats: FileUsStats;                                 // quick access statistics\r\n};\r\n\r\nexport type FileUs = {\r\n    fileCnt: FileContent;                               // file content\r\n    parsedSrc: ParsedSrc;                               // parsed content from the file\r\n    uiState: FileUsUiState;                             // local state atoms: is currnet; is selected\r\n\r\n    maniAtomsAtom: ManiAtomsAtom;                       // mani editor ui atoms; created when file selected at top level\r\n\r\n    fceAtomsForFcFile: FceAtoms | undefined;            // for Fc file: Fce atoms or null for manifest files\r\n    fceAtomsRefForMani: FceAtoms | undefined;           // for manifest: reference to FceAtoms of the root FC or null if from unmanaged folder (i.e. not root and not A/B/C subfolder) (Maybe later: of correcponding FC if applicable for sub-folder (now only main))\r\n\r\n    mainForCpassAtom: FileUsAtom | undefined;           // Defined when creating password change form\r\n    rawCpassAtom: PA<string | undefined>;               // Raw xml of 2 forms after password change created but before save (exists only before cpass saved)\r\n\r\n    hwndLoginAtom: PA<HighlightHwnd>;                   // Windows window handle to highlight window field. Available when file is created before save, but can be acquired later. When manifest created it has type GetTargetWindowResult (i.e. with process and isBrowser).\r\n    hwndCpassAtom: PA<HighlightHwnd>;                   // Login and Cpass can have different hwnd when created at the same time (or even multiple files created at the same time).\r\n\r\n    //maniInUseAtom: PA<boolean>;                       // Is manifest file in use for production; from pmac: sub-folders: A(InUse), B(NotInUse), and C(NotInUseTest).\r\n    maniInTestAtom: PA<boolean>;                        // Is manifest file in test mode; we don"
  },
  "src/renderer/src/store/store-types/4-file-list-sort-by.ts": {
    "fileIndex": "File index",
    "websiteDomain": "Website domain"
  },
  "src/renderer/src/store/store-utils/1-file-system-utils/1-new-file-content.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/store/store-utils/1-file-system-utils/8-dispose-file-us.ts": {
    "tCleanUpFileHandles": "t clean up file handles\r\n    }\r\n}\r\n\r\nexport function disposeFceCtx(fceCtx: FceCtx | undefined | null) {\r\n    discardValues(fceCtx);\r\n}\r\n\r\nfunction printDisposeFileUsAtom(fileUsAtom: FileUsAtom | undefined, { get }: GetOnly) {\r\n    const fileUs = fileUsAtom ? get(fileUsAtom) : undefined;\r\n    const fileUsStr = fileUsAtom ? fileUsAtom.toString() : ",
    "constManistrFileusmaniatomsatomFileusmaniatomsatomtostring": ";\r\n    const maniStr = fileUs?.maniAtomsAtom ? fileUs.maniAtomsAtom.toString() : ",
    "consolegroupcollapsedcDisposeFileusatomcfileusstrCmaniatomsatomcmanistrFileusatom": ";\r\n\r\n    console.groupCollapsed(`%c🏀🏀🏀 dispose fileUsAtom:%c${fileUsStr}, %cmaniAtomsAtom:%c${maniStr}`,\r\n        fileUsAtom ? ",
    "key_0xap6g3": ",\r\n        ",
    "fileusConsoletraceConsolegroupendExportFunction": ",\r\n        { fileUs }\r\n    );\r\n    console.trace();\r\n    console.groupEnd();\r\n}\r\n\r\nexport function printDisposeManiAtomsAtom(maniAtomsAtom: ManiAtomsAtom | undefined) {\r\n    const atomStr = maniAtomsAtom ? maniAtomsAtom.toString() : ",
    "consolegroupcollapsedCDisposeManiatomsatomcAtomstrc": ";\r\n    console.groupCollapsed(\r\n        `%c🏀 dispose maniAtomsAtom:%c ${atomStr}%c`,\r\n        ",
    "fileusatomFontweightNormalColorGray": ",\r\n        fileUsAtom ? 'font-weight: normal; color: gray' : 'font-weight: normal; color: red',\r\n        'font-weight: normal; color: magenta',\r\n        'font-weight: normal; color: gray',\r\n        'font-weight: normal; color: darkmagenta',\r\n        { fileUs }\r\n    );\r\n    console.trace();\r\n    console.groupEnd();\r\n}\r\n\r\nexport function printDisposeManiAtomsAtom(maniAtomsAtom: ManiAtomsAtom | undefined) {\r\n    const atomStr = maniAtomsAtom ? maniAtomsAtom.toString() : 'null';\r\n    console.groupCollapsed(\r\n        "
  },
  "src/renderer/src/store/store-utils/2-ui-utils/6-form-utils.ts": {
    "passwordChange": "Password change",
    "fieldCatalog": "FIELD CATALOG",
    "windowsApplication": "WINDOWS APPLICATION"
  },
  "src/renderer/src/store/store-utils/2-ui-utils/7-file-us-to-app-type.tsx": {
    "tHaveANiceIcon": "t have a nice icon for them, but now it"
  },
  "src/renderer/src/store/store-utils/2-ui-utils/8-form-type-to-icon.tsx": {
    "textred500Fillred50Darkfillred900Opacity75": "text-red-500 fill-red-50 dark:fill-red-900 opacity-75",
    "textred500Fillred50Darkfillred900Opacity75Dotcentercolorff1b1b": "text-red-500 fill-red-50 dark:fill-red-900 opacity-75 [--dot-center-color:#ff1b1b]",
    "absoluteTop2Left2Size25Fillmuted": "absolute top-2 left-2 !size-2.5 !fill-muted",
    "textmutedforegroundSize35Stroke1": "text-muted-foreground size-3.5 stroke-1"
  },
  "src/renderer/src/ui/icons/normal/00-theme-mode.tsx": {
    "fillnoneStroke15Strokecurrent": "fill-none stroke-[1.5] stroke-current",
    "m123v225m6364386l15911591m2112h225m3866364l15911591m12": "M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z",
    "m128a28328300": "M12 8a2.83 2.83 0 0 0 4 4 4 4 0 1 1-4-4",
    "m49491414": "m4.9 4.9 1.4 1.4",
    "m1771771414": "m17.7 17.7 1.4 1.4",
    "m631771414": "m6.3 17.7-1.4 1.4",
    "m191491414": "m19.1 4.9-1.4 1.4"
  },
  "src/renderer/src/ui/icons/normal/06-chevron-left-single-rotatable.tsx": {
    "m157519582512l7575": "M15.75 19.5 8.25 12l7.5-7.5"
  },
  "src/renderer/src/ui/icons/normal/11-copy.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m15751725v3375c0621504112511251125h975a1125": "M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75"
  },
  "src/renderer/src/ui/icons/normal/12-play.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m5255653c085691713981667986l11546348a11251125": "M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.348a1.125 1.125 0 010 1.971l-11.54 6.347a1.125 1.125 0 01-1.667-.985V5.653z"
  },
  "src/renderer/src/ui/icons/normal/13-stop.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m52575a22522500175": "M5.25 7.5A2.25 2.25 0 017.5 5.25h9a2.25 2.25 0 012.25 2.25v9a2.25 2.25 0 01-2.25 2.25h-9a2.25 2.25 0 01-2.25-2.25v-9z"
  },
  "src/renderer/src/ui/icons/normal/21-rocket.tsx": {
    "00512512": "0 0 512 512",
    "m2564216c18103326842910954231131810976l35": "M256 421.6c-18.1 0-33.2-6.8-42.9-10.9-5.4-2.3-11.3 1.8-10.9 7.6l3.5 51c.2 3.1 3.8 4.7 6.3 2.8l14.5-11c1.8-1.4 4.5-.9 5.7 1l20.5 32.1c1.5 2.4 5.1 2.4 6.6 0l20.5-32.1c1.2-1.9 3.9-2.4 5.7-1l14.5 11c2.5 1.9 6.1.3 6.3-2.8l3.5-51c.4-5.8-5.5-10-10.9-7.6-9.8 4.1-24.8 10.9-42.9 10.9z",
    "m39772931l48491c0158932228932228s94170941228l48491c18": "M397.7 293.1l-48-49.1c0-158-93.2-228-93.2-228s-94.1 70-94.1 228l-48 49.1c-1.8 1.8-2.6 4.5-2.2 7.1L130.6 412c.9 5.7 7.1 8.5 11.8 5.4l67.1-45.4s20.7 20 47.1 20c26.4 0 46.1-20 46.1-20l67.1 45.4c4.6 3.1 10.8.3 11.8-5.4l18.5-111.9c.2-2.6-.6-5.2-2.4-7zM256.5 192c-17 0-30.7-14.3-30.7-32s13.8-32 30.7-32c17 0 30.7 14.3 30.7 32s-13.7 32-30.7 32z"
  },
  "src/renderer/src/ui/icons/normal/22-filter.tsx": {
    "stroke15StrokecurrentFillnone": "stroke-[1.5] stroke-current fill-none",
    "m123c275505455232808367853309917556917": "M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 0 1-.659 1.591l-5.432 5.432a2.25 2.25 0 0 0-.659 1.591v2.927a2.25 2.25 0 0 1-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 0 0-.659-1.591L3.659 7.409A2.25 2.25 0 0 1 3 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0 1 12 3Z"
  },
  "src/renderer/src/ui/icons/normal/22-search.tsx": {
    "m21712029l181661a990": "M21.71 20.29L18 16.61A9 9 0 1 0 16.61 18l3.68 3.68a1 1 0 0 0 1.42 0a1 1 0 0 0 0-1.39zM11 18a7 7 0 1 1 7-7a7 7 0 0 1-7 7z"
  },
  "src/renderer/src/ui/icons/normal/24-refresh.tsx": {
    "00300300": "0 0 300 300",
    "m67542527h104v0h8645l133133v8645h7552v5054q409475812964": "M67.54 25.27H1.04V0h86.45l13.3 13.3v86.45H75.52V50.54Q40.94 75.81 29.64 117.7q-11.3 41.89 5.98 81.8 17.29 39.9 55.2 60.51 37.91 20.62 80.47 13.3 42.56-7.31 71.16-39.24 28.59-31.92 31.92-75.14 3.32-43.23-20.62-78.47-23.94-35.25-65.17-48.55l6.65-23.94q33.25 10.64 57.85 33.92 24.61 23.27 36.57 55.2 11.97 31.92 9.31 65.84-2.66 33.91-19.95 63.18-17.29 29.26-45.88 48.54-28.59 19.29-62.51 23.94-33.92 4.65-66.5-5.99t-57.19-33.92q-24.6-23.28-36.57-55.19-11.97-31.92-9.31-65.84T21 74.47q17.29-29.26 46.55-49.21Z"
  },
  "src/renderer/src/ui/icons/normal/25-sliders.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m1056h975m1056a15150": "M10.5 6h9.75M10.5 6a1.5 1.5 0 1 1-3 0m3 0a1.5 1.5 0 1 0-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-9.75 0h9.75"
  },
  "src/renderer/src/ui/icons/normal/26-broken-img.tsx": {
    "00256256": "0 0 256 256",
    "m21644h40a12120002856v200a12120001212h64a44000379274l12321163l38281531a44000222222l17910721l46241542a4400022888v56a121200021644zm1185115629a4400023245l10112204h40a4400144v17034l53175317a440015660l34713471zm2208512l45261509a4400024523l1537384119377337133714a1212000170l36159v56a4400144h216a4400144zm6343337a440003655l2381793a44000244231l153736373615a44000231244l7932381a44000553644000324166h216a12120001212v12173a440002263411849zm220200a4400144h14328l559167837231489a44000223223l14893723l22012728z": "M216,44H40A12,12,0,0,0,28,56V200a12,12,0,0,0,12,12h64a4,4,0,0,0,3.79-2.74L123.21,163l38.28-15.31a4,4,0,0,0,2.22-2.22L179,107.21l46.24-15.42A4,4,0,0,0,228,88V56A12,12,0,0,0,216,44ZM118.51,156.29a4,4,0,0,0-2.3,2.45L101.12,204H40a4,4,0,0,1-4-4V170.34l53.17-53.17a4,4,0,0,1,5.66,0l34.71,34.71ZM220,85.12l-45.26,15.09a4,4,0,0,0-2.45,2.3l-15.37,38.41-19.3,7.73-37.13-37.14a12,12,0,0,0-17,0L36,159V56a4,4,0,0,1,4-4H216a4,4,0,0,1,4,4Zm6.34,33.37a4,4,0,0,0-3.6-.55l-23.81,7.93a4,4,0,0,0-2.44,2.31l-15,37.36-37.36,15a4,4,0,0,0-2.31,2.44l-7.93,23.81a4,4,0,0,0,.55,3.6,4,4,0,0,0,3.24,1.66H216a12,12,0,0,0,12-12V121.73A4,4,0,0,0,226.34,118.49ZM220,200a4,4,0,0,1-4,4H143.28l5.59-16.78,37.23-14.89a4,4,0,0,0,2.23-2.23l14.89-37.23L220,127.28Z",
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-1.5",
    "m00h24v24h0z": "M0 0h24v24H0z",
    "m1441728646646a424200": "m1.44 17.28 6.46-6.46a.42.42 0 0 1 .6 0s4.1 4.4 4.1 4.4",
    "m2256803522175162404a42420": "m22.56 8.03-5.22 1.75-1.62 4.04a.42.42 0 0 1-.23.24l-2.9 1.16-1.15.46-1.72 5.16",
    "m1223208396336388156a292900": "m12.23 20.83.96-3.36 3.88-1.56a.29.29 0 0 0 .17-.17l1.66-4.14 3.65-1.38",
    "m2256435v368l522175162404a42420": "M22.56 4.35v3.68l-5.22 1.75-1.62 4.04a.42.42 0 0 1-.23.24l-2.9 1.16-1.15.46-1.72 5.16H2.67c-.65 0-1.18-.53-1.18-1.18V4.35c0-.65.53-1.18 1.18-1.18h18.71c.65 0 1.18.53 1.18 1.18Z",
    "m18911158365138v944c06553118118": "m18.91 11.58 3.65-1.38v9.44c0 .65-.53 1.18-1.18 1.18h-9.15l.96-3.36 3.88-1.56a.29.29 0 0 0 .17-.17l1.66-4.14Z"
  },
  "src/renderer/src/ui/icons/normal/27-dnd-target.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-1.5",
    "m00h24v24h0z": "M0 0h24v24H0z",
    "m25812c052422942942942s214268": "M2.58 12c0-5.2 4.22-9.42 9.42-9.42S21.42 6.8 21.42 12 17.2 21.42 12 21.42 2.58 17.2 2.58 12",
    "m32712c0482391873873873s873391": "M3.27 12c0-4.82 3.91-8.73 8.73-8.73s8.73 3.91 8.73 8.73-3.91 8.73-8.73 8.73S3.27 16.82 3.27 12",
    "m53712c0366297663663663s663297": "M5.37 12c0-3.66 2.97-6.63 6.63-6.63s6.63 2.97 6.63 6.63-2.97 6.63-6.63 6.63S5.37 15.66 5.37 12",
    "m58612c0339275614614614s614275": "M5.86 12c0-3.39 2.75-6.14 6.14-6.14s6.14 2.75 6.14 6.14-2.75 6.14-6.14 6.14S5.86 15.39 5.86 12",
    "m9712h641m1297v641m230312h641m122303v641m971": "M.97 12h6.41M12 .97v6.41M23.03 12h-6.41M12 23.03v-6.41M9.71 12h4.58M12 9.71v4.58",
    "strokemiterlimit10FillnoneStrokewhiteOpacity50": "[stroke-miterlimit:10] fill-none stroke-white opacity-50",
    "strokemiterlimit10FillnoneStrokeblack": "[stroke-miterlimit:10] fill-none stroke-black",
    "strokemiterlimit10FillnoneStrokered500StrokelinecaproundStrokelinejoinround": "[stroke-miterlimit:10] fill-none stroke-red-500 [stroke-linecap:round] [stroke-linejoin:round]",
    "stroke9px": "stroke-[.9px]",
    "pathDm32712c0482391873873873s873": "}/>\r\n            <path d=\"M3.27 12c0-4.82 3.91-8.73 8.73-8.73s8.73 3.91 8.73 8.73-3.91 8.73-8.73 8.73S3.27 16.82 3.27 12\" className={",
    "pathDm53712c0366297663663663s663": "}/>\r\n            <path d=\"M5.37 12c0-3.66 2.97-6.63 6.63-6.63s6.63 2.97 6.63 6.63-2.97 6.63-6.63 6.63S5.37 15.66 5.37 12\" className={",
    "pathDm58612c0339275614614614s614": "}/>\r\n            <path d=\"M5.86 12c0-3.39 2.75-6.14 6.14-6.14s6.14 2.75 6.14 6.14-2.75 6.14-6.14 6.14S5.86 15.39 5.86 12\" className={",
    "pathDm9712h641m1297v641m230312h641m12": "}/>\r\n            <path d=\"M.97 12h6.41M12 .97v6.41M23.03 12h-6.41M12 23.03v-6.41M9.71 12h4.58M12 9.71v4.58\" className={"
  },
  "src/renderer/src/ui/icons/normal/27-microscope.tsx": {
    "stroke10StrokecurrentFillnone": "stroke-[10] stroke-current fill-none",
    "00139139": "0 0 139 139",
    "m3418h26v53h34zm349h26m3171h32m479v9m38": "M34 18h26v53H34zM34 9h26M31 71h32M47 9v9M38 72h19v11H38zM60 49c32 0 35 10 35 37",
    "m36110h23": "M36 110h23"
  },
  "src/renderer/src/ui/icons/normal/27-not-in-use.tsx": {
    "m118714157575711871": "M11.87 14.15.75 7.57 11.87 1 23 7.57z",
    "m237571113658l75757v91l1112658l23": "m23 7.57-11.13 6.58L.75 7.57v9.1l11.12 6.58L23 16.68z",
    "m751668233138m18106": "m.75 16.68 2.33 1.38m1.8 1.06 7 4.13L23 16.68M.75 13.64l4.24 2.51",
    "m67917215083l231365m75": "m6.79 17.21 5.08 3L23 13.65M.75 10.61l6.15 3.63",
    "m87153317188l231061m106": "m8.7 15.3 3.17 1.88L23 10.61M10.6 13.4l1.27.75L23 7.57 11.87 1 .75 7.57l8.05 4.77M.75 23.25 23.25.75"
  },
  "src/renderer/src/ui/icons/normal/27-stop-circle.tsx": {
    "stroke15Strokered500Fillnone": "stroke-[1.5] stroke-red-500 fill-none",
    "m1836418364a9900": "M18.364 18.364A9 9 0 0 0 5.636 5.636m12.728 12.728A9 9 0 0 1 5.636 5.636m12.728 12.728L5.636 5.636"
  },
  "src/renderer/src/ui/icons/normal/editor-manual-fields/1-delay-fill-nun.tsx": {
    "m1222q187503513713t2851924q121212131924285t313q018757133513t1924285q121312122851924t12": "M12 22q-1.875 0-3.513-.713t-2.85-1.924q-1.212-1.213-1.924-2.85T3 13q0-1.875.713-3.513t1.924-2.85q1.213-1.212 2.85-1.924T12 4q1.875 0 3.513.713t2.85 1.925q1.212 1.212 1.925 2.85T21 13q0 1.875-.713 3.513t-1.924 2.85q-1.213 1.212-2.85 1.925T12 22Zm0-9Zm2.8 4.2l1.4-1.4l-3.2-3.2V8h-2v5.4l3.8 3.8ZM5.6 2.35L7 3.75L2.75 8l-1.4-1.4L5.6 2.35Zm12.8 0l4.25 4.25l-1.4 1.4L17 3.75l1.4-1.4ZM12 20q2.925 0 4.963-2.038T19 13q0-2.925-2.038-4.963T12 6Q9.075 6 7.037 8.038T5 13q0 2.925 2.038 4.963T12 20Z"
  },
  "src/renderer/src/ui/icons/normal/editor-manual-fields/1-delay.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m12137v532m596765h45": "M12.13 7V5.32m-5.96 7.65H4.5",
    "m19771296c021275393223542148": "M19.77 12.96c0 2.12-.75 3.93-2.23 5.42-1.48 1.48-3.28 2.22-5.42 2.22s-3.93-.74-5.42-2.22c-1.48-1.48-2.22-3.29-2.22-5.42s.74-3.93 2.22-5.42c1.48-1.48 3.29-2.23 5.42-2.23s3.93.75 5.42 2.23a7.37 7.37 0 0 1 2.23 5.42Z",
    "m6171296h449": "M6.17 12.96H4.49",
    "m12137v532": "M12.13 7V5.32",
    "m19771296h168": "M19.77 12.96h-1.68",
    "m1213206v167": "M12.13 20.6v-1.67",
    "m1213868v428l339368": "M12.13 8.68v4.28l3.39 3.68",
    "m64136625775": "M6.41 3.66 2.57 7.5",
    "m2143724175934": "M21.43 7.24 17.59 3.4"
  },
  "src/renderer/src/ui/icons/normal/editor-manual-fields/2-key-fill-nun.tsx": {
    "m7758a27527500": "M7.75 8A2.75 2.75 0 0 0 5 10.75v2.5A2.75 2.75 0 0 0 7.75 16h.5a.75.75 0 0 0 0-1.5h-.5c-.69 0-1.25-.56-1.25-1.25v-2.5c0-.69.56-1.25 1.25-1.25h.5a.75.75 0 0 0 0-1.5h-.5Zm3.75.75a.75.75 0 0 0-1.5 0V11h-.25a.75.75 0 0 0 0 1.5H10V14a2 2 0 0 0 2 2h.25a.75.75 0 0 0 0-1.5H12a.5.5 0 0 1-.5-.5v-1.5h.75a.75.75 0 0 0 0-1.5h-.75V8.75Zm8 0a.75.75 0 0 0-1.5 0v6.5a.75.75 0 0 0 1.5 0v-6.5Zm-4 4.25a.5.5 0 0 1 .5-.5h.25a.75.75 0 0 0 0-1.5H16a2 2 0 0 0-2 2v2.25a.75.75 0 0 0 1.5 0V13ZM5.25 4A3.25 3.25 0 0 0 2 7.25v9.5A3.25 3.25 0 0 0 5.25 20h13.5A3.25 3.25 0 0 0 22 16.75v-9.5A3.25 3.25 0 0 0 18.75 4H5.25ZM3.5 7.25c0-.966.784-1.75 1.75-1.75h13.5c.966 0 1.75.784 1.75 1.75v9.5a1.75 1.75 0 0 1-1.75 1.75H5.25a1.75 1.75 0 0 1-1.75-1.75v-9.5Z"
  },
  "src/renderer/src/ui/icons/normal/editor-manual-fields/2-key.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m9811172h246m60829704647m100508c148024881246225v168132168c0214478225": "M9.81 11.72h2.46m6.08-2.97-.04 6.47m-10.05.08c-1.48 0-2.48-.81-2.46-2.25v-1.68 1.32-1.68c-.02-1.44.78-2.25 2.46-2.25m4.64 6.55c-1.86 0-2.17-.65-2.14-2.09V8.76m4.03 6.5v-1.4c-.02-1.44.31-2.09 1.45-2.09m-11.2 7.45h13.93a2.25 2.25 0 0 0 2.25-2.25V7.05a2.25 2.25 0 0 0-2.25-2.25H5.03a2.25 2.25 0 0 0-2.25 2.25v9.91a2.25 2.25 0 0 0 2.25 2.25Z"
  },
  "src/renderer/src/ui/icons/normal/editor-manual-fields/3-pos.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m99l512l17745226l2114l99zm7071": "m9 9l5 12l1.774-5.226L21 14L9 9zm7.071 7.071l4.243 4.243M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122"
  },
  "src/renderer/src/ui/icons/normal/editor-manual-fields/4-field.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m46h16a2200": "M4 6h16a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2Zm1 2.5h1.5m1.5 0H6.5m0 0v7m0 0H5m1.5 0H8"
  },
  "src/renderer/src/ui/icons/normal/editor-manual-fields/5-code.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m1425975l16512l225225m450l75": "M14.25 9.75L16.5 12l-2.25 2.25m-4.5 0L7.5 12l2.25-2.25M6 20.25h12A2.25 2.25 0 0020.25 18V6A2.25 2.25 0 0018 3.75H6A2.25 2.25 0 003.75 6v12A2.25 2.25 0 006 20.25z"
  },
  "src/renderer/src/ui/icons/normal/editor-manual-fields/6-target-fill-nun.tsx": {
    "m112v207a8800": "M11 2v2.07A8 8 0 0 0 4.07 11H2v2h2.07A8 8 0 0 0 11 19.93V22h2v-2.07A8 8 0 0 0 19.93 13H22v-2h-2.07A8 8 0 0 0 13 4.07V2m-2 4.08V8h2V6.09c2.5.41 4.5 2.41 4.92 4.91H16v2h1.91A6.01 6.01 0 0 1 13 17.92V16h-2v1.91A6.01 6.01 0 0 1 6.08 13H8v-2H6.09A6.01 6.01 0 0 1 11 6.08M12 11a1 1 0 0 0-1 1 1 1 0 0 0 1 1 1 1 0 0 0 1-1 1 1 0 0 0-1-1Z"
  },
  "src/renderer/src/ui/icons/normal/editor-manual-fields/6-target.tsx": {
    "m1215v813": "M12 1.5v8.13",
    "m22512h813": "M22.5 12h-8.13",
    "m12225v813": "M12 22.5v-8.13",
    "m1512h813": "M1.5 12h8.13"
  },
  "src/renderer/src/ui/icons/normal/editor-manual-fields/7-color-picker-fill.tsx": {
    "m31708v37l713713l9515l1061071515": "M3 17.08v-3.7l7.13-7.13L9 5.15l1.06-1.07 1.5 1.5 2.3-2.29a.75.75 0 0 1 .55-.23c.21 0 .4.08.55.23l1.81 1.84c.15.15.23.33.23.55 0 .21-.08.4-.23.55L14.5 8.5l1.5 1.52-1.06 1.06-1.13-1.12-7.1 7.12H3Zm1.5-1.5h1.58l6.67-6.66-1.56-1.59L4.5 14v1.58Zm8.83-8.02 1.88-1.9-.8-.8-1.89 1.87.81.83Z"
  },
  "src/renderer/src/ui/icons/normal/editor-manual-fields/7-color-picker.tsx": {
    "m13746312331772l01407": "M13.74 6.31 2.33 17.72l-.01 4.07 4.06-.01L17.8 10.37",
    "m1129374901901": "m11.29 3.74 9.01 9.01",
    "m18723289294434432929z": "m18.7 2.3 2.89 2.9-4.43 4.43-2.9-2.9z"
  },
  "src/renderer/src/ui/icons/normal/editor-swap-popup/1-arrow-up.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m45105l123m00l7575m12": "M4.5 10.5L12 3m0 0l7.5 7.5M12 3v18"
  },
  "src/renderer/src/ui/icons/normal/editor-swap-popup/2-arrow-down.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m195135l1221m00l7575m1221v3": "M19.5 13.5L12 21m0 0l-7.5-7.5M12 21V3"
  },
  "src/renderer/src/ui/icons/normal/editor-swap-popup/3-trash24.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m14749l3469m47880l9269m9968321c342052682107": "M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"
  },
  "src/renderer/src/ui/icons/normal/editor-swap-popup/4-close.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m618186m66l12": "M6 18 18 6M6 6l12 12"
  },
  "src/renderer/src/ui/icons/normal/editor-swap-popup/5-menu-burger3-nun.tsx": {
    "m4565h12": "M4.5 6.5h12",
    "m4498105h11997": "M4.498 10.5h11.997",
    "m45145h11995": "M4.5 14.5h11.995"
  },
  "src/renderer/src/ui/icons/normal/editor-swap-popup/5-menu-burger5.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m375675h165m37512h165m165525h165": "M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
  },
  "src/renderer/src/ui/icons/normal/editor-swap-popup/6-add.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "m1245v15m7575h15": "M12 4.5v15m7.5-7.5h-15"
  },
  "src/renderer/src/ui/icons/normal/extended-policy/1-face.tsx": {
    "m00h24v24h0z": "M0 0h24v24H0z",
    "m1761089c73491427618127486387541533923253466957142705550820432": "M17.6 10.89c-.73-.49-1.42-.76-1.8-1.27-.48-.63-.87-.54-1.53-.39-2.32.53-4.66.95-7 1.4-.27.05-.55 0-.82 0-.4-3.2 1.94-5.64 5.44-5.76 3.45-.12 5.88 2.28 5.71 6.01Z",
    "m6731319c4457921111317234846": "M6.73 13.19c.44.57.92 1.11 1.3 1.72.3.48.46 1.04.73 1.55a3.48 3.48 0 0 0 3.3 2.04c1.49 0 2.5-.8 3.21-2.05.54-.96 1.1-1.91 1.67-2.85.08-.14.26-.23.6-.24-.09.26-.14.53-.27.76-.46.79-.98 1.54-1.41 2.35-.82 1.55-2 2.56-3.82 2.57-1.82.01-3.02-.96-3.85-2.52-.44-.83-.99-1.61-1.47-2.42-.13-.22-.19-.48-.28-.73l.29-.19Z",
    "m19811621c5745631219358080919222923l328190843c22094423672677117809": "M19.81 16.21c.5.74.56 3.12.19 3.58-.08.09-.19.22-.29.23l-3.28.19-.08-.43c.22-.09.44-.23.67-.26.77-.1 1.78.09 2.25-.33.41-.37.19-1.42.28-2.16.03-.24.14-.47.26-.82Z",
    "m1965757c035609112116802135041371413851010102152050801411272091317342534980319605": "M19.65 7.57c-.03-.56-.09-1.12-.1-1.68-.02-1.35-.04-1.37-1.4-1.38-.51 0-1.01-.02-1.52-.05-.08 0-.14-.11-.27-.2.09-.13.17-.34.25-.34.98-.03 1.96-.05 2.94-.02.18 0 .48.22.49.37.1 1.09.14 2.19.2 3.28l-.6.02Z",
    "m4541637v153c0160159": "M4.54 16.37v1.53c0 1.6 0 1.59 1.64 1.61.47 0 .95.06 1.42.09l.04.3c-.16.09-.32.25-.49.27-2.96.41-3.7-.33-3.27-3.29.03-.19.16-.36.24-.54l.43.04Z",
    "m40876c0823247227127293263433193051903381485334718673187325403108041620670491278891034702950": "M4.08 7.6c-.08-.23-.2-.47-.22-.71-.27-2.93.26-3.43 3.19-3.05.19.03.38.14.85.33-.47.18-.67.31-.87.32-.54.03-1.08.04-1.62 0-.67-.04-.91.27-.88.91.03.47.02.95 0 1.43-.01.25-.1.49-.15.74l-.29.02Z"
  },
  "src/renderer/src/ui/icons/normal/extended-policy/2-fido.tsx": {
    "m00h24v24h0z": "M0 0h24v24H0z",
    "m8131322c0119022390358c87971012": "M8.13 13.22c0-1.19.02-2.39 0-3.58C8 7.97 10.12 9.63 9.9 7.77c-.04-.65 0-1.31-.01-1.96 0-1.06 1.99-.74 3.49-.74 1.27 0 .55 2.02.73 2.85-.01.6.22.93.85.86.75-.09.98.25.97.98-.04 2.24 0 4.49-.02 6.73.21 3.32-3.51 2.27-5.66 2.42-3.04.02-1.89-3.73-2.1-5.7Zm.62.24c-.15 5.24-.2 4.93 4.94 4.81.98-.02 1.48-.44 1.5-1.41.05-2.21.03-4.42.04-6.62 0-.53-.2-.77-.77-.76-1.64.03-3.29.03-4.93 0-.62-.01-.8.26-.78.83.02 1.05 0 2.1 0 3.15Zm3.34-7.82c-1.76.02-1.61-.24-1.62 1.64l.01.36c.01.11-.01.41.25.68s1.56.09 2.18.15c.8.04.62-.81.65-1.35 0-1.74 0-1.47-1.47-1.49Z",
    "m1129742061141020611402z": "m11.29 7.42-.06-1.1.41-.02.06 1.1-.4.02Z",
    "m1227737v624c09035054305v113c09035054305z": "M12.27 7.37V6.24c.09 0 .35.05.43.05v1.13c-.09 0-.35-.05-.43-.05Z"
  },
  "src/renderer/src/ui/icons/normal/extended-policy/3-bluetooth.tsx": {
    "m00h24v24h0z": "M0 0h24v24H0z",
    "m10911386c7674148151229219252169210529063608321067991": "M10.91 13.86c-.76.74-1.48 1.51-2.29 2.19-.25.21-.69.2-1.05.29.06-.36 0-.83.2-1.06.79-.91 1.66-1.76 2.52-2.6.55-.54.54-1.01-.02-1.53-.85-.8-1.7-1.6-2.48-2.47-.24-.27-.22-.76-.33-1.16.39.12.87.14 1.17.38.78.62 1.49 1.34 2.23 2.02l.38-.17V3.43l.39-.17 4.88 4.61c-1.02 1.04-1.92 2.01-2.88 2.92-.77.73-.78 1.32.04 2.02a18.2 18.2 0 0 1 2.21 2.18c.24.29.37 1.07.18 1.28-1.35 1.44-2.81 2.78-4.56 4.48v-6.72l-.61-.15Zm1.84 3.51.39.17c.49-.64 1.35-1.28 1.37-1.94.02-.57-.91-1.17-1.43-1.76l-.34.17v3.36Zm.2-11.23-.27.19v3.3l.43.16c.46-.66 1.27-1.31 1.27-1.97 0-.56-.92-1.13-1.43-1.69Z"
  },
  "src/renderer/src/ui/icons/normal/extended-policy/4-prox.tsx": {
    "fillnoneStrokecurrentStrokelinecaproundStrokemiterlimit10Strokewidth075px": "fill-none stroke-current [stroke-linecap:round] [stroke-miterlimit:10] [stroke-width:0.75px]",
    "m00h24v24h0z": "M0 0h24v24H0z",
    "m192438s118419213381618": "M19.24 3.8s1.18.4 1.92 1.33.8 1.61.8 1.61",
    "m1903508s8123138451085108": "M19.03 5.08s.81.23 1.3.84.5 1.08.5 1.08",
    "m188627s431684124562456": "M18.8 6.27s.43.1.68.41.24.56.24.56",
    "m120417h628c111013221132131v846c0102381441414538102": "M12.04 17H6.28c-1.11 0-1.32-.21-1.32-1.31V8.46c0-1.02.38-1.44 1.4-1.45 3.81-.02 7.62-.02 11.43 0 .85 0 1.25.41 1.26 1.27.02 2.61.01 5.21 0 7.82 0 .75-.16.89-.95.9-2.02.02-4.04 0-6.06 0Zm.15-4.91H6.63c-.31 0-.49.16-.49.48v2.93c0 .31.17.48.49.49l.78.01h9.96c.49.03.72-.17.7-.68-.02-.78 0-1.56 0-2.34-.01-.86-.03-.88-.88-.88h-4.98Zm-.11-3.91H6.89c-.69 0-.78.12-.77.8 0 .65.07.73.84.73h10.57c.37 0 .5-.21.52-.56.06-.83-.05-.98-.89-.98h-5.09Z",
    "m14641483c58011602174011603184527131624394145230851057705h252c330": "M14.64 14.83c-.58 0-1.16.02-1.74-.01-.16 0-.3-.18-.45-.27.13-.16.24-.39.41-.45.23-.08.51-.05.77-.05h2.52c.33 0 .73.05.68.49-.04.39-.45.29-.72.29h-1.45Z"
  },
  "src/renderer/src/ui/icons/normal/extended-policy/5-otp.tsx": {
    "m00h24v24h0z": "M0 0h24v24H0z",
    "m15971186q990713875h83c45753214519213101416254877113245259616": "M15.97 11.86q-.99.07-1.38.75H8.3c-.45-.75-.32-1.45-.19-2.13 1.01-.41 6.25-.48 7.71-.1.32.45.25.96.16 1.48Z",
    "m15821038c1453866931771113682713819213h629q396813875c09521610316148z": "M15.82 10.38c-1.45-.38-6.69-.31-7.71.1-.13.68-.27 1.38.19 2.13h6.29q.39-.68 1.38-.75c.09-.52.16-1.03-.16-1.48Z",
    "m1769218c4223911413814h619c10102020230301910310721114111v1715c047119739": "M17.69 2.18c-.42-.23-.91-.14-1.38-.14h-6.19c-1.01 0-2.02-.02-3.03.01-.91.03-1.07.21-1.14 1.11v17.15c0 .47-.11.97.39 1.58 1.22.17 2.51.06 3.8.08 1.35.02 2.69.03 4.03 0 1.27-.03 2.56.14 3.78-.12.06-.31.11-.45.11-.59l.01-18.01c0-.38.01-.78-.38-1.06Zm-.64 16.36c-.98.29-7.82.37-9.77.11-.36-.95-.13-1.96-.17-2.94-.04-1 0-2 .08-3.1V4.16h9.77c.27 1.1.33 12.7.1 14.39Zm-3.99 2.3c-.39.32-.77.29-1.18.07-.23-.5-.04-.86.45-.92.59-.08.84.26.73.85Z",
    "m16971125a30530500": "M16.97 11.25a3.05 3.05 0 0 0-.29-1.16.93.93 0 0 0-.71-.52l-.16-.03H8.39c-.25 0-.44.08-.62.2l-.05.07a4.38 4.38 0 0 0 .07 3.43s1.01.37 1.64.36l2.3-.02h3.51c.62-.01 1.21-.13 1.46-.8l.01-.03.1-.3.05-.21c.06-.26.09-.54.1-.83v-.15Zm-1 .61q-.99.07-1.38.75H8.3c-.45-.75-.32-1.45-.19-2.13 1.01-.41 6.25-.48 7.71-.1.32.45.25.96.16 1.48Z",
    "m100311370132v02c8147118451510132412481071163438672913934l0346z": "m10.03 11.37.01-.32v-.02c-.81-.47-1.18-.45-1.51-.01-.32.41-.24.81.07 1.16.34.38.67.29 1.39-.34l.03-.46Z",
    "m1172106c551595012546030560591753": "M11.72 10.6c-.55-.15-.95 0-1.25.46 0 .3-.05.6-.05.91.7.53 1.16.61 1.5.22.53-.6.25-1.13-.2-1.59Z",
    "m1403106c391983011093252743621810315253146644747027922945815370710331122z": "M14.03 10.6c-.39-.19-.83.01-1.09.3-.25.27-.43.62-.18 1.03.15.25.31.46.64.47.47.02.79-.22.94-.58.15-.37.07-1.03-.31-1.22Z"
  },
  "src/renderer/src/ui/icons/normal/extended-policy/6-pin.tsx": {
    "m00h24v24h0z": "M0 0h24v24H0z",
    "m6871377c013811471521461310": "M6.87 13.77c0-1.38.1-1.47 1.52-1.46 1.31 0 1.37.09 1.36 1.62 0 1.34-.07 1.4-1.46 1.4-1.36 0-1.43-.08-1.42-1.55Z",
    "m10571381c01430715146151360": "M10.57 13.81c0-1.43.07-1.5 1.46-1.5 1.36 0 1.45.1 1.45 1.53 0 1.4-.09 1.48-1.49 1.48-1.38 0-1.43-.05-1.43-1.52Z",
    "m17131385c013908147139148139": "M17.13 13.85c0 1.39-.08 1.47-1.39 1.48-1.39 0-1.51-.11-1.51-1.48 0-1.42.1-1.53 1.47-1.53 1.36 0 1.44.08 1.43 1.54Z",
    "m10571752c013712151391511350": "M10.57 17.52c0-1.37.12-1.5 1.39-1.51 1.35 0 1.52.16 1.52 1.5 0 1.44-.08 1.53-1.46 1.53-1.39 0-1.45-.06-1.45-1.53Z",
    "m1348644c01350814314514214": "M13.48 6.44c0 1.35-.08 1.43-1.45 1.42-1.4 0-1.47-.07-1.47-1.51 0-1.37.05-1.41 1.55-1.4 1.32 0 1.37.06 1.36 1.49Z",
    "m1713639c014204147138147145": "M17.13 6.39c0 1.42-.04 1.47-1.38 1.47-1.45 0-1.52-.07-1.52-1.45 0-1.4.06-1.46 1.51-1.46 1.37 0 1.39.03 1.39 1.44Z",
    "m9751014c013803141143141143": "M9.75 10.14c0 1.38-.03 1.41-1.43 1.41-1.43 0-1.47-.03-1.46-1.48 0-1.34.1-1.43 1.44-1.44 1.39 0 1.45.07 1.45 1.51Z",
    "m13481006c014106148137148147": "M13.48 10.06c0 1.41-.06 1.48-1.37 1.48-1.47 0-1.54-.05-1.54-1.42 0-1.4.07-1.49 1.37-1.5 1.44 0 1.54.08 1.55 1.44Z",
    "m17131018c013404137147137137": "M17.13 10.18c0 1.34-.04 1.37-1.47 1.37-1.37 0-1.44-.08-1.43-1.53 0-1.3.1-1.39 1.49-1.38 1.36 0 1.42.07 1.41 1.55Z",
    "m975644c013409142146142135": "M9.75 6.44c0 1.34-.09 1.42-1.46 1.42-1.35 0-1.44-.1-1.43-1.56 0-1.3.07-1.35 1.52-1.35 1.32 0 1.37.06 1.37 1.49Z"
  },
  "src/renderer/src/ui/icons/normal/extended-policy/7-contactless.tsx": {
    "fillnoneStrokecurrentStrokemiterlimit10StrokelinecaproundStrokewidth058px": "fill-none stroke-current [stroke-miterlimit:10] [stroke-linecap:round] [stroke-width:0.58px]",
    "fillnoneStrokecurrentStrokemiterlimit10Strokewidth077px": "fill-none stroke-current [stroke-miterlimit:10] [stroke-width:0.77px]",
    "m00h24v24h0z": "M0 0h24v24H0z",
    "m11991755h6c1290181518217802251025020753012853179": "M11.99 17.55h-6c-1.29 0-1.81-.5-1.82-1.78-.02-2.51-.02-5.02 0-7.53 0-1.28.53-1.79 1.82-1.79h12.1c1.24 0 1.75.52 1.76 1.74.01 2.54.02 5.08 0 7.62 0 1.24-.5 1.72-1.75 1.73H12Zm.05-1.01c1.91 0 3.81-.02 5.72 0 .75.01 1.11-.22 1.1-1.03-.03-2.35-.03-4.7 0-7.05 0-.76-.34-1-1.04-1H6.2c-.73 0-1.03.31-1.02 1.03.02 2.32.02 4.64 0 6.96-.01.85.37 1.1 1.16 1.09 1.91-.03 3.81 0 5.72 0Z",
    "m6941547c350653145349043365154521010420304": "M6.94 15.47c-.35-.06-.53-.14-.53-.49 0-.43.36-.51.54-.52 1.01-.04 2.03-.04 3.04 0 .18 0 .51.1.51.46 0 .3-.14.44-.47.5s-2.75.1-3.09.04Z",
    "m14571313a151500": "M14.57 13.13a1.5 1.5 0 0 0 0-2.2",
    "m1521371a23623600": "M15.2 13.71a2.36 2.36 0 0 0 0-3.36",
    "m15831422a30630600": "M15.83 14.22a3.06 3.06 0 0 0 0-4.44"
  },
  "src/renderer/src/ui/icons/normal/extended-policy/8-smartcard.tsx": {
    "fillnoneStrokecurrentStrokelinejoinroundStrokelinecaproundStrokewidth035px": "fill-none stroke-current [stroke-linejoin:round] [stroke-linecap:round] [stroke-width:0.35px]",
    "fillnoneStrokecurrentStrokelinejoinroundStrokelinecaproundStrokewidth04": "fill-none stroke-current [stroke-linejoin:round] [stroke-linecap:round] [stroke-width:0.4]",
    "fillnoneStrokecurrentStrokelinejoinroundStrokelinecaproundStrokewidth075": "fill-none stroke-current [stroke-linejoin:round] [stroke-linecap:round] [stroke-width:0.75]",
    "m00h24v24h0z": "M0 0h24v24H0z",
    "m17907h671": "M17 9.07H6.71",
    "m659115h115s5506555454465446h659": "M6.59 11.5h1.15s.55.06.55.54-.54.46-.54.46H6.59",
    "m6591462h376v414h659v414z": "M6.59 14.62h3.76v-4.14H6.59v4.14Z",
    "m10341263c106011710417146s1254617146": "M10.34 12.63c-1.06-.01-1.71.04-1.71.46s1.25.46 1.71.46",
    "m841048c0991328819588": "M8.4 10.48c0 .99 1.32.88 1.95.88",
    "m11991755h6c1290181518217802251025020753012853179": "M11.99 17.55h-6c-1.29 0-1.81-.5-1.82-1.78-.02-2.51-.02-5.02 0-7.53 0-1.28.53-1.79 1.82-1.79h12.1c1.24 0 1.75.52 1.76 1.74.01 2.54.02 5.08 0 7.62 0 1.24-.5 1.72-1.75 1.73H12Zm.05-1.01c1.91 0 3.81-.02 5.72 0 .75.01 1.11-.22 1.1-1.03-.03-2.35-.03-4.7 0-7.05 0-.76-.34-1-1.04-1H6.2c-.73 0-1.03.31-1.02 1.03.02 2.32.02 4.64 0 6.96-.01.85.37 1.1 1.16 1.09 1.91-.03 3.81 0 5.72 0Z"
  },
  "src/renderer/src/ui/icons/normal/extended-policy/9-fingerprint.tsx": {
    "m00h24v24h0z": "M0 0h24v24H0z",
    "m1378998c082241383963684797126147412262105440148250425163737435617": "M13.78 9.98c-.08 2.24-1.38 3.96-3.68 4.79-.71.26-1.47.41-2.2.6-.21.05-.44.01-.48-.25-.04-.25.16-.37.37-.43.56-.17 1.14-.3 1.7-.48 2.37-.74 3.51-2.18 3.48-4.33-.01-.64-.13-1.22-.87-1.31-.73-.09-1.07.39-1.22 1.02-.31 1.35-1.05 2.32-2.4 2.76-.29.09-.61.1-.92.12-.2 0-.45-.02-.49-.27-.04-.27.19-.36.4-.37 1.66-.1 2.4-1.1 2.75-2.62.25-1.08 1.11-1.52 2.14-1.33.93.17 1.47.97 1.43 2.11Z",
    "m1525107c1310206209126": "M15.25 10.7c-.13 1.02-.06 2.09 1.26 2.6.15.06.3.22.2.42-.12.23-.34.19-.55.16-.86-.13-1.65-1.1-1.73-2.22-.05-.62 0-1.24 0-1.87-.03-1.53-.86-2.56-2.18-2.71-1.27-.15-2.36.63-2.76 2.01-.16.54-.31 1.06-.74 1.46-.32.3-.68.47-1.13.43-.21-.02-.45-.06-.49-.3-.04-.27.2-.34.41-.37.68-.11.96-.57 1.16-1.17.71-2.14 2.04-3.04 3.91-2.71 1.64.29 2.68 1.82 2.65 3.92v.36Z",
    "m1671026c05508111181630816135074621134025514495143115351771185051663244a385": "M16.7 10.26c0 .55-.08 1.11.18 1.63.08.16.1.35-.07.46-.21.13-.4.02-.55-.14-.49-.51-.43-1.15-.35-1.77.11-.85.05-1.66-.3-2.44a3.85 3.85 0 0 0-3.79-2.39c-1.77.09-2.94 1.05-3.66 2.63-.16.35-.1 1.13-.71.88-.44-.19-.07-.82.08-1.21a4.72 4.72 0 0 1 5.36-2.95 4.73 4.73 0 0 1 3.81 4.36c.02.31 0 .62 0 .93Z",
    "m1261489c125212219633213409031822173302222325423a368": "M12.6 14.89c1.25.21 2.21.96 3.32 1.34.09.03.18.22.17.33-.02.22-.23.25-.4.23a3.68 3.68 0 0 1-1.65-.59c-.9-.59-1.77-.58-2.75-.2-.83.32-1.72.51-2.59.73-.29.07-.69.21-.79-.2-.09-.35.31-.4.56-.47l4.14-1.17Z",
    "m12271011a38538500": "M12.27 10.11a3.85 3.85 0 0 1-2.24 3.14c-.68.35-1.43.51-2.17.66-.26.05-.62.15-.71-.19-.12-.45.32-.45.59-.53.36-.11.74-.16 1.1-.27 1.43-.43 2.44-1.25 2.66-2.82.04-.3.07-.71.49-.66.35.04.31.4.28.67Z",
    "m12317232363c308611392171802360837270112242232143106455109": "m12.3 17.23-2.3.63c-.3.08-.61.13-.92.17-.18.02-.36-.08-.37-.27 0-.1.12-.24.22-.32 1.43-1.06 4.55-1.09 6-.07.17.12.4.22.28.47-.11.23-.34.18-.55.14-.74-.17-1.35-.72-2.36-.74Z",
    "m11961803c81021311117834190939213246072632285119994719717295032605621572191242841534861612128": "M11.96 18.03c.81-.02 1.31.11 1.78.34.19.09.39.21.32.46-.07.26-.32.28-.51.19-.99-.47-1.97-.17-2.95.03-.26.05-.62.15-.72-.19-.12-.4.28-.41.53-.48.6-.16 1.21-.28 1.55-.35Z",
    "m1352138c03383339562a757500": "M13.52 13.8c.03-.38.33-.39.56-.2a7.5 7.5 0 0 0 2.16 1.15c.16.06.32.17.25.38-.02.08-.12.16-.21.2-.57.25-2.69-.89-2.77-1.52Z"
  },
  "src/renderer/src/ui/icons/normal/extended-policy/a-password.tsx": {
    "fillnoneStrokecurrentStroke75": "fill-none stroke-current stroke-[.75]",
    "m00h24v24h0z": "M0 0h24v24H0z",
    "m137616088818c011118168148228371364029123274512146517409a42742700": "m13.76 16.08-.88-.18c.01-1.11-.8-1.68-1.48-2.28-.37-.13-.64.02-.9.1-2.32.74-5.12-1.46-5.17-4.09a4.27 4.27 0 0 1 6.21-3.84c1.38.66 2.68 2.63 2.21 4.5-.23.9-.05 1.51.65 2.14 1.17 1.05 2.19 2.27 3.37 3.31.89.78 1.02 1.66.78 2.74-1.17.5-2.24-.08-3.34-.33-.29-.22-.1-.61-.33-.89-.22-.23-.6-.04-.85-.28-.21-.22-.08-.55-.28-.9ZM8.52 9.15c.48 0 .92-.42.92-.89a1 1 0 0 0-.97-.96c-.46 0-.96.53-.93 1.01.02.41.53.85.99.85Z"
  },
  "src/renderer/src/ui/icons/normal/logos/1-hid-from-illustrator-no-frame.tsx": {
    "0022592": "0 0 22 5.92",
    "m00h24v24h0z": "M0 0h24v24H0z",
    "m79589h494v336h296v253h0v0h296v253h198v0h79v589z": "M7.9 5.89H4.94V3.36H2.96v2.53H0V0h2.96v2.53h1.98V0H7.9v5.89z",
    "m1245589h949v0h296v589z": "M12.45 5.89H9.49V0h2.96v5.89z",
    "m1878592h482v0h482c2047022128": "M18.78 5.92h-4.82V0h4.82C20.47 0 22 1.28 22 2.98s-1.54 2.95-3.22 2.95ZM16.73.47v4.85c1.21 0 1.92.21 1.92-2.41S17.83.47 16.73.47Z",
    "m891493h594v124h396v253h1v904h296v253h198v904h89v589z": "M8.9 14.93H5.94V12.4H3.96v2.53H1V9.04h2.96v2.53h1.98V9.04H8.9v5.89z",
    "m13451493h296v904h296v589z": "M13.45 14.93h-2.96V9.04h2.96v5.89z",
    "m19781496h482v904h482c1690322128": "M19.78 14.96h-4.82V9.04h4.82c1.69 0 3.22 1.28 3.22 2.98s-1.54 2.95-3.22 2.95Zm-2.05-5.45v4.85c1.21 0 1.92.21 1.92-2.41s-.82-2.44-1.92-2.44Z",
    "021943790219437926146056211043311242": ".02194379 .02194379 26.14605621 10.43311242",
    "m25374688c0212158373737s371583737158373737371583737zm34445c2380451864545s212454545451854545c0238211454545zm08424h08l132212h08l16238c080": "m25.374.688c0-.212.158-.37.37-.37s.37.158.37.37-.158.37-.37.37-.37-.158-.37-.37zm.344.45c.238 0 .45-.186.45-.45s-.212-.45-.45-.45-.45.185-.45.45c0 .238.211.45.45.45zm-.08-.424h.08l.132.212h.08l-.16-.238c.08 0 .133-.053.133-.132 0-.106-.053-.16-.185-.16h-.186v.53h.08v-.212zm0-.079v-.159h.106c.053 0 .106 0 .106.08s-.053.079-.132.079z",
    "m23786132h22516a113113000": "m23.786.132h-22.516a1.13 1.13 0 0 0 -1.138 1.138v7.937a1.13 1.13 0 0 0 1.138 1.138h22.516a1.13 1.13 0 0 0 1.138-1.138v-7.937c.026-.635-.504-1.138-1.138-1.138zm-14.076 7.726h-2.646v-2.248h-1.772v2.25h-2.646v-5.24h2.646v2.25h1.772v-2.25h2.646zm4.075 0h-2.646v-5.238h2.646zm5.662.027h-4.313v-5.266h4.313c1.508 0 2.884 1.138 2.884 2.646 0 1.482-1.376 2.62-2.884 2.62z",
    "m177273096v4312c108501721861722143": "m17.727 3.096v4.312c1.085 0 1.72.186 1.72-2.143 0-2.355-.741-2.17-1.72-2.17z"
  },
  "src/renderer/src/ui/icons/normal/lucid-react/01-folder.tsx": {
    "m2020a2200": "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
  },
  "src/renderer/src/ui/icons/normal/lucid-react/07-copy.tsx": {
    "m416c1102922v4c0119222h10c110": "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
  },
  "src/renderer/src/ui/icons/normal/lucid-react/09-alert-octagon.tsx": {
    "m1216h01": "M12 16h.01",
    "m153122a2200": "M15.312 2a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586l-4.688-4.688A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2z"
  },
  "src/renderer/src/ui/icons/normal/temp2/1-file.tsx": {
    "m165155v7l55h5a2200": "M16.5 15.5v-7l-5-5h-5a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zm-10-5h5m-5 2h7m-7 2h3",
    "m11535v3a2200": "M11.5 3.5v3a2 2 0 0 0 2 2h3"
  },
  "src/renderer/src/ui/icons/normal/temp2/2-folder-closed.tsx": {
    "m3555v9a2200": "M3.5 5.5v9a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-6a2 2 0 0 0-1.85-2H10.5l-2-2h-4a1 1 0 0 0-1 1zm0 1h7"
  },
  "src/renderer/src/ui/icons/normal/temp2/2-folder-open.tsx": {
    "m17585a2200": "M17.5 8.5a2 2 0 0 0-2-2h-5l-2-2h-4a1 1 0 0 0-1 1v3",
    "m28197441215a22": "M2.81 9.74 4.12 15a2 2 0 0 0 1.94 1.51h8.88A2 2 0 0 0 16.88 15l1.31-5.25a1 1 0 0 0-.97-1.24H3.78a1 1 0 0 0-.97 1.24z"
  },
  "src/renderer/src/ui/icons/symbols/all-other/06-folder.tsx": {
    "00256256": "0 0 256 256",
    "m240258111814a140341403400": "M240.258 111.814A14.034 14.034 0 0 0 228.9 106H214V88a14.016 14.016 0 0 0-14-14h-69.333a2.013 2.013 0 0 1-1.2-.4l-27.734-20.8a14.087 14.087 0 0 0-8.4-2.8H40a14.016 14.016 0 0 0-14 14v144c0 .038.005.075.006.113c.001.085.007.169.013.253a6.07 6.07 0 0 0 .074.651c.026.154.059.306.097.456c.015.062.03.123.047.184c.052.18.112.355.179.527c.012.031.022.064.035.095a6.085 6.085 0 0 0 .293.613c.01.02.024.039.035.059q.145.256.315.496c.013.02.024.041.039.061c.026.036.057.068.084.103c.092.122.188.24.289.355a5.919 5.919 0 0 0 .488.491c.048.044.093.088.142.13a6.171 6.171 0 0 0 .522.396l.013.008a5.947 5.947 0 0 0 .554.325c.048.026.097.047.147.071a5.745 5.745 0 0 0 .637.267q.226.08.46.141c.063.017.126.035.19.05c.16.036.324.064.49.088c.058.008.116.02.176.026A6.047 6.047 0 0 0 32 214h176a6 6 0 0 0 5.692-4.103l28.49-85.47a14.034 14.034 0 0 0-1.924-12.613zM40 62h53.334a2.013 2.013 0 0 1 1.2.4l27.733 20.8a14.087 14.087 0 0 0 8.4 2.8H200a2.003 2.003 0 0 1 2 2v18H69.766a13.983 13.983 0 0 0-13.282 9.573L38 171.026V64a2.003 2.003 0 0 1 2-2zm190.798 58.632L203.676 202H40.325l27.544-82.632A1.998 1.998 0 0 1 69.766 118H228.9a2 2 0 0 1 1.898 2.632z",
    "iconfolder": "#icon-folder"
  },
  "src/renderer/src/ui/icons/symbols/all-other/09-open-link.tsx": {
    "iconopenlink": "#icon-open-link"
  },
  "src/renderer/src/ui/icons/symbols/all-other/13-cross.tsx": {
    "m222222": "M2 22 22 2",
    "iconcross": "#icon-cross"
  },
  "src/renderer/src/ui/icons/symbols/all-other/14-pen.tsx": {
    "m1482012637839l765291501": "M1.48 20.12 6.37 8.39l7.65-2.91 5.01 3.21-.64 8.27-14.65 5.53c-.21.08-.38-.19-.21-.34l7.4-6.6s.23-.28.57-.39c.65-.21 1.7-.17 2.42-1.18 1.37-1.91-1.11-4.28-3.09-3.1-1.04.62-1.12 2.04-1.24 2.89-.05.39-.32.66-.32.66L1.85 20.4c-.19.16-.47-.05-.37-.28Z",
    "m1579377177222c060715082303l468316c08061170425l206472a1717": "m15.79 3.77 1.77-2.22c.06-.07.15-.08.23-.03l4.68 3.16c.08.06.1.17.04.25L20.64 7.2a.17.17 0 0 1-.23.03L15.8 3.92s-.05-.08 0-.14Z"
  },
  "src/renderer/src/ui/icons/symbols/all-other/15-form-login.tsx": {
    "m179387544944921207a9999": "m17.93 8.75-4.49 4.49 2.1 2.07a.99.99 0 0 1-.68 1.69s-1.79.2-4.05.2-3.45-.08-3.45-.08a1 1 0 0 1-1.01-.99s-.11-1.96-.11-3.78.11-3.75.11-3.75a.98.98 0 0 1 1.68-.7l2.4 2.37 4.51-4.51a1.03 1.03 0 0 1 1.47 0l1.51 1.51c.41.41.41 1.07 0 1.48Z",
    "m19352166s38718731873187318a22522500": "M19.35 21.66s-3.87.18-7.3.18-7.3-.18-7.3-.18a2.25 2.25 0 0 1-2.25-2.25s-.35-2.65-.35-7.41c0-4.4.16-5.64.35-7.41.13-1.24 1.01-2.25 2.25-2.25 0 0 3.9-.18 7.3-.18s7.3.18 7.3.18a2.25 2.25 0 0 1 2.25 2.25s.24 3.69.24 7.41-.24 7.41-.24 7.41a2.25 2.25 0 0 1-2.25 2.25Z",
    "iconformlogin": "#icon-form-login"
  },
  "src/renderer/src/ui/icons/symbols/all-other/16-form-change.tsx": {
    "m21510328c45115160l1410c45114814h16v74c0141252425h10c86": "m21.5 10-3 2.8c-.4.5-1.1.5-1.6 0L14 10c-.4-.5.1-1.4.8-1.4H16V7.4c0-1.4-1-2.5-2.4-2.5H10C8.6 5 7.5 6 7.5 7.4c0 .4-.4.7-.8.7H5.6c-.6 0-1.1-.4-1.1-1v-.7c0-2.3 1.9-4.2 4.2-4.2h6.6c2.3 0 4.2 1.9 4.2 4.2v2.2h1.2c.7 0 1.3.9.8 1.4ZM2.5 14l3-2.8c.4-.5 1.1-.5 1.6 0l3 2.8c.4.5-.1 1.4-.8 1.4H8v1.2c0 1.4 1 2.5 2.4 2.5H14c1.3 0 2.4-1.1 2.4-2.5 0-.4.4-.8.8-.8h1.1c.6 0 1.1.5 1.1 1.2v.6c0 2.3-1.9 4.2-4.2 4.2H8.7c-2.3 0-4.2-1.9-4.2-4.2v-2.2H3.3c-.7 0-1.3-.9-.8-1.4Z",
    "iconformchange": "#icon-form-change"
  },
  "src/renderer/src/ui/icons/symbols/all-other/17-checkbox-classic.tsx": {
    "m5535h10a2200": "M5.5 3.5h10a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-10a2 2 0 0 1-2-2v-10a2 2 0 0 1 2-2z",
    "m75105l22l44": "M7.5 10.5l2 2l4-4",
    "iconchkbox": "#icon-chkbox"
  },
  "src/renderer/src/ui/icons/symbols/all-other/18-checkbox-classic-empty.tsx": {
    "m5535h10a2200": "M5.5 3.5h10a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-10a2 2 0 0 1-2-2v-10a2 2 0 0 1 2-2z",
    "iconchkboxempty": "#icon-chkbox-empty"
  },
  "src/renderer/src/ui/icons/symbols/all-other/20-chevron-down.tsx": {
    "m58439593l1151525l56575657l707707l495495l495495l707707z": "M5.843 9.593L11.5 15.25l5.657-5.657l-.707-.707l-4.95 4.95l-4.95-4.95l-.707.707z",
    "iconchevrondown": "#icon-chevron-down"
  },
  "src/renderer/src/ui/icons/symbols/all-other/21-chevron-up.tsx": {
    "m584315407l115975l56575657l707707l495495l495495l707707z": "M5.843 15.407L11.5 9.75l5.657 5.657l-.707.707l-4.95-4.95l-4.95 4.95l-.707-.707z",
    "iconchevronup": "#icon-chevron-up"
  },
  "src/renderer/src/ui/icons/symbols/all-other/22-chevron-double-down.tsx": {
    "m171577593l1151325l58437593l707707l495495l495495l707707zm0": "M17.157 7.593L11.5 13.25L5.843 7.593l.707-.707l4.95 4.95l4.95-4.95l.707.707zm0 4L11.5 17.25l-5.657-5.657l.707-.707l4.95 4.95l4.95-4.95l.707.707z",
    "iconchevrondown2": "#icon-chevron-down-2"
  },
  "src/renderer/src/ui/icons/symbols/all-other/23-chevron-right.tsx": {
    "m616314a55001": "M6.16 3.14a.5.5 0 0 1 .7.02l3.76 4c.18.19.18.49 0 .68l-3.75 4a.5.5 0 1 1-.73-.68L9.56 7.5 6.14 3.84a.5.5 0 0 1 .02-.7Z",
    "iconchevronright": "#icon-chevron-right"
  },
  "src/renderer/src/ui/icons/symbols/all-other/24-fire.tsx": {
    "fillvarfillanoneStrokevarstrokeacurrentcolor": "fill-[var(--fill-a,none)] stroke-[var(--stroke-a,currentColor)]",
    "m153625214a8252825200": "M15.362 5.214A8.252 8.252 0 0 1 12 21 8.25 8.25 0 0 1 6.038 7.047 8.287 8.287 0 0 0 9 9.601a8.983 8.983 0 0 1 3.361-6.867 8.21 8.21 0 0 0 3 2.48Z",
    "fillvarfillbnoneStrokevarstrokebcurrentcolor": "fill-[var(--fill-b,none)] stroke-[var(--stroke-b,currentColor)]",
    "m1218a37537500": "M12 18a3.75 3.75 0 0 0 .495-7.468 5.99 5.99 0 0 0-1.925 3.547 5.975 5.975 0 0 1-2.133-1.001A3.75 3.75 0 0 0 12 18Z",
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "fillaea580cFillbfff7ed": "[--fill-a:#ea580c] [--fill-b:#fff7ed]",
    "iconfire": "#icon-fire"
  },
  "src/renderer/src/ui/icons/symbols/all-other/24-info.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "iconinfo": "#icon-info"
  },
  "src/renderer/src/ui/icons/symbols/all-other/24-question.tsx": {
    "m9099a3300": "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3",
    "m1217h01": "M12 17h.01",
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "iconquestion": "#icon-question"
  },
  "src/renderer/src/ui/icons/symbols/all-other/24-warning.tsx": {
    "m129v375m93033376c866152173374": "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z",
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "iconwarning": "#icon-warning"
  },
  "src/renderer/src/ui/icons/symbols/all-other/25-code.tsx": {
    "m996269a550109238l4": "M9.96 2.69a.5.5 0 1 0-.92-.38l-4 10a.5.5 0 1 0 .92.38l4-10Zm-6.1 2.46c.19.2.19.5 0 .7L2.2 7.5l1.64 1.65a.5.5 0 1 1-.7.7l-2-2a.5.5 0 0 1 0-.7l2-2c.2-.2.5-.2.7 0Zm7.29 0c.2-.2.5-.2.7 0l2 2c.2.2.2.5 0 .7l-2 2a.5.5 0 0 1-.7-.7l1.64-1.65-1.64-1.65a.5.5 0 0 1 0-.7Z",
    "iconcode": "#icon-code"
  },
  "src/renderer/src/ui/icons/symbols/all-other/25-forms.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "iconforms": "#icon-forms"
  },
  "src/renderer/src/ui/icons/symbols/all-other/26-ellipsis.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "iconellipsis": "#icon-ellipsis"
  },
  "src/renderer/src/ui/icons/symbols/all-other/30-lock-open.tsx": {
    "m135105v675a454501": "M13.5 10.5V6.75a4.5 4.5 0 1 1 9 0v3.75M3.75 21.75h10.5a2.25 2.25 0 0 0 2.25-2.25v-6.75a2.25 2.25 0 0 0-2.25-2.25H3.75a2.25 2.25 0 0 0-2.25 2.25v6.75a2.25 2.25 0 0 0 2.25 2.25Z",
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "iconlockopen": "#icon-lock-open"
  },
  "src/renderer/src/ui/icons/symbols/all-other/31-lock-closed.tsx": {
    "m165105v675a454501": "M16.5 10.5V6.75a4.5 4.5 0 1 0-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 0 0 2.25-2.25v-6.75a2.25 2.25 0 0 0-2.25-2.25H6.75a2.25 2.25 0 0 0-2.25 2.25v6.75a2.25 2.25 0 0 0 2.25 2.25Z",
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]",
    "iconlockclosed": "#icon-lock-closed"
  },
  "src/renderer/src/ui/icons/symbols/app/1-app-web-chrome.tsx": {
    "m21178h12": "M21.17 8H12",
    "m39560685414": "M3.95 6.06 8.54 14",
    "m10882194154614": "M10.88 21.94 15.46 14",
    "appwebchrome": "#app-web-chrome"
  },
  "src/renderer/src/ui/icons/symbols/app/2-app-win.tsx": {
    "m957244c13406265363889l207721a8558550": "M9.57 2.44c-1.34.06-2.65.36-3.88.9l-2.07 7.21a8.55 8.55 0 0 1 4.06-.9c1.43.03 2.82.5 3.97 1.35l2.07-7.21a6.74 6.74 0 0 0-4.15-1.35ZM14.8 4.6l-2.07 7.21c1.8 1.17 3.97 2.25 8.03.45l2.07-7.21c-4.24 1.8-6.31.81-8.12-.45h.09Zm-7.67 6.31c-1.34.06-2.65.36-3.88.9l-2.07 7.21c4.24-1.8 6.22-.72 8.03.45l2.07-7.21a6.74 6.74 0 0 0-4.15-1.35Zm5.23 2.07-2.07 7.21c1.8 1.17 3.88 2.16 8.12.36l1.98-7.12c-4.15 1.8-6.22.81-8.03-.45Z",
    "appwin32": "#app-win32"
  },
  "src/renderer/src/ui/icons/symbols/app/3-app-fcat.tsx": {
    "fillnoneStrokecurrentStroke15": "fill-none stroke-current stroke-[1.5]"
  },
  "src/renderer/src/ui/icons/symbols/app/4-app-web-ie.tsx": {
    "m2207745c20848922356944836909080918153385184567": "M22.07 7.45c2.08-4.89-2.23-5.69-4.48-3.69-.09.08-.09.18.15.3 3.85 1.84 5.67 5.1 5.42 9.23-5.13.13-9.8.15-14.66.15-.26 0-.58.06-.49.38.7 3.99 5.86 5.71 8.83 2.97.21-.2.37-.4.69-.36h4.79c.13 0 .15.03.09.14-3.04 7.47-13.34 7.9-17.39 1.64-.41-.63-.26-.33-.41-.63-.2-.4-.25-.58-.51-.23-.81 1.12-1.77 2.63-1.09 4.03.88 1.83 2.66.8 5.22.05-5.48 2.57-7.89 1.43-7.17-3.3A17.98 17.98 0 0 1 9.79 5.87c.01-.03 0-.05-.02-.07-2.51 1.3-4.72 4.03-5.94 5.64-.06.06-.09.09-.17.1 1.03-5.59 6.51-8.89 10.52-8.74 2.44-1.38 7.75-3.56 8.63.54.05.34.3 2.51-.74 4.11Zm-3.9 4.3c.25 0 .37-.16.31-.41-1.22-5.19-9.13-5.25-10.4-.05-.09.3.03.46.34.46h9.75Z",
    "fillnoneStrokecurrentStroke8": "fill-none stroke-current stroke-[.8]",
    "appwebie": "#app-web-ie"
  },
  "src/renderer/src/ui/icons/symbols/app/5-app-web-ie-text.tsx": {
    "m2381752h279v648h238v495h83v153h777v1105h291v153h83v153z": "M2.38 17.52h2.79V6.48H2.38V4.95h8.3v1.53H7.77v11.05h2.91v1.53h-8.3v-1.53Z",
    "m1268495h882v153h622v44h536v153h536v512h635v153h895v495z": "M12.68 4.95h8.82v1.53h-6.22v4.4h5.36v1.53h-5.36v5.12h6.35v1.53h-8.95V4.95Z",
    "fillnoneStrokecurrentStroke8": "fill-none stroke-current stroke-[.8]",
    "appwebietext": "#app-web-ie-text"
  },
  "src/renderer/src/ui/icons/symbols/app/6-app-web-ie-dot.tsx": {
    "vardotcentercolorF86a6a": "var(--dot-center-color, #f86a6a)",
    "m21178h12": "M21.17 8H12",
    "m39560685414": "M3.95 6.06 8.54 14",
    "m10882194154614": "M10.88 21.94 15.46 14",
    "appwebiedot": "#app-web-ie-dot"
  },
  "src/renderer/src/ui/icons/symbols/app/7-app-manual-mode.tsx": {
    "m22521293c4512224596397026141136525995640786866135l147819c422082142842657l127712c6417888": "M22.52 12.93c-.45-1.22-2.45-.96-3.97.02-.61.4-1.13.65-2.59.95-.64 0-.78-.68-.66-1.35l1.47-8.19c.42-2.08-2.14-2.84-2.65-.7l-1.27 7.12c-.64 1.78-.88 0-.88 0l-.35-7.67c0-2.78-2.73-2.95-2.73 0l.32 7.01c.14 2.77-.52 1.21-.52.99L7.4 4.87c-.62-2.63-3.07-1.95-2.63.44l1.19 5.56c.2 1.29-.81.68-.99.37L3.8 8.55c-.97-2.05-3.05-1.23-2.38.8l1.95 4.98c.19.54.33 1.09.42 1.66 0 1.4.91 4.26 1.65 5.01a6.87 6.87 0 0 0 9.73 0c1.8-2.02 2.66-2.87 3.37-4.42 0 0 1.82-1.53 4.08-2.81.2-.12-.11-.86-.11-.86Z",
    "fillnoneStrokecurrentScalex1Rotate25deg": "fill-none stroke-current scale-x-[-1] rotate-[25deg]",
    "appmanualmode": "#app-manual-mode"
  },
  "src/renderer/src/ui/local-ui/1-input-validate/1-in-form-controls.tsx": {
    "text065remTextred500": "text-[0.65rem] text-red-500",
    "colspan2Py1TextxsGridGap05": "col-span-2 py-1 text-xs grid gap-0.5",
    "colspan2Py1Pr05TextxsGrid": "col-span-2 py-1 pr-0.5 text-xs grid grid-cols-subgrid items-center",
    "outlineoffset0pxOutlinered500": "outline-offset-[0px] outline-red-500"
  },
  "src/renderer/src/ui/local-ui/1-input-validate/4-option-string.tsx": {
    "ring1Ringred50070": "ring-1 ring-red-500/70"
  },
  "src/renderer/src/ui/local-ui/1-input-validate/5-option-textarea.tsx": {
    "ring1Ringred50070": "ring-1 ring-red-500/70"
  },
  "src/renderer/src/ui/local-ui/1-input-validate/7-validate-checks.ts": {
    "valueCannotBeEmpty": "Value cannot be empty.",
    "theManagedLoginNameMust": "The managed login name must not be empty.",
    "valueMustBeANumber": "Value must be a number.",
    "minPasswordLengthMustBe": "Min password length must be more than 1",
    "maxPasswordLengthMustBe": "Max password length must be more than 1",
    "returnNumMinNumMax": ";\r\n        }\r\n        return num < min || num > max ? "
  },
  "src/renderer/src/ui/local-ui/1-input-validate/8-create-helpers.ts": {
    "sAnyForNowDue": "s any for now, due to some options are boolean\r\n\r\n// Init state\r\n\r\nexport function initRowInputState(value: string, more?: Partial<RowInputState>): RowInputState {\r\n    const state: RowInputState = {\r\n        type: ",
    "dataValueInitialdataValueDirty": ",\r\n        data: value,\r\n        initialData: value,\r\n        dirty: false,\r\n        error: undefined,\r\n        touched: undefined,\r\n        validate: undefined,\r\n    };\r\n\r\n    const initialData = more ? { ...state, ...rest } : state;\r\n\r\n    return initialData;\r\n}\r\n\r\n// Reset state\r\n\r\nexport function resetRowInputState(state: RowInputState, value: string): RowInputState {\r\n    const rv = {\r\n        ...state,\r\n        data: value,\r\n        dirty: false,\r\n        error: undefined,\r\n        touched: undefined,\r\n    };\r\n    return rv;\r\n}\r\n\r\n// Set atom\r\n\r\nexport function setRowInputStateAtomValue(stateAtom: RowInputStateAtom, value: RowInputState[",
    "onchangeType": ", onChange, { type: ",
    "exportFunctionCreatedataforstateatomvalueStringNumber": " });\r\n}\r\n\r\nexport function createDataForStateAtom(value: string | number, more?: Partial<RowInputState>): RowInputState {\r\n    value = value.toString();\r\n\r\n    const { options, ...rest } = more || {};\r\n\r\n    if (options?.initialValidate) {\r\n        const error = rest.validate?.(value);\r\n        if (error) {\r\n            rest.error = error;\r\n            rest.touched = true;\r\n        }\r\n    }\r\n\r\n    const state: RowInputState = {\r\n        type: "
  },
  "src/renderer/src/ui/local-ui/2-dropdown5.tsx": {
    "radixuireactselect": "@radix-ui/react-select",
    "radixuireacticons": "@radix-ui/react-icons",
    "constSelectitemclasses": ";\r\n\r\nconst selectItemClasses = ",
    "constTriggerclasses": ";\r\n\r\nconst triggerClasses = ",
    "exportTypeSelectnamevalueitemStringReadonly": ";\r\n\r\nexport type SelectNameValueItem = string | readonly [label: ReactNode, value: string];\r\n\r\ntype DropdownProps = HTMLAttributes<HTMLButtonElement> & {\r\n    items: SelectNameValueItem[];\r\n    valueAsLabel?: boolean; // each item value is the same as label, but label cannot be a ReactNode (only string) in this case\r\n    value?: string;\r\n    onValueChange?(value: string): void;\r\n};\r\n\r\nexport function Dropdown5({ items, valueAsLabel, value, onValueChange, className }: DropdownProps) {\r\n    return (\r\n        <Select.Root value={value} onValueChange={onValueChange}>\r\n            <Select.Trigger asChild>\r\n                <div className={classNames(triggerClasses, className)} tabIndex={0}>\r\n                    <Select.Value className={inputFocusClasses} />\r\n\r\n                    <Select.Icon>\r\n                        <SymbolChevronDown className=",
    "selecticonDivSelecttriggerSelectportalSelectcontent": " />\r\n                    </Select.Icon>\r\n                </div>\r\n            </Select.Trigger>\r\n\r\n            <Select.Portal>\r\n                <Select.Content className=",
    "selectviewportClassnameviewportclassesItemsmapItemIdx": ">\r\n                    <Select.Viewport className={viewportClasses}>\r\n                        {items.map(\r\n                            (item, idx) => {\r\n                                const isString = typeof item === 'string';\r\n                                const label = isString ? item : item[0];\r\n                                const value = isString\r\n                                    ? valueAsLabel && typeof label === 'string' //TODO: do this check at DropdownProps level, otherwise we fallback to idx silently\r\n                                        ? label\r\n                                        : idx.toString()\r\n                                    : item[1];\r\n                                return (\r\n                                    <Select.Item className={selectItemClasses} value={value} key={idx}>\r\n                                        <Select.ItemText>{label}</Select.ItemText>\r\n\r\n                                        <Select.ItemIndicator className="
  },
  "src/renderer/src/ui/local-ui/3-ui-arrow.tsx": {
    "reactspringweb": "@react-spring/web",
    "strokecurrentStroke6remFilltransparent": "stroke-current stroke-[.6rem] fill-transparent",
    "00100100": "0 0 100 100",
    "m5013L80": "M 50 13 L 80 43 L 50 72",
    "m5013L50": "M 50 13 L 50 42 L 50 72",
    "m8035L50": "M 80 35 L 50 65 L 20 35"
  },
  "src/renderer/src/ui/local-ui/4-input-select-ui-nun-dynamic-list.tsx": {
    "constInputasrefclasses": ";\r\n\r\n//const inputAsRefClasses = ",
    "onclickCtrl": "onClick ctrl:",
    "onpointerdownCtrl": "onPointerDown ctrl:"
  },
  "src/renderer/src/ui/local-ui/4-input-select-ui.tsx": {
    "constInputasrefclasses": ";\r\n\r\n//const inputAsRefClasses = "
  },
  "src/renderer/src/ui/local-ui/8-image-holder.tsx": {
    "sizefullImgsizefull": "size-full [&>img]:size-full"
  },
  "src/renderer/src/ui/local-ui/8-not-impl-yet.tsx": {
    "notImplementedYet": "Not implemented yet",
    "checkResultInDevtoolsConsole": "Check result in DevTools console"
  },
  "src/renderer/src/ui/local-ui/8-shared-styles.tsx": {
    "thisIsNotUsedExport": ";\r\n\r\n// this is not used\r\nexport const inputClasses = ",
    "menuClassesExportConstMenushortcutclasses": ";\r\n\r\n// menu classes\r\n\r\nexport const menuShortcutClasses = ",
    "manifestInputClassesExportConst": ";\r\n\r\n// manifest input classes\r\n\r\nexport const inputRingClasses = "
  },
  "src/renderer/src/ui/local-ui/nun/ai-listview/0-list-view-demo4.tsx": {
    "learnReactFundamentals": "Learn React fundamentals",
    "buildATodoListApp": "Build a todo list app",
    "studyReactHooksInDepth": "Study React hooks in depth",
    "exploreStateManagementSolutions": "Explore state management solutions",
    "learnAboutReactServerComponents": "Learn about React Server Components",
    "buildABlogWithNextjs": "Build a blog with Next.js",
    "implementAuthenticationInAReact": "Implement authentication in a React app",
    "createACustomReactHook": "Create a custom React hook",
    "optimizeReactAppPerformance": "Optimize React app performance",
    "learnAboutReactTestingLibraries": "Learn about React testing libraries",
    "buildAFullstackAppWith": "Build a full-stack app with React and Node.js",
    "exploreReactNativeForMobile": "Explore React Native for mobile development",
    "studyAdvancedReactPatterns": "Study advanced React patterns",
    "buildAPortfolioWebsiteWith": "Build a portfolio website with React"
  },
  "src/renderer/src/ui/local-ui/nun/ai-listview/always-visible-select-v0-1.tsx": {
    "useClient": "use client",
    "radixuireactselect": "@radix-ui/react-select",
    "flexH10WfullItemscenterJustifybetween": "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
    "relativeZ50Minw8remOverflowhiddenRoundedmd": "relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
    "datasidebottomtranslatey1Datasidelefttranslatex1Datasiderighttranslatex1Datasidetoptranslatey1": "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
    "hvarradixselecttriggerheightWfullMinwvarradixselecttriggerwidth": "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
    "py15Pl8Pr2TextsmFontsemibold": "py-1.5 pl-8 pr-2 text-sm font-semibold",
    "relativeFlexWfullCursordefaultSelectnone": "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
    "absoluteLeft2FlexH35W35": "absolute left-2 flex h-3.5 w-3.5 items-center justify-center",
    "selectAnItem": "Select an item"
  },
  "src/renderer/src/ui/local-ui/nun/ai-listview/always-visible-select-v0-2.tsx": {
    "radixuireactselect": "@radix-ui/react-select",
    "relativeZ50Minw8remOverflowhiddenRoundedmd": "relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md",
    "hvarradixselecttriggerheightWfullMinwvarradixselecttriggerwidth": "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
    "py15Pl8Pr2TextsmFontsemibold": "py-1.5 pl-8 pr-2 text-sm font-semibold",
    "relativeFlexWfullCursordefaultSelectnone": "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
    "absoluteLeft2FlexH35W35": "absolute left-2 flex h-3.5 w-3.5 items-center justify-center"
  },
  "src/renderer/src/ui/local-ui/nun/ai-listview/list-view-v0.tsx": {
    "radixuireactscrollarea": "@radix-ui/react-scroll-area",
    "radixuireactseparator": "@radix-ui/react-separator",
    "radixuireactfocusscope": "@radix-ui/react-focus-scope",
    "w300pxH400pxRoundedmdBorderBordergray200": "w-[300px] h-[400px] rounded-md border border-gray-200 shadow-sm",
    "p2RoundedmdHoverbggray100FocusoutlinenoneFocusring2": "p-2 rounded-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500",
    "flexSelectnoneTouchnoneP05Bggray100": "flex select-none touch-none p-0.5 bg-gray-100 transition-colors duration-150 ease-out hover:bg-gray-200 data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5",
    "flex1Bggray300Rounded10pxRelativeBeforecontent": "flex-1 bg-gray-300 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]"
  },
  "src/renderer/src/ui/local-ui/nun/ai-listview/listview.tsx": {
    "radixuireactscrollarea": "@radix-ui/react-scroll-area",
    "radixuireactfocusscope": "@radix-ui/react-focus-scope",
    "exportFunctionListviewcoConstFocusedindex": ");\r\n\r\nexport function ListViewCo() {\r\n    const [focusedIndex, setFocusedIndex] = useState<number | null>(null);\r\n    const itemRefs = useRef<(HTMLDivElement | null)[]>([]);\r\n\r\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (focusedIndex === null) {\r\n            return;\r\n        }\r\n\r\n        if (event.key === 'ArrowDown') {\r\n            setFocusedIndex((prev) => (prev !== null ? Math.min(prev + 1, items.length - 1) : 0));\r\n        }\r\n        else if (event.key === 'ArrowUp') {\r\n            setFocusedIndex((prev) => (prev !== null ? Math.max(prev - 1, 0) : 0));\r\n        }\r\n    };\r\n\r\n    useEffect(\r\n        () => {\r\n            if (focusedIndex !== null && itemRefs.current[focusedIndex]) {\r\n                itemRefs.current[focusedIndex]?.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\r\n            }\r\n        }, [focusedIndex]\r\n    );\r\n\r\n    return (\r\n        <FocusScope>\r\n            <ScrollArea className=\"h-64 w-64 border border-gray-300 rounded-md overflow-auto\">\r\n                <div\r\n                    className=\"focus:outline-none\"\r\n                    onKeyDown={handleKeyDown}\r\n                    tabIndex={0}\r\n                >\r\n                    {items.map(\r\n                        (item, index) => (\r\n                            <div\r\n                                ref={(el) => { itemRefs.current[index] = el; }}\r\n                                className={"
  },
  "src/renderer/src/ui/local-ui/nun/ai-listview/radix-original-select.tsx": {
    "radixuinumber": "@radix-ui/number",
    "radixuiprimitive": "@radix-ui/primitive",
    "radixuireactcollection": "@radix-ui/react-collection",
    "radixuireactcomposerefs": "@radix-ui/react-compose-refs",
    "radixuireactcontext": "@radix-ui/react-context",
    "radixuireactdirection": "@radix-ui/react-direction",
    "radixuireactdismissablelayer": "@radix-ui/react-dismissable-layer",
    "radixuireactfocusguards": "@radix-ui/react-focus-guards",
    "radixuireactfocusscope": "@radix-ui/react-focus-scope",
    "radixuireactid": "@radix-ui/react-id",
    "radixuireactpopper": "@radix-ui/react-popper",
    "radixuireactportal": "@radix-ui/react-portal",
    "radixuireactprimitive": "@radix-ui/react-primitive",
    "radixuireactslot": "@radix-ui/react-slot",
    "radixuireactusecallbackref": "@radix-ui/react-use-callback-ref",
    "radixuireactusecontrollablestate": "@radix-ui/react-use-controllable-state",
    "radixuireactuselayouteffect": "@radix-ui/react-use-layout-effect",
    "radixuireactuseprevious": "@radix-ui/react-use-previous",
    "radixuireactvisuallyhidden": "@radix-ui/react-visually-hidden",
    "expandOnScroll": "expand on scroll",
    "sNoOnclickWeForce": "s no `onClick`.\r\n                        // We force `focus` in this case. Note: this doesn",
    "sTheLeftButtonMousedown": "s the left button (mousedown gets triggered by all mouse buttons)\r\n                        // but not when the control key is pressed (avoiding MacOS right click); also not for touch\r\n                        // devices because that would open the menu on scroll. (pen devices behave as touch on iOS).\r\n                        if (event.button === 0 && event.ctrlKey === false && event.pointerType === ",
    "handleopeneventPreventTriggerFromStealing": ") {\r\n                            handleOpen(event);\r\n                            // prevent trigger from stealing focus from the active item after opening.\r\n                            event.preventDefault();\r\n                        }\r\n                    })}\r\n                    onKeyDown={composeEventHandlers(triggerProps.onKeyDown, (event) => {\r\n                        const isTypingAhead = searchRef.current !== ",
    "constIsmodifierkeyEventctrlkeyEventaltkeyEventmetakey": ";\r\n                        const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\r\n                        if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\r\n                        if (isTypingAhead && event.key === ",
    "returnIfOpen_keysincludeseventkeyHandleopenEventpreventdefault": ") return;\r\n                        if (OPEN_KEYS.includes(event.key)) {\r\n                            handleOpen();\r\n                            event.preventDefault();\r\n                        }\r\n                    })}\r\n                />\r\n            </PopperPrimitive.Anchor>\r\n        );\r\n    }\r\n);\r\n\r\nSelectTrigger.displayName = TRIGGER_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectValue\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst VALUE_NAME = ",
    "typeSelectvalueelementReactelementreftypeofPrimitivespanType": ";\r\n\r\ntype SelectValueElement = React.ElementRef<typeof Primitive.span>;\r\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\r\ninterface SelectValueProps extends Omit<PrimitiveSpanProps, ",
    "placeholderReactreactnodeConstSelectvalueReactforwardrefselectvalueelement": "> { placeholder?: React.ReactNode; }\r\n\r\nconst SelectValue = React.forwardRef<SelectValueElement, SelectValueProps>(\r\n    (props: ScopedProps<SelectValueProps>, forwardedRef) => {\r\n        // We ignore `className` and `style` as this part shouldn",
    "tWantEventsFromThe": "t want events from the portalled `SelectValue` children to bubble\r\n                // through the item they came from\r\n                style={{ pointerEvents: ",
    "shouldshowplaceholdercontextvaluePlaceholderChildrenPrimitivespanSelectvaluedisplayname": " }}\r\n            >\r\n                {shouldShowPlaceholder(context.value) ? <>{placeholder}</> : children}\r\n            </Primitive.span>\r\n        );\r\n    }\r\n);\r\n\r\nSelectValue.displayName = VALUE_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectIcon\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ICON_NAME = ",
    "typeSelecticonelementReactelementreftypeofPrimitivespanInterface": ";\r\n\r\ntype SelectIconElement = React.ElementRef<typeof Primitive.span>;\r\ninterface SelectIconProps extends PrimitiveSpanProps { }\r\n\r\nconst SelectIcon = React.forwardRef<SelectIconElement, SelectIconProps>(\r\n    (props: ScopedProps<SelectIconProps>, forwardedRef) => {\r\n        const { __scopeSelect, children, ...iconProps } = props;\r\n        return (\r\n            <Primitive.span aria-hidden {...iconProps} ref={forwardedRef}>\r\n                {children || ",
    "primitivespanSelecticondisplaynameIcon_nameSelectportalConst": "}\r\n            </Primitive.span>\r\n        );\r\n    }\r\n);\r\n\r\nSelectIcon.displayName = ICON_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectPortal\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst PORTAL_NAME = ",
    "typePortalpropsReactcomponentpropswithoutreftypeofPortalprimitiveInterface": ";\r\n\r\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\r\ninterface SelectPortalProps {\r\n    children?: React.ReactNode;\r\n    container?: PortalProps[",
    "specifyAContainerElementTo": "]; // Specify a container element to portal the content into.\r\n}\r\n\r\nconst SelectPortal: React.FC<SelectPortalProps> = (props: ScopedProps<SelectPortalProps>) => {\r\n    return <PortalPrimitive asChild {...props} />;\r\n};\r\n\r\nSelectPortal.displayName = PORTAL_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectContent\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst CONTENT_NAME = ",
    "typeSelectcontentelementSelectcontentimplelementInterfaceSelectcontentprops": ";\r\n\r\ntype SelectContentElement = SelectContentImplElement;\r\ninterface SelectContentProps extends SelectContentImplProps { }\r\n\r\nconst SelectContent = React.forwardRef<SelectContentElement, SelectContentProps>(\r\n    (props: ScopedProps<SelectContentProps>, forwardedRef) => {\r\n        const context = useSelectContext(CONTENT_NAME, props.__scopeSelect);\r\n        const [fragment, setFragment] = React.useState<DocumentFragment>();\r\n\r\n        // setting the fragment in `useLayoutEffect` as `DocumentFragment` doesn",
    "tWantToKeepGoing": "t want to keep going through the candidates\r\n                    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\r\n                    candidate?.scrollIntoView({ block: ",
    "viewportMightHavePaddingSo": " });\r\n                    // viewport might have padding so scroll to its edges when focusing first/last items.\r\n                    if (candidate === firstItem && viewport) viewport.scrollTop = 0;\r\n                    if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;\r\n                    candidate?.focus();\r\n                    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\r\n                }\r\n            }, [getItems, viewport]\r\n        );\r\n\r\n        const focusSelectedItem = React.useCallback(\r\n            () => focusFirst([selectedItem, content]), [focusFirst, selectedItem, content]\r\n        );\r\n\r\n        // Since this is not dependent on layout, we want to ensure this runs at the same time as\r\n        // other effects across components. Hence why we don",
    "tMovedByACertain": "t moved by a certain threshold then we prevent selecting item on `pointerup`.\r\n                    if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {\r\n                        event.preventDefault();\r\n                    } else {\r\n                        // otherwise, if the event was outside the content, close.\r\n                        if (!content.contains(event.target as HTMLElement)) {\r\n                            onOpenChange(false);\r\n                        }\r\n                    }\r\n                    document.removeEventListener(",
    "handlepointermoveTriggerpointerdownposrefcurrentNullIfTriggerpointerdownposrefcurrent": ", handlePointerMove);\r\n                    triggerPointerDownPosRef.current = null;\r\n                };\r\n\r\n                if (triggerPointerDownPosRef.current !== null) {\r\n                    document.addEventListener(",
    "handlepointermoveDocumentaddeventlistener": ", handlePointerMove);\r\n                    document.addEventListener(",
    "handlepointerupCaptureTrueOnceTrue": ", handlePointerUp, { capture: true, once: true });\r\n                }\r\n\r\n                return () => {\r\n                    document.removeEventListener(",
    "handlepointermoveDocumentremoveeventlistener": ", handlePointerMove);\r\n                    document.removeEventListener(",
    "handlepointerupCaptureTrueContentOnopenchange": ", handlePointerUp, { capture: true });\r\n                };\r\n            }, [content, onOpenChange, triggerPointerDownPosRef]\r\n        );\r\n\r\n        React.useEffect(\r\n            () => {\r\n                const close = () => onOpenChange(false);\r\n                window.addEventListener(",
    "closeWindowaddeventlistener": ", close);\r\n                window.addEventListener(",
    "closeReturnWindowremoveeventlistener": ", close);\r\n                return () => {\r\n                    window.removeEventListener(",
    "closeWindowremoveeventlistener": ", close);\r\n                    window.removeEventListener(",
    "closeOnopenchangeConstSearchrefHandletypeaheadsearch": ", close);\r\n                };\r\n            }, [onOpenChange]\r\n        );\r\n\r\n        const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch(\r\n            (search) => {\r\n                const enabledItems = getItems().filter((item) => !item.disabled);\r\n                const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);\r\n                const nextItem = findNextItem(enabledItems, search, currentItem);\r\n                if (nextItem) {\r\n                    /**\r\n                     * Imperative focus during keydown is risky so we prevent React",
    "reNotTrappingOnceIt": "re not trapping once it",
    "tTriggerOurOndismissIn": "t trigger our `onDismiss` in such case.\r\n                            onDismiss={() => context.onOpenChange(false)}\r\n                        >\r\n                            <SelectPosition\r\n                                role=\"listbox\"\r\n                                id={context.contentId}\r\n                                data-state={context.open ? ",
    "dircontextdirOncontextmenueventEventpreventdefaultContentpropsPoppercontentprops": "}\r\n                                dir={context.dir}\r\n                                onContextMenu={(event) => event.preventDefault()}\r\n                                {...contentProps}\r\n                                {...popperContentProps}\r\n                                onPlaced={() => setIsPositioned(true)}\r\n                                ref={composedRefs}\r\n                                style={{\r\n                                    display: ",
    "flexLayoutSoWeCan": ", // flex layout so we can place the scroll buttons properly\r\n                                    flexDirection: ",
    "outline": ",\r\n                                    outline: ",
    "resetTheOutlineByDefault": ", // reset the outline by default as the content MAY get focused\r\n                                    ...contentProps.style,\r\n                                }}\r\n                                onKeyDown={composeEventHandlers(contentProps.onKeyDown, (event) => {\r\n                                    const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\r\n\r\n                                    if (event.key === ",
    "eventpreventdefaultSelectShouldNotBe": ") event.preventDefault(); // select should not be navigated using tab key so we prevent it\r\n\r\n                                    if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\r\n\r\n                                    if ([",
    "includeseventkeyConstItemsGetitemsfilteritemItemdisabled": "].includes(event.key)) {\r\n                                        const items = getItems().filter((item) => !item.disabled);\r\n                                        let candidateNodes = items.map((item) => item.ref.current!);\r\n\r\n                                        if ([",
    "includeseventkeyCandidatenodesCandidatenodesslicereverseIf": "].includes(event.key)) {\r\n                                            candidateNodes = candidateNodes.slice().reverse();\r\n                                        }\r\n                                        if ([",
    "includeseventkeyConstCurrentelementEventtargetAs": "].includes(event.key)) {\r\n                                            const currentElement = event.target as SelectItemElement;\r\n                                            const currentIndex = candidateNodes.indexOf(currentElement);\r\n                                            candidateNodes = candidateNodes.slice(currentIndex + 1);\r\n                                        }\r\n\r\n                                        /**\r\n                                         * Imperative focus during keydown is risky so we prevent React",
    "tWantTheInitialScroll": "t want the initial scroll position adjustment to trigger \"expand on scroll\"\r\n                // so we explicitly turn it on only after they",
    "tGetTallerThanThe": "t get taller than the wrapper\r\n                            ...popperProps.style,\r\n                        }}\r\n                    />\r\n                </div>\r\n            </SelectViewportProvider>\r\n        );\r\n    }\r\n);\r\nSelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectPopperPosition\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst POPPER_POSITION_NAME = ",
    "typeSelectpopperpositionelementReactelementreftypeofPopperprimitivecontentType": ";\r\n\r\ntype SelectPopperPositionElement = React.ElementRef<typeof PopperPrimitive.Content>;\r\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\r\ninterface SelectPopperPositionProps extends PopperContentProps, SelectPopperPrivateProps { }\r\n\r\nconst SelectPopperPosition = React.forwardRef<SelectPopperPositionElement, SelectPopperPositionProps>(\r\n    (props: ScopedProps<SelectPopperPositionProps>, forwardedRef) => {\r\n        const { __scopeSelect, align = ",
    "collisionpaddingContent_marginPopperpropsPropsConst": ", collisionPadding = CONTENT_MARGIN, ...popperProps } = props;\r\n        const popperScope = usePopperScope(__scopeSelect);\r\n        return (\r\n            <PopperPrimitive.Content\r\n                {...popperScope}\r\n                {...popperProps}\r\n                ref={forwardedRef}\r\n                align={align}\r\n                collisionPadding={collisionPadding}\r\n                style={{\r\n                    boxSizing: ",
    "ensureBorderboxForFloatinguiCalculations": ", // Ensure border-box for floating-ui calculations\r\n                    ...popperProps.style,\r\n                    // re-namespace exposed content custom properties\r\n                    ...{\r\n                        ",
    "key_es44cwq": ",\r\n                        ",
    "selectpopperpositiondisplaynamePopper_position_nameSelectviewportTypeSelectviewportcontextvalue": ",\r\n                    },\r\n                }}\r\n            />\r\n        );\r\n    }\r\n);\r\nSelectPopperPosition.displayName = POPPER_POSITION_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectViewport\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype SelectViewportContextValue = {\r\n    contentWrapper?: HTMLDivElement | null;\r\n    shouldExpandOnScrollRef?: React.RefObject<boolean>;\r\n    onScrollButtonChange?: (node: SelectScrollButtonImplElement | null) => void;\r\n};\r\n\r\nconst [SelectViewportProvider, useSelectViewportContext] = createSelectContext<SelectViewportContextValue>(CONTENT_NAME, {});\r\n\r\nconst VIEWPORT_NAME = ",
    "typeSelectviewportelementReactelementreftypeofPrimitivedivType": ";\r\n\r\ntype SelectViewportElement = React.ElementRef<typeof Primitive.div>;\r\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\r\ninterface SelectViewportProps extends PrimitiveDivProps {\r\n    nonce?: string;\r\n}\r\n\r\nconst SelectViewport = React.forwardRef<SelectViewportElement, SelectViewportProps>(\r\n    (props: ScopedProps<SelectViewportProps>, forwardedRef) => {\r\n        const { __scopeSelect, nonce, ...viewportProps } = props;\r\n        const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);\r\n        const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);\r\n        const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);\r\n        const prevScrollTopRef = React.useRef(0);\r\n        return (<>\r\n            {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\r\n            <style\r\n                dangerouslySetInnerHTML={{\r\n                    __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`,\r\n                }}\r\n                nonce={nonce}\r\n            />\r\n            <Collection.Slot scope={__scopeSelect}>\r\n                <Primitive.div\r\n                    data-radix-select-viewport=\"\"\r\n                    role=\"presentation\"\r\n                    {...viewportProps}\r\n                    ref={composedRefs}\r\n                    style={{\r\n                        // we use position: ",
    "hereOnTheViewportSo": " here on the `viewport` so that when we call\r\n                        // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport\r\n                        // (independent of the scrollUpButton).\r\n                        position: ",
    "flex1ViewportShouldOnly": ",\r\n                        flex: 1,\r\n                        // Viewport should only be scrollable in the vertical direction.\r\n                        // This won",
    "llNeedToRevisitThis": "ll need to\r\n                        // revisit this if/when that is supported\r\n                        // https://developer.chrome.com/blog/vertical-form-controls\r\n                        overflow: ",
    "viewportpropsstyleOnscrollcomposeeventhandlersViewportpropsonscrollEventConst": ",\r\n                        ...viewportProps.style,\r\n                    }}\r\n                    onScroll={composeEventHandlers(\r\n                        viewportProps.onScroll,\r\n                        (event) => {\r\n                            const viewport = event.currentTarget;\r\n                            const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;\r\n                            if (shouldExpandOnScrollRef?.current && contentWrapper) {\r\n                                const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);\r\n                                if (scrolledBy > 0) {\r\n                                    const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\r\n                                    const cssMinHeight = parseFloat(contentWrapper.style.minHeight);\r\n                                    const cssHeight = parseFloat(contentWrapper.style.height);\r\n                                    const prevHeight = Math.max(cssMinHeight, cssHeight);\r\n\r\n                                    if (prevHeight < availableHeight) {\r\n                                        const nextHeight = prevHeight + scrolledBy;\r\n                                        const clampedNextHeight = Math.min(availableHeight, nextHeight);\r\n                                        const heightDiff = nextHeight - clampedNextHeight;\r\n\r\n                                        contentWrapper.style.height = clampedNextHeight + ",
    "ifContentwrapperstylebottom": ";\r\n                                        if (contentWrapper.style.bottom === ",
    "viewportscrolltopHeightdiff0Heightdiff0": ") {\r\n                                            viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;\r\n                                            contentWrapper.style.justifyContent = ",
    "ensureTheContentStaysPinned": "; // ensure the content stays pinned to the bottom\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            prevScrollTopRef.current = viewport.scrollTop;\r\n                        }\r\n                    )}\r\n                />\r\n            </Collection.Slot>\r\n        </>);\r\n    }\r\n);\r\nSelectViewport.displayName = VIEWPORT_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectGroup\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst GROUP_NAME = ",
    "typeSelectgroupcontextvalueIdStringConst": ";\r\n\r\ntype SelectGroupContextValue = { id: string; };\r\n\r\nconst [SelectGroupContextProvider, useSelectGroupContext] = createSelectContext<SelectGroupContextValue>(GROUP_NAME);\r\n\r\ntype SelectGroupElement = React.ElementRef<typeof Primitive.div>;\r\ninterface SelectGroupProps extends PrimitiveDivProps { }\r\n\r\nconst SelectGroup = React.forwardRef<SelectGroupElement, SelectGroupProps>(\r\n    (props: ScopedProps<SelectGroupProps>, forwardedRef) => {\r\n        const { __scopeSelect, ...groupProps } = props;\r\n        const groupId = useId();\r\n        return (\r\n            <SelectGroupContextProvider scope={__scopeSelect} id={groupId}>\r\n                <Primitive.div role=\"group\" aria-labelledby={groupId} {...groupProps} ref={forwardedRef} />\r\n            </SelectGroupContextProvider>\r\n        );\r\n    }\r\n);\r\n\r\nSelectGroup.displayName = GROUP_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectLabel\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst LABEL_NAME = ",
    "typeSelectlabelelementReactelementreftypeofPrimitivedivInterface": ";\r\n\r\ntype SelectLabelElement = React.ElementRef<typeof Primitive.div>;\r\ninterface SelectLabelProps extends PrimitiveDivProps { }\r\n\r\nconst SelectLabel = React.forwardRef<SelectLabelElement, SelectLabelProps>(\r\n    (props: ScopedProps<SelectLabelProps>, forwardedRef) => {\r\n        const { __scopeSelect, ...labelProps } = props;\r\n        const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);\r\n        return <Primitive.div id={groupContext.id} {...labelProps} ref={forwardedRef} />;\r\n    }\r\n);\r\nSelectLabel.displayName = LABEL_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectItem\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ITEM_NAME = ",
    "typeSelectitemcontextvalueValueStringDisabled": ";\r\n\r\ntype SelectItemContextValue = {\r\n    value: string;\r\n    disabled: boolean;\r\n    textId: string;\r\n    isSelected: boolean;\r\n    onItemTextChange(node: SelectItemTextElement | null): void;\r\n};\r\n\r\nconst [SelectItemContextProvider, useSelectItemContext] = createSelectContext<SelectItemContextValue>(ITEM_NAME);\r\n\r\ntype SelectItemElement = React.ElementRef<typeof Primitive.div>;\r\ninterface SelectItemProps extends PrimitiveDivProps {\r\n    value: string;\r\n    disabled?: boolean;\r\n    textValue?: string;\r\n}\r\n\r\nconst SelectItem = React.forwardRef<SelectItemElement, SelectItemProps>(\r\n    (props: ScopedProps<SelectItemProps>, forwardedRef) => {\r\n        const { __scopeSelect, value, disabled = false, textValue: textValueProp, ...itemProps } = props;\r\n        const context = useSelectContext(ITEM_NAME, __scopeSelect);\r\n        const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);\r\n        const isSelected = context.value === value;\r\n        const [textValue, setTextValue] = React.useState(textValueProp ?? ",
    "constIsfocusedSetisfocusedReactusestatefalseConst": ");\r\n        const [isFocused, setIsFocused] = React.useState(false);\r\n        const composedRefs = useComposedRefs(forwardedRef, (node) => contentContext.itemRefCallback?.(node, value, disabled));\r\n        const textId = useId();\r\n        const pointerTypeRef = React.useRef<React.PointerEvent[",
    "constHandleselectIfDisabledContextonvaluechangevalue": ");\r\n\r\n        const handleSelect = () => {\r\n            if (!disabled) {\r\n                context.onValueChange(value);\r\n                context.onOpenChange(false);\r\n            }\r\n        };\r\n\r\n        if (value === ",
    "throwNewError": ") {\r\n            throw new Error(",
    "returnSelectitemcontextproviderScope__scopeselectValuevalueDisableddisabled": ");\r\n        }\r\n\r\n        return (\r\n            <SelectItemContextProvider\r\n                scope={__scopeSelect}\r\n                value={value}\r\n                disabled={disabled}\r\n                textId={textId}\r\n                isSelected={isSelected}\r\n                onItemTextChange={React.useCallback((node) => { setTextValue((prevTextValue) => prevTextValue || (node?.textContent ?? ",
    "trimCollectionitemslotScope__scopeselectValuevalueDisableddisabled": ").trim()); }, [])}\r\n            >\r\n                <Collection.ItemSlot\r\n                    scope={__scopeSelect}\r\n                    value={value}\r\n                    disabled={disabled}\r\n                    textValue={textValue}\r\n                >\r\n                    <Primitive.div\r\n                        role=\"option\"\r\n                        aria-labelledby={textId}\r\n                        data-highlighted={isFocused ? ",
    "undefinedAriaselectedisselectedIsfocusedIsfocusedCaveat": " : undefined}\r\n                        aria-selected={isSelected && isFocused} // `isFocused` caveat fixes stuttering in VoiceOver\r\n                        data-state={isSelected ? ",
    "ariadisableddisabledUndefinedDatadisableddisabled": "}\r\n                        aria-disabled={disabled || undefined}\r\n                        data-disabled={disabled ? ",
    "undefinedTabindexdisabledUndefined1Itemprops": " : undefined}\r\n                        tabIndex={disabled ? undefined : -1}\r\n                        {...itemProps}\r\n                        ref={composedRefs}\r\n                        onFocus={composeEventHandlers(itemProps.onFocus, () => setIsFocused(true))}\r\n                        onBlur={composeEventHandlers(itemProps.onBlur, () => setIsFocused(false))}\r\n                        onClick={composeEventHandlers(itemProps.onClick, () => { if (pointerTypeRef.current !== ",
    "handleselectOpenOnClickWhen": ") handleSelect(); })} // Open on click when using a touch or pen device\r\n                        onPointerUp={composeEventHandlers(itemProps.onPointerUp, () => {\r\n                            // Using a mouse you should be able to do pointer down, move through\r\n                            // the list, and release the pointer over the item to select it.\r\n                            if (pointerTypeRef.current === ",
    "handleselectOnpointerdowncomposeeventhandlersitempropsonpointerdownEventPointertyperefcurrentEventpointertype": ") handleSelect();\r\n                        })}\r\n                        onPointerDown={composeEventHandlers(itemProps.onPointerDown, (event) => {\r\n                            pointerTypeRef.current = event.pointerType;\r\n                        })}\r\n                        onPointerMove={composeEventHandlers(itemProps.onPointerMove, (event) => {\r\n                            // Remember pointer type when sliding over to this item from another one\r\n                            pointerTypeRef.current = event.pointerType;\r\n                            if (disabled) {\r\n                                contentContext.onItemLeave?.();\r\n                            } else if (pointerTypeRef.current === ",
    "evenThoughSafariDoesn": ") {\r\n                                // even though safari doesn",
    "sAcceptableAsItOnly": "s acceptable\r\n                                // as it only means it might scroll a few pixels when using the pointer.\r\n                                event.currentTarget.focus({ preventScroll: true });\r\n                            }\r\n                        })}\r\n                        onPointerLeave={composeEventHandlers(itemProps.onPointerLeave, (event) => {\r\n                            if (event.currentTarget === document.activeElement) {\r\n                                contentContext.onItemLeave?.();\r\n                            }\r\n                        })}\r\n                        onKeyDown={composeEventHandlers(itemProps.onKeyDown, (event) => {\r\n                            const isTypingAhead = contentContext.searchRef?.current !== ",
    "ifIstypingaheadEventkey": ";\r\n                            if (isTypingAhead && event.key === ",
    "returnIfSelection_keysincludeseventkeyHandleselectPrevent": ") return;\r\n                            if (SELECTION_KEYS.includes(event.key)) handleSelect();\r\n                            // prevent page scroll if using the space key to select an item\r\n                            if (event.key === ",
    "eventpreventdefaultCollectionitemslotSelectitemcontextproviderSelectitemdisplaynameItem_name": ") event.preventDefault();\r\n                        })}\r\n                    />\r\n                </Collection.ItemSlot>\r\n            </SelectItemContextProvider>\r\n        );\r\n    }\r\n);\r\n\r\nSelectItem.displayName = ITEM_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectItemText\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ITEM_TEXT_NAME = ",
    "typeSelectitemtextelementReactelementreftypeofPrimitivespanInterface": ";\r\n\r\ntype SelectItemTextElement = React.ElementRef<typeof Primitive.span>;\r\ninterface SelectItemTextProps extends PrimitiveSpanProps { }\r\n\r\nconst SelectItemText = React.forwardRef<SelectItemTextElement, SelectItemTextProps>(\r\n    (props: ScopedProps<SelectItemTextProps>, forwardedRef) => {\r\n        // We ignore `className` and `style` as this part shouldn",
    "tWorkOtherwiseReturnVisuallyhidden": "t work otherwise.\r\n         */\r\n        return (\r\n            <VisuallyHidden asChild>\r\n                <select {...selectProps} ref={composedRefs} defaultValue={value} />\r\n            </VisuallyHidden>\r\n        );\r\n    }\r\n);\r\nBubbleSelect.displayName = ",
    "functionUsetypeaheadsearchonsearchchangeSearchStringVoid": ";\r\n\r\nfunction useTypeaheadSearch(onSearchChange: (search: string) => void) {\r\n    const handleSearchChange = useCallbackRef(onSearchChange);\r\n    const searchRef = React.useRef(",
    "constTimerrefReactuseref0ConstHandletypeaheadsearch": ");\r\n    const timerRef = React.useRef(0);\r\n\r\n    const handleTypeaheadSearch = React.useCallback(\r\n        (key: string) => {\r\n            const search = searchRef.current + key;\r\n            handleSearchChange(search);\r\n\r\n            (function updateSearch(value: string) {\r\n                searchRef.current = value;\r\n                window.clearTimeout(timerRef.current);\r\n                // Reset `searchRef` 1 second after it was last updated\r\n                if (value !== ",
    "timerrefcurrentWindowsettimeoutUpdatesearch": ") timerRef.current = window.setTimeout(() => updateSearch(",
    "1000SearchHandlesearchchangeConstResettypeahead": "), 1000);\r\n            })(search);\r\n        }, [handleSearchChange]\r\n    );\r\n\r\n    const resetTypeahead = React.useCallback(() => { searchRef.current = ",
    "windowcleartimeouttimerrefcurrentReactuseeffectReturnWindowcleartimeouttimerrefcurrentReturn": "; window.clearTimeout(timerRef.current); }, []);\r\n\r\n    React.useEffect(() => {\r\n        return () => window.clearTimeout(timerRef.current);\r\n    }, []);\r\n\r\n    return [searchRef, handleTypeaheadSearch, resetTypeahead] as const;\r\n}\r\n\r\n/**\r\n * This is the \"meat\" of the typeahead matching logic. It takes in a list of items,\r\n * the search and the current item, and returns the next item (or `undefined`).\r\n *\r\n * We normalize the search because if a user has repeatedly pressed a character,\r\n * we want the exact same behavior as if we only had that one character\r\n * (ie. cycle through items starting with that character)\r\n *\r\n * We also reorder the items by wrapping the array around the current item.\r\n * This is so we always look forward from the current item, and picking the first\r\n * item will always be the correct one.\r\n *\r\n * Finally, if the normalized search is exactly one character, we exclude the\r\n * current item from the values because otherwise it would be the first to match always\r\n * and focus would never move. This is as opposed to the regular case, where we\r\n * don",
    "contentwrapperstyleminheightMincontentheightPxContentwrapperstylemaxheightAvailableheight": ";\r\n                contentWrapper.style.minHeight = minContentHeight + 'px';\r\n                contentWrapper.style.maxHeight = availableHeight + 'px';\r\n                // -----------------------------------------------------------------------------------------\r\n\r\n                onPlaced?.();\r\n\r\n                // we don't want the initial scroll position adjustment to trigger \"expand on scroll\"\r\n                // so we explicitly turn it on only after they've registered.\r\n                requestAnimationFrame(() => (shouldExpandOnScrollRef.current = true));\r\n            }\r\n        }, [\r\n            getItems,\r\n            context.trigger,\r\n            context.valueNode,\r\n            contentWrapper,\r\n            content,\r\n            viewport,\r\n            selectedItem,\r\n            selectedItemText,\r\n            context.dir,\r\n            onPlaced,\r\n        ]);\r\n\r\n        useLayoutEffect(() => position(), [position]);\r\n\r\n        // copy z-index from content to wrapper\r\n        const [contentZIndex, setContentZIndex] = React.useState<string>();\r\n        useLayoutEffect(\r\n            () => {\r\n                if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\r\n            }, [content]\r\n        );\r\n\r\n        // When the viewport becomes scrollable at the top, the scroll up button will mount.\r\n        // Because it is part of the normal flow, it will push down the viewport, thus throwing our\r\n        // trigger => selectedItem alignment off by the amount the viewport was pushed down.\r\n        // We wait for this to happen and then re-run the positining logic one more time to account for it.\r\n        const handleScrollButtonChange = React.useCallback(\r\n            (node: SelectScrollButtonImplElement | null) => {\r\n                if (node && shouldRepositionRef.current === true) {\r\n                    position();\r\n                    focusSelectedItem?.();\r\n                    shouldRepositionRef.current = false;\r\n                }\r\n            }, [position, focusSelectedItem]\r\n        );\r\n\r\n        return (\r\n            <SelectViewportProvider\r\n                scope={__scopeSelect}\r\n                contentWrapper={contentWrapper}\r\n                shouldExpandOnScrollRef={shouldExpandOnScrollRef}\r\n                onScrollButtonChange={handleScrollButtonChange}\r\n            >\r\n                <div ref={setContentWrapper} style={{ display: 'flex', flexDirection: 'column', position: 'fixed', zIndex: contentZIndex, }}>\r\n                    <Primitive.div\r\n                        {...popperProps}\r\n                        ref={composedRefs}\r\n                        style={{\r\n                            // When we get the height of the content, it includes borders. If we were to set\r\n                            // the height without having ",
    "itWouldBeTooBig": " it would be too big.\r\n                            boxSizing: 'border-box',\r\n                            maxHeight: '100%', // We need to ensure the content doesn't get taller than the wrapper\r\n                            ...popperProps.style,\r\n                        }}\r\n                    />\r\n                </div>\r\n            </SelectViewportProvider>\r\n        );\r\n    }\r\n);\r\nSelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectPopperPosition\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst POPPER_POSITION_NAME = 'SelectPopperPosition';\r\n\r\ntype SelectPopperPositionElement = React.ElementRef<typeof PopperPrimitive.Content>;\r\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\r\ninterface SelectPopperPositionProps extends PopperContentProps, SelectPopperPrivateProps { }\r\n\r\nconst SelectPopperPosition = React.forwardRef<SelectPopperPositionElement, SelectPopperPositionProps>(\r\n    (props: ScopedProps<SelectPopperPositionProps>, forwardedRef) => {\r\n        const { __scopeSelect, align = 'start', collisionPadding = CONTENT_MARGIN, ...popperProps } = props;\r\n        const popperScope = usePopperScope(__scopeSelect);\r\n        return (\r\n            <PopperPrimitive.Content\r\n                {...popperScope}\r\n                {...popperProps}\r\n                ref={forwardedRef}\r\n                align={align}\r\n                collisionPadding={collisionPadding}\r\n                style={{\r\n                    boxSizing: 'border-box', // Ensure border-box for floating-ui calculations\r\n                    ...popperProps.style,\r\n                    // re-namespace exposed content custom properties\r\n                    ...{\r\n                        '--radix-select-content-transform-origin': 'var(--radix-popper-transform-origin)',\r\n                        '--radix-select-content-available-width': 'var(--radix-popper-available-width)',\r\n                        '--radix-select-content-available-height': 'var(--radix-popper-available-height)',\r\n                        '--radix-select-trigger-width': 'var(--radix-popper-anchor-width)',\r\n                        '--radix-select-trigger-height': 'var(--radix-popper-anchor-height)',\r\n                    },\r\n                }}\r\n            />\r\n        );\r\n    }\r\n);\r\nSelectPopperPosition.displayName = POPPER_POSITION_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectViewport\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\ntype SelectViewportContextValue = {\r\n    contentWrapper?: HTMLDivElement | null;\r\n    shouldExpandOnScrollRef?: React.RefObject<boolean>;\r\n    onScrollButtonChange?: (node: SelectScrollButtonImplElement | null) => void;\r\n};\r\n\r\nconst [SelectViewportProvider, useSelectViewportContext] = createSelectContext<SelectViewportContextValue>(CONTENT_NAME, {});\r\n\r\nconst VIEWPORT_NAME = 'SelectViewport';\r\n\r\ntype SelectViewportElement = React.ElementRef<typeof Primitive.div>;\r\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\r\ninterface SelectViewportProps extends PrimitiveDivProps {\r\n    nonce?: string;\r\n}\r\n\r\nconst SelectViewport = React.forwardRef<SelectViewportElement, SelectViewportProps>(\r\n    (props: ScopedProps<SelectViewportProps>, forwardedRef) => {\r\n        const { __scopeSelect, nonce, ...viewportProps } = props;\r\n        const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);\r\n        const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);\r\n        const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);\r\n        const prevScrollTopRef = React.useRef(0);\r\n        return (<>\r\n            {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\r\n            <style\r\n                dangerouslySetInnerHTML={{\r\n                    __html: ",
    "noncenonceCollectionslotScope__scopeselectPrimitivedivDataradixselectviewport": ",\r\n                }}\r\n                nonce={nonce}\r\n            />\r\n            <Collection.Slot scope={__scopeSelect}>\r\n                <Primitive.div\r\n                    data-radix-select-viewport=\"\"\r\n                    role=\"presentation\"\r\n                    {...viewportProps}\r\n                    ref={composedRefs}\r\n                    style={{\r\n                        // we use position: 'relative' here on the ",
    "soThatWhenWeCall": " so that when we call\r\n                        // ",
    "inCalculationsTheOffsetIs": " in calculations, the offset is relative to the viewport\r\n                        // (independent of the scrollUpButton).\r\n                        position: 'relative',\r\n                        flex: 1,\r\n                        // Viewport should only be scrollable in the vertical direction.\r\n                        // This won't work in vertical writing modes, so we'll need to\r\n                        // revisit this if/when that is supported\r\n                        // https://developer.chrome.com/blog/vertical-form-controls\r\n                        overflow: 'hidden auto',\r\n                        ...viewportProps.style,\r\n                    }}\r\n                    onScroll={composeEventHandlers(\r\n                        viewportProps.onScroll,\r\n                        (event) => {\r\n                            const viewport = event.currentTarget;\r\n                            const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;\r\n                            if (shouldExpandOnScrollRef?.current && contentWrapper) {\r\n                                const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);\r\n                                if (scrolledBy > 0) {\r\n                                    const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\r\n                                    const cssMinHeight = parseFloat(contentWrapper.style.minHeight);\r\n                                    const cssHeight = parseFloat(contentWrapper.style.height);\r\n                                    const prevHeight = Math.max(cssMinHeight, cssHeight);\r\n\r\n                                    if (prevHeight < availableHeight) {\r\n                                        const nextHeight = prevHeight + scrolledBy;\r\n                                        const clampedNextHeight = Math.min(availableHeight, nextHeight);\r\n                                        const heightDiff = nextHeight - clampedNextHeight;\r\n\r\n                                        contentWrapper.style.height = clampedNextHeight + 'px';\r\n                                        if (contentWrapper.style.bottom === '0px') {\r\n                                            viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;\r\n                                            contentWrapper.style.justifyContent = 'flex-end'; // ensure the content stays pinned to the bottom\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            prevScrollTopRef.current = viewport.scrollTop;\r\n                        }\r\n                    )}\r\n                />\r\n            </Collection.Slot>\r\n        </>);\r\n    }\r\n);\r\nSelectViewport.displayName = VIEWPORT_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectGroup\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst GROUP_NAME = 'SelectGroup';\r\n\r\ntype SelectGroupContextValue = { id: string; };\r\n\r\nconst [SelectGroupContextProvider, useSelectGroupContext] = createSelectContext<SelectGroupContextValue>(GROUP_NAME);\r\n\r\ntype SelectGroupElement = React.ElementRef<typeof Primitive.div>;\r\ninterface SelectGroupProps extends PrimitiveDivProps { }\r\n\r\nconst SelectGroup = React.forwardRef<SelectGroupElement, SelectGroupProps>(\r\n    (props: ScopedProps<SelectGroupProps>, forwardedRef) => {\r\n        const { __scopeSelect, ...groupProps } = props;\r\n        const groupId = useId();\r\n        return (\r\n            <SelectGroupContextProvider scope={__scopeSelect} id={groupId}>\r\n                <Primitive.div role=\"group\" aria-labelledby={groupId} {...groupProps} ref={forwardedRef} />\r\n            </SelectGroupContextProvider>\r\n        );\r\n    }\r\n);\r\n\r\nSelectGroup.displayName = GROUP_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectLabel\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst LABEL_NAME = 'SelectLabel';\r\n\r\ntype SelectLabelElement = React.ElementRef<typeof Primitive.div>;\r\ninterface SelectLabelProps extends PrimitiveDivProps { }\r\n\r\nconst SelectLabel = React.forwardRef<SelectLabelElement, SelectLabelProps>(\r\n    (props: ScopedProps<SelectLabelProps>, forwardedRef) => {\r\n        const { __scopeSelect, ...labelProps } = props;\r\n        const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);\r\n        return <Primitive.div id={groupContext.id} {...labelProps} ref={forwardedRef} />;\r\n    }\r\n);\r\nSelectLabel.displayName = LABEL_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectItem\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ITEM_NAME = 'SelectItem';\r\n\r\ntype SelectItemContextValue = {\r\n    value: string;\r\n    disabled: boolean;\r\n    textId: string;\r\n    isSelected: boolean;\r\n    onItemTextChange(node: SelectItemTextElement | null): void;\r\n};\r\n\r\nconst [SelectItemContextProvider, useSelectItemContext] = createSelectContext<SelectItemContextValue>(ITEM_NAME);\r\n\r\ntype SelectItemElement = React.ElementRef<typeof Primitive.div>;\r\ninterface SelectItemProps extends PrimitiveDivProps {\r\n    value: string;\r\n    disabled?: boolean;\r\n    textValue?: string;\r\n}\r\n\r\nconst SelectItem = React.forwardRef<SelectItemElement, SelectItemProps>(\r\n    (props: ScopedProps<SelectItemProps>, forwardedRef) => {\r\n        const { __scopeSelect, value, disabled = false, textValue: textValueProp, ...itemProps } = props;\r\n        const context = useSelectContext(ITEM_NAME, __scopeSelect);\r\n        const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);\r\n        const isSelected = context.value === value;\r\n        const [textValue, setTextValue] = React.useState(textValueProp ?? '');\r\n        const [isFocused, setIsFocused] = React.useState(false);\r\n        const composedRefs = useComposedRefs(forwardedRef, (node) => contentContext.itemRefCallback?.(node, value, disabled));\r\n        const textId = useId();\r\n        const pointerTypeRef = React.useRef<React.PointerEvent['pointerType']>('touch');\r\n\r\n        const handleSelect = () => {\r\n            if (!disabled) {\r\n                context.onValueChange(value);\r\n                context.onOpenChange(false);\r\n            }\r\n        };\r\n\r\n        if (value === '') {\r\n            throw new Error('A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder.');\r\n        }\r\n\r\n        return (\r\n            <SelectItemContextProvider\r\n                scope={__scopeSelect}\r\n                value={value}\r\n                disabled={disabled}\r\n                textId={textId}\r\n                isSelected={isSelected}\r\n                onItemTextChange={React.useCallback((node) => { setTextValue((prevTextValue) => prevTextValue || (node?.textContent ?? '').trim()); }, [])}\r\n            >\r\n                <Collection.ItemSlot\r\n                    scope={__scopeSelect}\r\n                    value={value}\r\n                    disabled={disabled}\r\n                    textValue={textValue}\r\n                >\r\n                    <Primitive.div\r\n                        role=\"option\"\r\n                        aria-labelledby={textId}\r\n                        data-highlighted={isFocused ? '' : undefined}\r\n                        aria-selected={isSelected && isFocused} // ",
    "caveatFixesStutteringInVoiceover": " caveat fixes stuttering in VoiceOver\r\n                        data-state={isSelected ? 'checked' : 'unchecked'}\r\n                        aria-disabled={disabled || undefined}\r\n                        data-disabled={disabled ? '' : undefined}\r\n                        tabIndex={disabled ? undefined : -1}\r\n                        {...itemProps}\r\n                        ref={composedRefs}\r\n                        onFocus={composeEventHandlers(itemProps.onFocus, () => setIsFocused(true))}\r\n                        onBlur={composeEventHandlers(itemProps.onBlur, () => setIsFocused(false))}\r\n                        onClick={composeEventHandlers(itemProps.onClick, () => { if (pointerTypeRef.current !== 'mouse') handleSelect(); })} // Open on click when using a touch or pen device\r\n                        onPointerUp={composeEventHandlers(itemProps.onPointerUp, () => {\r\n                            // Using a mouse you should be able to do pointer down, move through\r\n                            // the list, and release the pointer over the item to select it.\r\n                            if (pointerTypeRef.current === 'mouse') handleSelect();\r\n                        })}\r\n                        onPointerDown={composeEventHandlers(itemProps.onPointerDown, (event) => {\r\n                            pointerTypeRef.current = event.pointerType;\r\n                        })}\r\n                        onPointerMove={composeEventHandlers(itemProps.onPointerMove, (event) => {\r\n                            // Remember pointer type when sliding over to this item from another one\r\n                            pointerTypeRef.current = event.pointerType;\r\n                            if (disabled) {\r\n                                contentContext.onItemLeave?.();\r\n                            } else if (pointerTypeRef.current === 'mouse') {\r\n                                // even though safari doesn't support this option, it's acceptable\r\n                                // as it only means it might scroll a few pixels when using the pointer.\r\n                                event.currentTarget.focus({ preventScroll: true });\r\n                            }\r\n                        })}\r\n                        onPointerLeave={composeEventHandlers(itemProps.onPointerLeave, (event) => {\r\n                            if (event.currentTarget === document.activeElement) {\r\n                                contentContext.onItemLeave?.();\r\n                            }\r\n                        })}\r\n                        onKeyDown={composeEventHandlers(itemProps.onKeyDown, (event) => {\r\n                            const isTypingAhead = contentContext.searchRef?.current !== '';\r\n                            if (isTypingAhead && event.key === ' ') return;\r\n                            if (SELECTION_KEYS.includes(event.key)) handleSelect();\r\n                            // prevent page scroll if using the space key to select an item\r\n                            if (event.key === ' ') event.preventDefault();\r\n                        })}\r\n                    />\r\n                </Collection.ItemSlot>\r\n            </SelectItemContextProvider>\r\n        );\r\n    }\r\n);\r\n\r\nSelectItem.displayName = ITEM_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectItemText\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ITEM_TEXT_NAME = 'SelectItemText';\r\n\r\ntype SelectItemTextElement = React.ElementRef<typeof Primitive.span>;\r\ninterface SelectItemTextProps extends PrimitiveSpanProps { }\r\n\r\nconst SelectItemText = React.forwardRef<SelectItemTextElement, SelectItemTextProps>(\r\n    (props: ScopedProps<SelectItemTextProps>, forwardedRef) => {\r\n        // We ignore ",
    "asThisPartShouldntBe": " as this part shouldn't be styled.\r\n        const { __scopeSelect, className, style, ...itemTextProps } = props;\r\n        const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);\r\n        const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);\r\n        const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);\r\n        const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);\r\n        const [itemTextNode, setItemTextNode] = React.useState<SelectItemTextElement | null>(null);\r\n        const composedRefs = useComposedRefs(\r\n            forwardedRef,\r\n            (node) => setItemTextNode(node),\r\n            itemContext.onItemTextChange,\r\n            (node) => contentContext.itemTextRefCallback?.(node, itemContext.value, itemContext.disabled)\r\n        );\r\n\r\n        const textContent = itemTextNode?.textContent;\r\n        const nativeOption = React.useMemo(\r\n            () => (\r\n                <option key={itemContext.value} value={itemContext.value} disabled={itemContext.disabled}>\r\n                    {textContent}\r\n                </option>\r\n            ),\r\n            [itemContext.disabled, itemContext.value, textContent]\r\n        );\r\n\r\n        const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;\r\n        useLayoutEffect(\r\n            () => {\r\n                onNativeOptionAdd(nativeOption);\r\n                return () => onNativeOptionRemove(nativeOption);\r\n            }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]\r\n        );\r\n\r\n        return (<>\r\n            <Primitive.span id={itemContext.textId} {...itemTextProps} ref={composedRefs} />\r\n\r\n            {/* Portal the select item text into the trigger value node */}\r\n            {itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren\r\n                ? ReactDOM.createPortal(itemTextProps.children, context.valueNode)\r\n                : null}\r\n        </>);\r\n    }\r\n);\r\nSelectItemText.displayName = ITEM_TEXT_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectItemIndicator\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ITEM_INDICATOR_NAME = 'SelectItemIndicator';\r\n\r\ntype SelectItemIndicatorElement = React.ElementRef<typeof Primitive.span>;\r\ninterface SelectItemIndicatorProps extends PrimitiveSpanProps { }\r\n\r\nconst SelectItemIndicator = React.forwardRef<SelectItemIndicatorElement, SelectItemIndicatorProps>(\r\n    (props: ScopedProps<SelectItemIndicatorProps>, forwardedRef) => {\r\n        const { __scopeSelect, ...itemIndicatorProps } = props;\r\n        const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);\r\n        return itemContext.isSelected ? (\r\n            <Primitive.span aria-hidden {...itemIndicatorProps} ref={forwardedRef} />\r\n        ) : null;\r\n    }\r\n);\r\nSelectItemIndicator.displayName = ITEM_INDICATOR_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectScrollUpButton\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst SCROLL_UP_BUTTON_NAME = 'SelectScrollUpButton';\r\n\r\ntype SelectScrollUpButtonElement = SelectScrollButtonImplElement;\r\ninterface SelectScrollUpButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> { }\r\n\r\nconst SelectScrollUpButton = React.forwardRef<SelectScrollUpButtonElement, SelectScrollUpButtonProps>(\r\n    (props: ScopedProps<SelectScrollUpButtonProps>, forwardedRef) => {\r\n        const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\r\n        const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\r\n        const [canScrollUp, setCanScrollUp] = React.useState(false);\r\n        const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\r\n\r\n        useLayoutEffect(\r\n            () => {\r\n                if (contentContext.viewport && contentContext.isPositioned) {\r\n                    const viewport = contentContext.viewport;\r\n                    function handleScroll() {\r\n                        const canScrollUp = viewport.scrollTop > 0;\r\n                        setCanScrollUp(canScrollUp);\r\n                    }\r\n                    handleScroll();\r\n                    viewport.addEventListener('scroll', handleScroll);\r\n                    return () => viewport.removeEventListener('scroll', handleScroll);\r\n                }\r\n            }, [contentContext.viewport, contentContext.isPositioned]\r\n        );\r\n\r\n        return (\r\n            canScrollUp\r\n                ? (\r\n                    <SelectScrollButtonImpl\r\n                        {...props}\r\n                        ref={composedRefs}\r\n                        onAutoScroll={() => {\r\n                            const { viewport, selectedItem } = contentContext;\r\n                            if (viewport && selectedItem) {\r\n                                viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;\r\n                            }\r\n                        }}\r\n                    />\r\n                )\r\n                : null\r\n        );\r\n    }\r\n);\r\nSelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectScrollDownButton\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst SCROLL_DOWN_BUTTON_NAME = 'SelectScrollDownButton';\r\n\r\ntype SelectScrollDownButtonElement = SelectScrollButtonImplElement;\r\ninterface SelectScrollDownButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> { }\r\n\r\nconst SelectScrollDownButton = React.forwardRef<SelectScrollDownButtonElement, SelectScrollDownButtonProps>(\r\n    (props: ScopedProps<SelectScrollDownButtonProps>, forwardedRef) => {\r\n        const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\r\n        const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\r\n        const [canScrollDown, setCanScrollDown] = React.useState(false);\r\n        const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\r\n\r\n        useLayoutEffect(() => {\r\n            if (contentContext.viewport && contentContext.isPositioned) {\r\n                const viewport = contentContext.viewport;\r\n                function handleScroll() {\r\n                    const maxScroll = viewport.scrollHeight - viewport.clientHeight;\r\n                    // we use Math.ceil here because if the UI is zoomed-in\r\n                    // ",
    "isNotAlwaysReportedAs": " is not always reported as an integer\r\n                    const canScrollDown = Math.ceil(viewport.scrollTop) < maxScroll;\r\n                    setCanScrollDown(canScrollDown);\r\n                }\r\n                handleScroll();\r\n                viewport.addEventListener('scroll', handleScroll);\r\n                return () => viewport.removeEventListener('scroll', handleScroll);\r\n            }\r\n        }, [contentContext.viewport, contentContext.isPositioned]);\r\n\r\n        return (\r\n            canScrollDown\r\n                ? (\r\n                    <SelectScrollButtonImpl\r\n                        {...props}\r\n                        ref={composedRefs}\r\n                        onAutoScroll={() => {\r\n                            const { viewport, selectedItem } = contentContext;\r\n                            if (viewport && selectedItem) {\r\n                                viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;\r\n                            }\r\n                        }}\r\n                    />\r\n                )\r\n                : null\r\n        );\r\n    }\r\n);\r\nSelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;\r\n\r\ntype SelectScrollButtonImplElement = React.ElementRef<typeof Primitive.div>;\r\ninterface SelectScrollButtonImplProps extends PrimitiveDivProps {\r\n    onAutoScroll(): void;\r\n}\r\n\r\nconst SelectScrollButtonImpl = React.forwardRef<SelectScrollButtonImplElement, SelectScrollButtonImplProps>(\r\n    (props: ScopedProps<SelectScrollButtonImplProps>, forwardedRef) => {\r\n        const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;\r\n        const contentContext = useSelectContentContext('SelectScrollButton', __scopeSelect);\r\n        const autoScrollTimerRef = React.useRef<number | null>(null);\r\n        const getItems = useCollection(__scopeSelect);\r\n\r\n        const clearAutoScrollTimer = React.useCallback(\r\n            () => {\r\n                if (autoScrollTimerRef.current !== null) {\r\n                    window.clearInterval(autoScrollTimerRef.current);\r\n                    autoScrollTimerRef.current = null;\r\n                }\r\n            }, []\r\n        );\r\n\r\n        React.useEffect(\r\n            () => {\r\n                return () => clearAutoScrollTimer();\r\n            }, [clearAutoScrollTimer]\r\n        );\r\n\r\n        // When the viewport becomes scrollable on either side, the relevant scroll button will mount.\r\n        // Because it is part of the normal flow, it will push down (top button) or shrink (bottom button)\r\n        // the viewport, potentially causing the active item to now be partially out of view.\r\n        // We re-run the ",
    "logicToMakeSureIt": " logic to make sure it stays within the viewport.\r\n        useLayoutEffect(\r\n            () => {\r\n                const activeItem = getItems().find((item) => item.ref.current === document.activeElement);\r\n                activeItem?.ref.current?.scrollIntoView({ block: 'nearest' });\r\n            }, [getItems]\r\n        );\r\n\r\n        return (\r\n            <Primitive.div\r\n                aria-hidden\r\n                {...scrollIndicatorProps}\r\n                ref={forwardedRef}\r\n                style={{ flexShrink: 0, ...scrollIndicatorProps.style }}\r\n                onPointerDown={composeEventHandlers(scrollIndicatorProps.onPointerDown, () => {\r\n                    if (autoScrollTimerRef.current === null) {\r\n                        autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\r\n                    }\r\n                })}\r\n                onPointerMove={composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {\r\n                    contentContext.onItemLeave?.();\r\n                    if (autoScrollTimerRef.current === null) {\r\n                        autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\r\n                    }\r\n                })}\r\n                onPointerLeave={composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {\r\n                    clearAutoScrollTimer();\r\n                })}\r\n            />\r\n        );\r\n    });\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectSeparator\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst SEPARATOR_NAME = 'SelectSeparator';\r\n\r\ntype SelectSeparatorElement = React.ElementRef<typeof Primitive.div>;\r\ninterface SelectSeparatorProps extends PrimitiveDivProps { }\r\n\r\nconst SelectSeparator = React.forwardRef<SelectSeparatorElement, SelectSeparatorProps>(\r\n    (props: ScopedProps<SelectSeparatorProps>, forwardedRef) => {\r\n        const { __scopeSelect, ...separatorProps } = props;\r\n        return <Primitive.div aria-hidden {...separatorProps} ref={forwardedRef} />;\r\n    }\r\n);\r\nSelectSeparator.displayName = SEPARATOR_NAME;\r\n\r\n/* -------------------------------------------------------------------------------------------------\r\n * SelectArrow\r\n * -----------------------------------------------------------------------------------------------*/\r\n\r\nconst ARROW_NAME = 'SelectArrow';\r\n\r\ntype SelectArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\r\ntype PopperArrowProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\r\ninterface SelectArrowProps extends PopperArrowProps { }\r\n\r\nconst SelectArrow = React.forwardRef<SelectArrowElement, SelectArrowProps>(\r\n    (props: ScopedProps<SelectArrowProps>, forwardedRef) => {\r\n        const { __scopeSelect, ...arrowProps } = props;\r\n        const popperScope = usePopperScope(__scopeSelect);\r\n        const context = useSelectContext(ARROW_NAME, __scopeSelect);\r\n        const contentContext = useSelectContentContext(ARROW_NAME, __scopeSelect);\r\n        return context.open && contentContext.position === 'popper' ? (\r\n            <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />\r\n        ) : null;\r\n    }\r\n);\r\nSelectArrow.displayName = ARROW_NAME;\r\n\r\n/* -----------------------------------------------------------------------------------------------*/\r\n\r\nfunction shouldShowPlaceholder(value?: string) {\r\n    return value === '' || value === undefined;\r\n}\r\n\r\nconst BubbleSelect = React.forwardRef<HTMLSelectElement, React.ComponentPropsWithoutRef<'select'>>(\r\n    (props, forwardedRef) => {\r\n        const { value, ...selectProps } = props;\r\n        const ref = React.useRef<HTMLSelectElement>(null);\r\n        const composedRefs = useComposedRefs(forwardedRef, ref);\r\n        const prevValue = usePrevious(value);\r\n\r\n        // Bubble value change to parents (e.g form change event)\r\n        React.useEffect(\r\n            () => {\r\n                const select = ref.current!;\r\n                const selectProto = window.HTMLSelectElement.prototype;\r\n                const descriptor = Object.getOwnPropertyDescriptor(selectProto, 'value') as PropertyDescriptor;\r\n                const setValue = descriptor.set;\r\n                if (prevValue !== value && setValue) {\r\n                    const event = new Event('change', { bubbles: true });\r\n                    setValue.call(select, value);\r\n                    select.dispatchEvent(event);\r\n                }\r\n            }, [prevValue, value]\r\n        );\r\n\r\n        /**\r\n         * We purposefully use a ",
    "hereToSupportFormAutofill": " here to support form autofill as much\r\n         * as possible.\r\n         *\r\n         * We purposefully do not add the ",
    "attributeHereToAllowThe": " attribute here to allow the value\r\n         * to be set programmatically and bubble to any parent form ",
    "eventAddingThe": " event.\r\n         * Adding the ",
    "willCauseReactToConsider": " will cause React to consider the programmatic\r\n         * dispatch a duplicate and it will get swallowed.\r\n         *\r\n         * We use ",
    "ratherThan": " rather than ",
    "becauseSafariAutofillWontWork": " because Safari autofill\r\n         * won't work otherwise.\r\n         */\r\n        return (\r\n            <VisuallyHidden asChild>\r\n                <select {...selectProps} ref={composedRefs} defaultValue={value} />\r\n            </VisuallyHidden>\r\n        );\r\n    }\r\n);\r\nBubbleSelect.displayName = 'BubbleSelect';\r\n\r\nfunction useTypeaheadSearch(onSearchChange: (search: string) => void) {\r\n    const handleSearchChange = useCallbackRef(onSearchChange);\r\n    const searchRef = React.useRef('');\r\n    const timerRef = React.useRef(0);\r\n\r\n    const handleTypeaheadSearch = React.useCallback(\r\n        (key: string) => {\r\n            const search = searchRef.current + key;\r\n            handleSearchChange(search);\r\n\r\n            (function updateSearch(value: string) {\r\n                searchRef.current = value;\r\n                window.clearTimeout(timerRef.current);\r\n                // Reset ",
    "1SecondAfterItWas": " 1 second after it was last updated\r\n                if (value !== '') timerRef.current = window.setTimeout(() => updateSearch(''), 1000);\r\n            })(search);\r\n        }, [handleSearchChange]\r\n    );\r\n\r\n    const resetTypeahead = React.useCallback(() => { searchRef.current = ''; window.clearTimeout(timerRef.current); }, []);\r\n\r\n    React.useEffect(() => {\r\n        return () => window.clearTimeout(timerRef.current);\r\n    }, []);\r\n\r\n    return [searchRef, handleTypeaheadSearch, resetTypeahead] as const;\r\n}\r\n\r\n/**\r\n * This is the \"meat\" of the typeahead matching logic. It takes in a list of items,\r\n * the search and the current item, and returns the next item (or ",
    "weNormalizeTheSearchBecause": ").\r\n *\r\n * We normalize the search because if a user has repeatedly pressed a character,\r\n * we want the exact same behavior as if we only had that one character\r\n * (ie. cycle through items starting with that character)\r\n *\r\n * We also reorder the items by wrapping the array around the current item.\r\n * This is so we always look forward from the current item, and picking the first\r\n * item will always be the correct one.\r\n *\r\n * Finally, if the normalized search is exactly one character, we exclude the\r\n * current item from the values because otherwise it would be the first to match always\r\n * and focus would never move. This is as opposed to the regular case, where we\r\n * don't want focus to move if the current item still matches.\r\n */\r\nfunction findNextItem<T extends { textValue: string; }>(items: T[], search: string, currentItem?: T) {\r\n    const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\r\n    const normalizedSearch = isRepeated ? search[0] : search;\r\n    const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;\r\n    let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));\r\n    const excludeCurrentItem = normalizedSearch.length === 1;\r\n    if (excludeCurrentItem) wrappedItems = wrappedItems.filter((v) => v !== currentItem);\r\n    const nextItem = wrappedItems.find((item) => item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase()));\r\n    return nextItem !== currentItem ? nextItem : undefined;\r\n}\r\n\r\n/**\r\n * Wraps an array around itself at a given start index\r\n * Example: "
  },
  "src/renderer/src/ui/local-ui/srcoll-area-pos.tsx": {
    "howToPreserveScrollPosition": "How to preserve scroll position of shadcn ScrollArea"
  },
  "src/renderer/src/ui/local-ui/text-hover-effect.tsx": {
    "useClient": "use client",
    "00300100": "0 0 300 100",
    "yellow500fff400Red500ea3939Blue500395eeaCyan50039ead7": "[--yellow-500:#fff400] [--red-500:#ea3939] [--blue-500:#395eea] [--cyan-500:#39ead7]",
    "varyellow500": "var(--yellow-500)",
    "varred500": "var(--red-500)",
    "varblue500": "var(--blue-500)",
    "varcyan500": "var(--cyan-500)",
    "varviolet500": "var(--violet-500)",
    "urlrevealmask": "url(#revealMask)",
    "fonthelveticaFontboldStrokeneutral200Darkstrokeneutral800Filltransparent": "font-[helvetica] font-bold stroke-neutral-200 dark:stroke-neutral-800 fill-transparent text-7xl  ",
    "fonthelveticaFontboldFilltransparentText7xlStrokeneutral200": "font-[helvetica] font-bold fill-transparent text-7xl   stroke-neutral-200 dark:stroke-neutral-800",
    "urltextgradient": "url(#textGradient)",
    "urltextmask": "url(#textMask)",
    "fonthelveticaFontboldFilltransparentText7xl": "font-[helvetica] font-bold fill-transparent text-7xl",
    "cy": ",\n                    cy: "
  },
  "src/renderer/src/ui/motion-primitives/1-accordion.tsx": {
    "useClient": "use client",
    "useaccordionMustBeUsedWithin": "useAccordion must be used within an AccordionProvider"
  },
  "src/renderer/src/ui/motion-primitives/8-nun-accordion-test.tsx": {
    "wfullPy05TextleftTextzinc950Darktextzinc50": "w-full py-0.5 text-left text-zinc-950 dark:text-zinc-50",
    "ml2Textzinc950Darktextzinc50": "ml-2 text-zinc-950 dark:text-zinc-50",
    "pl6Pr2Textzinc500Darktextzinc400": "pl-6 pr-2 text-zinc-500 dark:text-zinc-400",
    "h4W4Textzinc950TransitiontransformDuration200": "h-4 w-4 text-zinc-950 transition-transform duration-200 group-data-expanded:rotate-90 dark:text-zinc-50"
  },
  "src/renderer/src/ui/shadcn/accordion.tsx": {
    "radixuireactaccordion": "@radix-ui/react-accordion",
    "radixuireacticons": "@radix-ui/react-icons",
    "constLeftdownclasses": ";\r\n\r\nconst leftDownClasses = ",
    "customizationDivchildrendivCanBeAccessed": ";\r\n\r\n/**\r\n * Customization:\r\n * ``<div>{children}</div>`` can be accessed from AccordionTrigger as className=",
    "constAccordiontriggerForwardrefelementreftypeofPrimtriggerAccordiontriggerprops": "\r\n */\r\nconst AccordionTrigger = forwardRef<ElementRef<typeof Prim.Trigger>, AccordionTriggerProps>(\r\n    ({ className, children, iconFirst, leftDown, ...rest }, ref) => {\r\n        const Icon = <ChevronDownIcon className=",
    "returnPrimheaderClassname": " />;\r\n        return (\r\n            <Prim.Header className=",
    "primtriggerRefrefClassnamecnaccordiontriggerclassesIconfirst": ">\r\n                <Prim.Trigger\r\n                    ref={ref}\r\n                    className={cn(AccordionTriggerClasses, iconFirst && ",
    "leftdownLeftdownclassesClassnameRestIconfirst": ", leftDown && leftDownClasses, className)}\r\n                    {...rest}\r\n                >\r\n                    {iconFirst && Icon}\r\n                    <div>\r\n                        {children}\r\n                    </div>\r\n                    {!iconFirst && Icon}\r\n                </Prim.Trigger>\r\n            </Prim.Header>\r\n        );\r\n    }\r\n);\r\nAccordionTrigger.displayName = Prim.Trigger.displayName;\r\n\r\nconst AccordionContentClasses = "
  },
  "src/renderer/src/ui/shadcn/button.tsx": {
    "radixuireactslot": "@radix-ui/react-slot",
    "constButtonvariantsclassesCvadefaultvariantclassesVariantsVariant": ";\r\n\r\nconst buttonVariantsClasses = cva(defaultVariantClasses, {\r\n    variants: {\r\n        variant: {\r\n            default: ",
    "destructive": ",\r\n            destructive: ",
    "outline": ",\r\n            outline: ",
    "secondary": ",\r\n            secondary: ",
    "ghost": ",\r\n            ghost: ",
    "link": ",\r\n            link: ",
    "sizeDefault": ",\r\n        },\r\n        size: {\r\n            default: ",
    "xs": ",\r\n            xs: ",
    "sm": ",\r\n            sm: ",
    "lg": ",\r\n            lg: ",
    "icon": ",\r\n            icon: ",
    "defaultvariantsVariant": ",\r\n        },\r\n    },\r\n    defaultVariants: {\r\n        variant: ",
    "size": ",\r\n        size: ",
    "exportInterfaceButtonpropsExtendsButtonhtmlattributeshtmlbuttonelement": ",\r\n    },\r\n});\r\n\r\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariantsClasses> {\r\n    asChild?: boolean;\r\n}\r\n\r\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\r\n    ({ className, variant, size, asChild = false, ...rest }, ref) => {\r\n        const Comp = asChild ? Slot : ",
    "returnCompClassnamecnbuttonvariantsclassesVariantSize": ";\r\n        return (\r\n            <Comp className={cn(buttonVariantsClasses({ variant, size, className }))} ref={ref} {...rest} />\r\n        );\r\n    }\r\n);\r\nButton.displayName = "
  },
  "src/renderer/src/ui/shadcn/checkbox.tsx": {
    "radixuireactcheckbox": "@radix-ui/react-checkbox",
    "radixuireacticons": "@radix-ui/react-icons",
    "originalWasBorderprimaryDatastatecheckedbgprimaryDatastatecheckedtextprimaryforeground": ";\r\n// original was: border-primary data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\r\n\r\nconst Checkbox = forwardRef<ElementRef<typeof Prim.Root>, ComponentPropsWithoutRef<typeof Prim.Root>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.Root ref={ref} className={cn(CheckboxClasses, className)} {...rest}>\r\n            <Prim.Indicator className={cn(",
    "checkiconClassname": ")}>\r\n                <CheckIcon className="
  },
  "src/renderer/src/ui/shadcn/collapsible.tsx": {
    "radixuireactcollapsible": "@radix-ui/react-collapsible"
  },
  "src/renderer/src/ui/shadcn/context-menu.tsx": {
    "radixuireactcontextmenu": "@radix-ui/react-context-menu",
    "radixuireacticons": "@radix-ui/react-icons",
    "constContextmenusubtriggerForwardrefelementreftypeofPrimsubtriggerComponentpropswithoutreftypeof": ";\r\n\r\nconst ContextMenuSubTrigger = forwardRef<ElementRef<typeof Prim.SubTrigger>, ComponentPropsWithoutRef<typeof Prim.SubTrigger> & { inset?: boolean; }>(\r\n    ({ className, inset, children, ...rest }, ref) => (\r\n        <Prim.SubTrigger ref={ref} className={cn(ContextMenuSubTriggerClasses, inset && ",
    "classnameRestChildrenChevronrighticonClassname": ", className)} {...rest}>\r\n            {children}\r\n            <ChevronRightIcon className=",
    "primsubtriggerContextmenusubtriggerdisplaynamePrimsubtriggerdisplaynameConstContextmenusubcontentclasses": " />\r\n        </Prim.SubTrigger>\r\n    )\r\n);\r\nContextMenuSubTrigger.displayName = Prim.SubTrigger.displayName;\r\n\r\nconst ContextMenuSubContentClasses = `${",
    "popupanimatonclassesConstContextmenusubcontentForwardrefelementreftypeofPrimsubcontent": "} ${popupAnimatonClasses}`;\r\nconst ContextMenuSubContent = forwardRef<ElementRef<typeof Prim.SubContent>, ComponentPropsWithoutRef<typeof Prim.SubContent>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.SubContent ref={ref} className={cn(ContextMenuSubContentClasses, className)} {...rest} />\r\n    )\r\n);\r\nContextMenuSubContent.displayName = Prim.SubContent.displayName;\r\n\r\nconst ContextMenuContentClasses = ContextMenuSubContentClasses;\r\nconst ContextMenuContent = forwardRef<ElementRef<typeof Prim.Content>, ComponentPropsWithoutRef<typeof Prim.Content>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.Portal>\r\n            <Prim.Content ref={ref} className={cn(ContextMenuContentClasses, className)} {...rest} />\r\n        </Prim.Portal>\r\n    )\r\n);\r\nContextMenuContent.displayName = Prim.Content.displayName;\r\n\r\nconst ContextMenuItemClasses = ",
    "constContextmenuitemForwardrefelementreftypeofPrimitemComponentpropswithoutreftypeof": ";\r\n\r\nconst ContextMenuItem = forwardRef<ElementRef<typeof Prim.Item>, ComponentPropsWithoutRef<typeof Prim.Item> & { inset?: boolean; }>(\r\n    ({ className, inset, ...rest }, ref) => (\r\n        <Prim.Item ref={ref} className={cn(ContextMenuItemClasses, inset && ",
    "classnameRestContextmenuitemdisplaynamePrimitemdisplaynameConst": ", className)} {...rest} />\r\n    )\r\n);\r\nContextMenuItem.displayName = Prim.Item.displayName;\r\n\r\nconst ContextMenuCheckboxRadioItemClasses = ",
    "constContextmenucheckboxitemForwardrefelementreftypeofPrimcheckboxitemComponentpropswithoutreftypeof": ";\r\n\r\nconst ContextMenuCheckboxItem = forwardRef<ElementRef<typeof Prim.CheckboxItem>, ComponentPropsWithoutRef<typeof Prim.CheckboxItem>>(\r\n    ({ className, children, checked, ...rest }, ref) => (\r\n        <Prim.CheckboxItem ref={ref} className={cn(ContextMenuCheckboxRadioItemClasses, className)} checked={checked} {...rest}>\r\n            <span className=",
    "primitemindicatorCheckiconClassname": ">\r\n                <Prim.ItemIndicator>\r\n                    <CheckIcon className=",
    "primitemindicatorSpanChildrenPrimcheckboxitemContextmenucheckboxitemdisplayname": " />\r\n                </Prim.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </Prim.CheckboxItem>\r\n    )\r\n);\r\nContextMenuCheckboxItem.displayName = Prim.CheckboxItem.displayName;\r\n\r\nconst ContextMenuRadioItem = forwardRef<ElementRef<typeof Prim.RadioItem>, ComponentPropsWithoutRef<typeof Prim.RadioItem>>(\r\n    ({ className, children, ...rest }, ref) => (\r\n        <Prim.RadioItem ref={ref} className={cn(ContextMenuCheckboxRadioItemClasses, className)} {...rest}>\r\n            <span className=",
    "primitemindicatorDotfillediconClassname": ">\r\n                <Prim.ItemIndicator>\r\n                    <DotFilledIcon className=",
    "primitemindicatorSpanChildrenPrimradioitemContextmenuradioitemdisplayname": " />\r\n                </Prim.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </Prim.RadioItem>\r\n    )\r\n);\r\nContextMenuRadioItem.displayName = Prim.RadioItem.displayName;\r\n\r\nconst ContextMenuLabel = forwardRef<ElementRef<typeof Prim.Label>, ComponentPropsWithoutRef<typeof Prim.Label> & { inset?: boolean; }>(\r\n    ({ className, inset, ...rest }, ref) => (\r\n        <Prim.Label ref={ref} className={cn(",
    "inset": ", inset && ",
    "classnameRestContextmenulabeldisplaynamePrimlabeldisplaynameConst": ", className)} {...rest} />\r\n    )\r\n);\r\nContextMenuLabel.displayName = Prim.Label.displayName;\r\n\r\nconst ContextMenuSeparator = forwardRef<ElementRef<typeof Prim.Separator>, ComponentPropsWithoutRef<typeof Prim.Separator>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.Separator ref={ref} className={cn(",
    "classnameRestContextmenuseparatordisplaynamePrimseparatordisplaynameConst": ", className)} {...rest} />\r\n    )\r\n);\r\nContextMenuSeparator.displayName = Prim.Separator.displayName;\r\n\r\nconst ContextMenuShortcut = ({ className, ...rest }: HTMLAttributes<HTMLSpanElement>) => {\r\n    return (\r\n        <span className={cn(",
    "classnameRestContextmenushortcutdisplayname": ", className)} {...rest} />\r\n    );\r\n};\r\nContextMenuShortcut.displayName = "
  },
  "src/renderer/src/ui/shadcn/dialog.tsx": {
    "useClient": "use client",
    "radixuireactdialog": "@radix-ui/react-dialog",
    "radixuireacticons": "@radix-ui/react-icons",
    "constDialogoverlayForwardrefelementreftypeofPrimoverlayComponentpropswithoutreftypeof": ";\r\n\r\nconst DialogOverlay = forwardRef<ElementRef<typeof Prim.Overlay>, ComponentPropsWithoutRef<typeof Prim.Overlay>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.Overlay ref={ref} className={cn(dialogOverlayClasses, className)} {...rest} />\r\n    )\r\n);\r\nDialogOverlay.displayName = Prim.Overlay.displayName;\r\n\r\nconst DialogOverlayWithScroll = forwardRef<ElementRef<typeof Prim.Overlay>, ComponentPropsWithoutRef<typeof Prim.Overlay>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <div ref={ref} className={cn(dialogOverlayClasses, className)} {...rest} />\r\n    )\r\n);\r\nDialogOverlayWithScroll.displayName = `${Prim.Overlay.displayName}WithScroll`;\r\n\r\nexport const DialogContentClasses = ",
    "typeDialogcontentpropsComponentpropswithoutreftypeofPrimcontentModal": ";\r\n\r\ntype DialogContentProps = ComponentPropsWithoutRef<typeof Prim.Content> & {\r\n    modal?: boolean;\r\n    container?: Prim.DialogPortalProps['container'];\r\n    noClose?: boolean;\r\n    withScroll?: boolean; // by default DialogContent has no scroll for popups\r\n    hiddenTitle?: string; // If headenTitle is not provided, then parent component should provide own Prim.Title (same for aria-describedby)\r\n    overlayClasses?: string;\r\n};\r\n\r\nconst preventClose = (e: Event) => e.preventDefault();\r\n\r\nconst DialogContent = forwardRef<ElementRef<typeof Prim.Content>, DialogContentProps>(\r\n    ({ className, children, noClose, container, withScroll, modal, overlayClasses, onPointerDownOutside, hiddenTitle, ...rest }, ref) => (\r\n        <DialogPortal container={container}>\r\n            {withScroll ? <DialogOverlayWithScroll className={overlayClasses} /> : <DialogOverlay className={overlayClasses} />}\r\n\r\n            <Prim.Content\r\n                ref={ref}\r\n                className={cn(DialogContentClasses, className)}\r\n                onPointerDownOutside={modal ? preventClose : onPointerDownOutside}\r\n                aria-describedby={undefined}\r\n                {...rest}\r\n            >\r\n                {hiddenTitle && (\r\n                    <Prim.Title className=",
    "hiddentitleprimtitleChildrenNocloseDialogclosebuttonPrimcontent": ">{hiddenTitle}</Prim.Title>\r\n                )}\r\n                \r\n                {children}\r\n                {!noClose && <DialogCloseButton />}\r\n            </Prim.Content>\r\n        </DialogPortal>\r\n    )\r\n);\r\nDialogContent.displayName = Prim.Content.displayName;\r\n\r\nconst dialogCloseButtonClasses = ",
    "functionDialogclosebuttonClassnameRestHtmlattributeshtmlbuttonelement": ";\r\n\r\nfunction DialogCloseButton({ className, ...rest }: HTMLAttributes<HTMLButtonElement>) {\r\n    return (\r\n        <Prim.Close className={cn(dialogCloseButtonClasses, className)} {...rest}>\r\n            <Cross2Icon className=",
    "spanClassname": " />\r\n            <span className=",
    "closespanPrimcloseFunctionDialogheaderClassname": ">Close</span>\r\n        </Prim.Close>\r\n    );\r\n}\r\n\r\nfunction DialogHeader({ className, ...rest }: HTMLAttributes<HTMLDivElement>) {\r\n    return (\r\n        <div className={cn(",
    "classnameRestFunctionDialogfooterClassname": ", className)} {...rest} />\r\n    );\r\n}\r\n\r\nfunction DialogFooter({ className, ...rest }: HTMLAttributes<HTMLDivElement>) {\r\n    return (\r\n        <div className={cn(",
    "classnameRestConstDialogtitleForwardrefelementreftypeof": ", className)} {...rest} />\r\n    );\r\n}\r\n\r\nconst DialogTitle = forwardRef<ElementRef<typeof Prim.Title>, ComponentPropsWithoutRef<typeof Prim.Title>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.Title ref={ref} className={cn(",
    "classnameRestDialogtitledisplaynamePrimtitledisplaynameConst": ", className)} {...rest} />\r\n    )\r\n);\r\nDialogTitle.displayName = Prim.Title.displayName;\r\n\r\nconst DialogDescription = forwardRef<ElementRef<typeof Prim.Description>, ComponentPropsWithoutRef<typeof Prim.Description>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.Description ref={ref} className={cn("
  },
  "src/renderer/src/ui/shadcn/drawer.tsx": {
    "fixedInset0Bgblack80Z50": "fixed inset-0 bg-black/80 z-50",
    "exportConstDrawercontentForwardrefelementreftypeofDcontent": ";\r\n\r\nexport const DrawerContent = forwardRef<ElementRef<typeof D.Content>, DrawerContentProps>(\r\n    ({ className, children, withoutOverlay, withTopBar, hiddenTitle, ...rest }, ref) => (\r\n        <DrawerPortal>\r\n            {!withoutOverlay && <DrawerOverlay />}\r\n            <D.Content ref={ref} className={cn(drawerContentClasses, className)} aria-describedby={undefined} {...rest}>\r\n                {hiddenTitle && (\r\n                    <D.Title className=",
    "hiddentitledtitleWithtopbarDivClassname": ">{hiddenTitle}</D.Title>\r\n                )}\r\n\r\n                {withTopBar && <div className=",
    "childrenDcontentDrawerportalDrawercontentdisplayname": " />}\r\n                {children}\r\n            </D.Content>\r\n        </DrawerPortal>\r\n    )\r\n);\r\nDrawerContent.displayName = ",
    "exportFunctionDrawerheaderClassnameRest": ";\r\n\r\nexport function DrawerHeader({ className, ...rest }: HTMLAttributes<HTMLDivElement>) {\r\n    return (\r\n        <div className={cn(",
    "classnameRestExportFunctionDrawerfooter": ", className)} {...rest} />\r\n    );\r\n}\r\n\r\nexport function DrawerFooter({ className, ...rest }: HTMLAttributes<HTMLDivElement>) {\r\n    return (\r\n        <div className={cn(",
    "classnameRestExportConstDrawertitle": ", className)} {...rest} />\r\n    );\r\n}\r\n\r\nexport const DrawerTitle = forwardRef<ElementRef<typeof D.Title>, ComponentPropsWithoutRef<typeof D.Title>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <D.Title ref={ref} className={cn(",
    "classnameRestDrawertitledisplaynameDtitledisplaynameExport": ", className)} {...rest} />\r\n    )\r\n);\r\nDrawerTitle.displayName = D.Title.displayName;\r\n\r\nexport const DrawerDescription = forwardRef<ElementRef<typeof D.Description>, ComponentPropsWithoutRef<typeof D.Description>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <D.Description ref={ref} className={cn("
  },
  "src/renderer/src/ui/shadcn/dropdown-menu.tsx": {
    "useClient": "use client",
    "radixuireactdropdownmenu": "@radix-ui/react-dropdown-menu",
    "radixuireacticons": "@radix-ui/react-icons",
    "constDropdownmenusubtriggerForwardrefelementreftypeofPrimsubtriggerComponentpropswithoutreftypeof": ";\r\nconst DropdownMenuSubTrigger = forwardRef<ElementRef<typeof Prim.SubTrigger>, ComponentPropsWithoutRef<typeof Prim.SubTrigger> & { inset?: boolean; }>(\r\n    ({ className, inset, children, ...rest }, ref) => (\r\n        <Prim.SubTrigger ref={ref} className={cn(DropdownMenuSubTriggerClasses, inset && ",
    "classnameRestChildrenChevronrighticonClassname": ", className)} {...rest}>\r\n            {children}\r\n            <ChevronRightIcon className=",
    "primsubtriggerDropdownmenusubtriggerdisplaynamePrimsubtriggerdisplaynameConstDropdownmenusubcontentclasses": " />\r\n        </Prim.SubTrigger>\r\n    )\r\n);\r\nDropdownMenuSubTrigger.displayName = Prim.SubTrigger.displayName;\r\n\r\nconst DropdownMenuSubContentClasses = `${",
    "popupanimatonclassesConstDropdownmenusubcontentForwardrefelementreftypeofPrimsubcontent": "} ${popupAnimatonClasses}`;\r\nconst DropdownMenuSubContent = forwardRef<ElementRef<typeof Prim.SubContent>, ComponentPropsWithoutRef<typeof Prim.SubContent>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.SubContent ref={ref} className={cn(DropdownMenuSubContentClasses, className)} {...rest} />\r\n    )\r\n);\r\nDropdownMenuSubContent.displayName = Prim.SubContent.displayName;\r\n\r\nconst DropdownMenuContentClasses = DropdownMenuSubContentClasses;\r\nconst DropdownMenuContent = forwardRef<ElementRef<typeof Prim.Content>, ComponentPropsWithoutRef<typeof Prim.Content>>(\r\n    ({ className, sideOffset = 4, ...rest }, ref) => (\r\n        <Prim.Portal>\r\n            <Prim.Content ref={ref} className={cn(DropdownMenuContentClasses, className)} sideOffset={sideOffset} {...rest} />\r\n        </Prim.Portal>\r\n    )\r\n);\r\nDropdownMenuContent.displayName = Prim.Content.displayName;\r\n\r\nexport type DropdownMenuItemProps = ComponentPropsWithoutRef<typeof Prim.Item> & {\r\n    inset?: boolean;\r\n};\r\n\r\n// default was: ",
    "constDropdownmenuitemForwardrefelementreftypeofPrimitemDropdownmenuitemprops": ";\r\nconst DropdownMenuItem = forwardRef<ElementRef<typeof Prim.Item>, DropdownMenuItemProps>(\r\n    ({ className, inset, ...rest }, ref) => (\r\n        <Prim.Item ref={ref} className={cn(DropdownMenuItemClasses, inset && ",
    "classnameRestDropdownmenuitemdisplaynamePrimitemdisplaynameConst": ", className)} {...rest} />\r\n    )\r\n);\r\nDropdownMenuItem.displayName = Prim.Item.displayName;\r\n\r\nconst DropdownMenuCheckboxItemClasses = ",
    "constDropdownmenucheckboxitemForwardrefelementreftypeofPrimcheckboxitemComponentpropswithoutreftypeof": ";\r\nconst DropdownMenuCheckboxItem = forwardRef<ElementRef<typeof Prim.CheckboxItem>, ComponentPropsWithoutRef<typeof Prim.CheckboxItem>>(\r\n    ({ className, children, checked, ...rest }, ref) => (\r\n        <Prim.CheckboxItem ref={ref} className={cn(DropdownMenuCheckboxItemClasses, className)} checked={checked} {...rest}>\r\n            <span className=",
    "primitemindicatorCheckiconClassname": ">\r\n                <Prim.ItemIndicator>\r\n                    <CheckIcon className=",
    "primitemindicatorSpanChildrenPrimcheckboxitemDropdownmenucheckboxitemdisplayname": " />\r\n                </Prim.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </Prim.CheckboxItem>\r\n    )\r\n);\r\nDropdownMenuCheckboxItem.displayName = Prim.CheckboxItem.displayName;\r\n\r\nconst DropdownMenuRadioItemClasses = ",
    "constDropdownmenuradioitemForwardrefelementreftypeofPrimradioitemComponentpropswithoutreftypeof": ";\r\nconst DropdownMenuRadioItem = forwardRef<ElementRef<typeof Prim.RadioItem>, ComponentPropsWithoutRef<typeof Prim.RadioItem>>(\r\n    ({ className, children, ...rest }, ref) => (\r\n        <Prim.RadioItem ref={ref} className={cn(DropdownMenuRadioItemClasses, className)} {...rest}>\r\n            <span className=",
    "primitemindicatorDotfillediconClassname": ">\r\n                <Prim.ItemIndicator>\r\n                    <DotFilledIcon className=",
    "primitemindicatorSpanChildrenPrimradioitemDropdownmenuradioitemdisplayname": " />\r\n                </Prim.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </Prim.RadioItem>\r\n    )\r\n);\r\nDropdownMenuRadioItem.displayName = Prim.RadioItem.displayName;\r\n\r\nconst DropdownMenuLabel = forwardRef<ElementRef<typeof Prim.Label>, ComponentPropsWithoutRef<typeof Prim.Label> & { inset?: boolean; }>(\r\n    ({ className, inset, ...props }, ref) => (\r\n        <Prim.Label\r\n            ref={ref}\r\n            className={cn(",
    "inset": ", inset && ",
    "classnamePropsDropdownmenulabeldisplaynamePrimlabeldisplaynameConst": ", className)}\r\n            {...props}\r\n        />\r\n    )\r\n);\r\nDropdownMenuLabel.displayName = Prim.Label.displayName;\r\n\r\nconst DropdownMenuSeparator = forwardRef<ElementRef<typeof Prim.Separator>, ComponentPropsWithoutRef<typeof Prim.Separator>>(\r\n    ({ className, ...props }, ref) => (\r\n        <Prim.Separator ref={ref} className={cn(",
    "classnamePropsDropdownmenuseparatordisplaynamePrimseparatordisplaynameConst": ", className)} {...props} />\r\n    )\r\n);\r\nDropdownMenuSeparator.displayName = Prim.Separator.displayName;\r\n\r\nconst DropdownMenuShortcut = ({ className, ...rest }: HTMLAttributes<HTMLSpanElement>) => {\r\n    return (\r\n        <span className={cn(",
    "classnameRestDropdownmenushortcutdisplayname": ", className)} {...rest} />\r\n    );\r\n};\r\nDropdownMenuShortcut.displayName = "
  },
  "src/renderer/src/ui/shadcn/input.tsx": {
    "constInputForwardrefhtmlinputelementInputpropsClassname": ";\r\n\r\nconst Input = forwardRef<HTMLInputElement, InputProps>(\r\n    ({ className, type, ...rest }, ref) => {\r\n        return (\r\n            <input type={type} className={cn(InputClasses, className)} ref={ref} {...rest} />\r\n        );\r\n    }\r\n);\r\nInput.displayName = "
  },
  "src/renderer/src/ui/shadcn/label.tsx": {
    "useClient": "use client",
    "radixuireactlabel": "@radix-ui/react-label"
  },
  "src/renderer/src/ui/shadcn/menubar.tsx": {
    "useClient": "use client",
    "radixuireactmenubar": "@radix-ui/react-menubar",
    "radixuireacticons": "@radix-ui/react-icons",
    "constMenubarForwardrefelementreftypeofPrimrootComponentpropswithoutreftypeof": ";\r\nconst Menubar = forwardRef<ElementRef<typeof Prim.Root>, ComponentPropsWithoutRef<typeof Prim.Root>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.Root ref={ref} className={cn(MenubarClasses, className)} {...rest} />\r\n    )\r\n);\r\nMenubar.displayName = Prim.Root.displayName;\r\n\r\nconst MenubarTriggerClasses = ",
    "constMenubartriggerForwardrefelementreftypeofPrimtriggerComponentpropswithoutreftypeof": ";\r\nconst MenubarTrigger = forwardRef<ElementRef<typeof Prim.Trigger>, ComponentPropsWithoutRef<typeof Prim.Trigger>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.Trigger ref={ref} className={cn(MenubarTriggerClasses, className)} {...rest} />\r\n    )\r\n);\r\nMenubarTrigger.displayName = Prim.Trigger.displayName;\r\n\r\nconst MenubarSubTriggerClasses = ",
    "constMenubarsubtriggerForwardrefelementreftypeofPrimsubtriggerComponentpropswithoutreftypeof": ";\r\nconst MenubarSubTrigger = forwardRef<ElementRef<typeof Prim.SubTrigger>, ComponentPropsWithoutRef<typeof Prim.SubTrigger> & { inset?: boolean; }>(\r\n    ({ className, inset, children, ...rest }, ref) => (\r\n        <Prim.SubTrigger ref={ref} className={cn(MenubarSubTriggerClasses, inset && ",
    "classnameRestChildrenChevronrighticonClassname": ", className)} {...rest}>\r\n            {children}\r\n            <ChevronRightIcon className=",
    "primsubtriggerMenubarsubtriggerdisplaynamePrimsubtriggerdisplaynameConstMenubarsubcontentclasses": " />\r\n        </Prim.SubTrigger>\r\n    )\r\n);\r\nMenubarSubTrigger.displayName = Prim.SubTrigger.displayName;\r\n\r\nconst MenubarSubContentClasses = ",
    "constMenubarsubcontentForwardrefelementreftypeofPrimsubcontentComponentpropswithoutreftypeof": ";\r\nconst MenubarSubContent = forwardRef<ElementRef<typeof Prim.SubContent>, ComponentPropsWithoutRef<typeof Prim.SubContent>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.SubContent ref={ref} className={cn(MenubarSubContentClasses, className)} {...rest} />\r\n    )\r\n);\r\nMenubarSubContent.displayName = Prim.SubContent.displayName;\r\n\r\nconst MenubarContentClasses = ",
    "constMenubarcontentForwardrefelementreftypeofPrimcontentComponentpropswithoutreftypeof": ";\r\nconst MenubarContent = forwardRef<ElementRef<typeof Prim.Content>, ComponentPropsWithoutRef<typeof Prim.Content>>(\r\n    ({ className, align = ",
    "alignoffset4Sideoffset8Rest": ", alignOffset = -4, sideOffset = 8, ...rest }, ref) => (\r\n        <Prim.Portal>\r\n            <Prim.Content\r\n                ref={ref}\r\n                align={align}\r\n                alignOffset={alignOffset}\r\n                sideOffset={sideOffset}\r\n                className={cn(MenubarContentClasses, className)}\r\n                {...rest}\r\n            />\r\n        </Prim.Portal>\r\n    )\r\n);\r\nMenubarContent.displayName = Prim.Content.displayName;\r\n\r\nconst MenubarItemClasses = ",
    "constMenubaritemForwardrefelementreftypeofPrimitemComponentpropswithoutreftypeof": ";\r\nconst MenubarItem = forwardRef<ElementRef<typeof Prim.Item>, ComponentPropsWithoutRef<typeof Prim.Item> & { inset?: boolean; }>(\r\n    ({ className, inset, ...rest }, ref) => (\r\n        <Prim.Item ref={ref} className={cn(MenubarItemClasses, inset && ",
    "classnameRestMenubaritemdisplaynamePrimitemdisplaynameConst": ", className)} {...rest} />\r\n    )\r\n);\r\nMenubarItem.displayName = Prim.Item.displayName;\r\n\r\nconst MenubarCheckboxRadioItemClasses = ",
    "constMenubarcheckboxitemForwardrefelementreftypeofPrimcheckboxitemComponentpropswithoutreftypeof": ";\r\n\r\nconst MenubarCheckboxItem = forwardRef<ElementRef<typeof Prim.CheckboxItem>, ComponentPropsWithoutRef<typeof Prim.CheckboxItem>>(\r\n    ({ className, children, checked, ...rest }, ref) => (\r\n        <Prim.CheckboxItem ref={ref} className={cn(MenubarCheckboxRadioItemClasses, className)} checked={checked} {...rest}>\r\n            <span className=",
    "primitemindicatorCheckiconClassname": ">\r\n                <Prim.ItemIndicator>\r\n                    <CheckIcon className=",
    "primitemindicatorSpanChildrenPrimcheckboxitemMenubarcheckboxitemdisplayname": " />\r\n                </Prim.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </Prim.CheckboxItem>\r\n    )\r\n);\r\nMenubarCheckboxItem.displayName = Prim.CheckboxItem.displayName;\r\n\r\nconst MenubarRadioItem = forwardRef<ElementRef<typeof Prim.RadioItem>, ComponentPropsWithoutRef<typeof Prim.RadioItem>>(\r\n    ({ className, children, ...rest }, ref) => (\r\n        <Prim.RadioItem ref={ref} className={cn(MenubarCheckboxRadioItemClasses, className)} {...rest}>\r\n            <span className=",
    "primitemindicatorDotfillediconClassname": ">\r\n                <Prim.ItemIndicator>\r\n                    <DotFilledIcon className=",
    "primitemindicatorSpanChildrenPrimradioitemMenubarradioitemdisplayname": " />\r\n                </Prim.ItemIndicator>\r\n            </span>\r\n            {children}\r\n        </Prim.RadioItem>\r\n    )\r\n);\r\nMenubarRadioItem.displayName = Prim.RadioItem.displayName;\r\n\r\nconst MenubarLabel = forwardRef<ElementRef<typeof Prim.Label>, ComponentPropsWithoutRef<typeof Prim.Label> & { inset?: boolean; }>(\r\n    ({ className, inset, ...rest }, ref) => (\r\n        <Prim.Label ref={ref} className={cn(",
    "inset": ", inset && ",
    "classnameRestMenubarlabeldisplaynamePrimlabeldisplaynameConst": ", className)} {...rest} />\r\n    )\r\n);\r\nMenubarLabel.displayName = Prim.Label.displayName;\r\n\r\nconst MenubarSeparator = forwardRef<ElementRef<typeof Prim.Separator>, ComponentPropsWithoutRef<typeof Prim.Separator>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.Separator ref={ref} className={cn(",
    "classnameRestMenubarseparatordisplaynamePrimseparatordisplaynameConst": ", className)} {...rest} />\r\n    )\r\n);\r\nMenubarSeparator.displayName = Prim.Separator.displayName;\r\n\r\nconst MenubarShortcut = ({ className, ...rest }: HTMLAttributes<HTMLSpanElement>) => {\r\n    return (\r\n        <span className={cn(",
    "classnameRestMenubarshortcutdisplayname": ", className)} {...rest} />\r\n    );\r\n};\r\nMenubarShortcut.displayname = "
  },
  "src/renderer/src/ui/shadcn/popover.tsx": {
    "useClient": "use client",
    "radixuireactpopover": "@radix-ui/react-popover",
    "popupanimatonclassesConstPopovercontentForwardrefelementreftypeofPrimcontent": "} ${popupAnimatonClasses}`;\r\n\r\nconst PopoverContent = forwardRef<ElementRef<typeof Prim.Content>, ComponentPropsWithoutRef<typeof Prim.Content>>(\r\n    ({ className, align = ",
    "sideoffset4RestRefPrimportal": ", sideOffset = 4, ...rest }, ref) => (\r\n        <Prim.Portal>\r\n            <Prim.Content\r\n                ref={ref}\r\n                align={align}\r\n                sideOffset={sideOffset}\r\n                className={cn(PopoverContentClasses, className)}\r\n                {...rest}\r\n            />\r\n        </Prim.Portal>\r\n    )\r\n);\r\nPopoverContent.displayName = Prim.Content.displayName;\r\n\r\nfunction PopoverArrorWoBottom({className, ...rest}: ComponentPropsWithoutRef<typeof Prim.Arrow>) {\r\n    return (\r\n        <Prim.Arrow className={cn(",
    "classnameAschildRestSvgViewbox": ", className)} asChild {...rest}>\r\n            <svg viewBox=",
    "polylinePoints": ">\r\n                <polyline points=",
    "rectX": " />\r\n                <rect x="
  },
  "src/renderer/src/ui/shadcn/radio-group.tsx": {
    "useClient": "use client",
    "radixuireactradiogroup": "@radix-ui/react-radio-group",
    "radixuireacticons": "@radix-ui/react-icons",
    "constRadiogroupitemForwardrefelementreftypeofPrimitemComponentpropswithoutreftypeof": ";\r\n\r\nconst RadioGroupItem = forwardRef<ElementRef<typeof Prim.Item>, ComponentPropsWithoutRef<typeof Prim.Item>>(\r\n    ({ className, children, ...rest }, ref) => {\r\n        return (\r\n            <Prim.Item ref={ref} className={cn(RadioGroupItemClasses, className)} {...rest}>\r\n\r\n                <Prim.Indicator className=",
    "checkiconClassname": ">\r\n                    <CheckIcon className="
  },
  "src/renderer/src/ui/shadcn/resizable.tsx": {
    "radixuireacticons": "@radix-ui/react-icons",
    "wfullHfullFlexDatapanelgroupdirectionverticalflexcol": "w-full h-full flex data-[panel-group-direction=vertical]:flex-col",
    "exportFunctionResizablehandleClassnameChildren": ";\r\n\r\nexport function ResizableHandle({ className, children, ...rest }: ComponentProps<typeof R.PanelResizeHandle>) {\r\n    return (\r\n        <R.PanelResizeHandle className={cn(ResizableHandleClasses, className)} {...rest}>\r\n            {children}\r\n        </R.PanelResizeHandle>\r\n    );\r\n}\r\n\r\nexport function togglePanel(panel: R.ImperativePanelHandle | null) {\r\n    panel?.[panel.isCollapsed() ? 'expand' : 'collapse']();\r\n}\r\n\r\nexport function togglePanels(refA: RefObject<R.ImperativePanelHandle | null>, refB: RefObject<R.ImperativePanelHandle | null>, isA: boolean) {\r\n    const a = refA?.current;\r\n    const b = refB?.current;\r\n    if (a && b) {\r\n        togglePanel((!a.isCollapsed() && !b.isCollapsed() ? isA : !isA) ? a : b);\r\n    }\r\n};\r\n\r\nexport const toysMiddleClasses = ",
    "exportConstToysarrowclasses": ";\r\nexport const toysArrowClasses = ",
    "exportFunctionResizablehandletoysClassnameRest": ";\r\n\r\nexport function ResizableHandleToys({ className, ...rest }: HTMLAttributes<HTMLDivElement>) {\r\n    return (\r\n        <div className={classNames(",
    "classnameRestDraghandledots2iconClassname": ", className)} {...rest}>\r\n            <DragHandleDots2Icon className="
  },
  "src/renderer/src/ui/shadcn/scroll-area.tsx": {
    "radixuireactscrollarea": "@radix-ui/react-scroll-area",
    "datafixedwidth_dataradixscrollareacontentdisplayblock": "[&[data-fixed-width]_[data-radix-scroll-area-content]]:![display:block]",
    "_dataradixscrollareaviewportdivhfull": "[&_[data-radix-scroll-area-viewport]>div]:h-full",
    "_dataradixscrollareaviewportdivdisplayblock": "[&_[data-radix-scroll-area-viewport]>div]:![display:block]",
    "_dataradixscrollareacontentminw0": "[&_[data-radix-scroll-area-content]]:!min-w-0",
    "hfullWfullRoundedinherit": "h-full w-full rounded-[inherit]",
    "w25HfullBorderlBorderltransparentP1px": "w-2.5 h-full border-l border-l-transparent p-[1px]",
    "h25BordertBorderttransparentP1px": "h-2.5 border-t border-t-transparent p-[1px]",
    "tAccountForChildrenWith": "t account for children with *percentage*\r\n * widths that change. We"
  },
  "src/renderer/src/ui/shadcn/select-prev-version-nun.tsx": {
    "useClient": "use client",
    "radixuireactselect": "@radix-ui/react-select",
    "radixuireacticons": "@radix-ui/react-icons",
    "constSelecttriggerForwardrefelementreftypeofPrimtriggerComponentpropswithoutreftypeof": ";\r\n\r\nconst SelectTrigger = forwardRef<ElementRef<typeof Prim.Trigger>, ComponentPropsWithoutRef<typeof Prim.Trigger>>(\r\n    ({ className, children, ...rest }, ref) => (\r\n        <Prim.Trigger ref={ref} className={cn(selectTriggerClasses, className)} {...rest}>\r\n            {children}\r\n            <Prim.Icon asChild>\r\n                <CaretSortIcon className=",
    "primiconPrimtriggerSelecttriggerdisplaynamePrimtriggerdisplaynameConst": " />\r\n            </Prim.Icon>\r\n        </Prim.Trigger>\r\n    )\r\n);\r\nSelectTrigger.displayName = Prim.Trigger.displayName;\r\n\r\nconst selectContentClasses = ",
    "constSelectcontentpopperclasses": ";\r\n\r\nconst selectContentPopperClasses = ",
    "constSelectcontentviewportpopperclasses": ";\r\n\r\nconst selectContentViewportPopperClasses = ",
    "constSelectcontentForwardrefelementreftypeofPrimcontentComponentpropswithoutreftypeof": ";\r\n\r\nconst SelectContent = forwardRef<ElementRef<typeof Prim.Content>, ComponentPropsWithoutRef<typeof Prim.Content>>(\r\n    ({ className, children, position = ",
    "restRefPrimportalPrimcontentRefref": ", ...rest }, ref) => (\r\n        <Prim.Portal>\r\n            <Prim.Content\r\n                ref={ref}\r\n                className={cn(selectContentClasses, position === ",
    "selectcontentpopperclassesClassnamePositionpositionRestPrimviewport": " && selectContentPopperClasses, className)}\r\n                position={position}\r\n                {...rest}\r\n            >\r\n                <Prim.Viewport className={cn(",
    "position": ", position === ",
    "selectcontentviewportpopperclassesChildrenPrimviewportPrimcontentPrimportal": " && selectContentViewportPopperClasses)}>\r\n                    {children}\r\n                </Prim.Viewport>\r\n            </Prim.Content>\r\n        </Prim.Portal>\r\n    )\r\n);\r\nSelectContent.displayName = Prim.Content.displayName;\r\n\r\n//\r\n\r\nimport { ChevronDownIcon, ChevronUpIcon } from ",
    "constPopupcolorclasses": ";\r\n\r\nconst popupColorClasses = ",
    "constScrollbuttonclassesH6PopupcolorclassesFlex": ";\r\n\r\nconst scrollButtonClasses = `h-6 ${popupColorClasses} flex items-center justify-center`;\r\n\r\nexport const SelectContentWBtns = forwardRef<ElementRef<typeof Prim.Content>, ComponentPropsWithoutRef<typeof Prim.Content>>(\r\n    ({ className, children, position = ",
    "selectcontentpopperclassesClassnamePositionpositionRestPrimscrollupbutton": " && selectContentPopperClasses, className)}\r\n                //position={position}\r\n                {...rest}\r\n            >\r\n\r\n                <Prim.ScrollUpButton className={scrollButtonClasses}>\r\n                    <ChevronUpIcon className=",
    "primscrollupbuttonPrimviewportClassnamecn": " />\r\n                </Prim.ScrollUpButton>\r\n\r\n                <Prim.Viewport className={cn(",
    "selectcontentviewportpopperclassesChildrenPrimviewportPrimscrolldownbuttonClassnamescrollbuttonclasses": " && selectContentViewportPopperClasses)}>\r\n                    {children}\r\n                </Prim.Viewport>\r\n\r\n                <Prim.ScrollDownButton className={scrollButtonClasses}>\r\n                    <ChevronDownIcon className=",
    "primscrolldownbuttonPrimcontentPrimportalSelectcontentwbtnsdisplaynamePrimcontentdisplayname": " />\r\n                </Prim.ScrollDownButton>\r\n\r\n            </Prim.Content>\r\n        </Prim.Portal>\r\n    )\r\n);\r\nSelectContentWBtns.displayName = Prim.Content.displayName;\r\n\r\n//\r\n\r\nconst SelectLabel = forwardRef<ElementRef<typeof Prim.Label>, ComponentPropsWithoutRef<typeof Prim.Label>>(\r\n    ({ className, ...props }, ref) => (\r\n        <Prim.Label\r\n            ref={ref}\r\n            className={cn(",
    "classnamePropsSelectlabeldisplaynamePrimlabeldisplaynameConst": ", className)}\r\n            {...props}\r\n        />\r\n    )\r\n);\r\nSelectLabel.displayName = Prim.Label.displayName;\r\n\r\nconst selectItemClasses = ",
    "constSelectitemleftclasses": ";\r\n\r\nconst selectItemLeftClasses = ",
    "constSelectitemrightclasses": ";\r\nconst selectItemRightClasses = ",
    "constSelectindileftclasses": ";\r\n\r\nconst selectIndiLeftClasses = ",
    "constSelectindirightclasses": ";\r\nconst selectIndiRightClasses = ",
    "typeSelectitempropsComponentpropswithoutreftypeofPrimitemIndicatorfirst": ";\r\n\r\ntype SelectItemProps = ComponentPropsWithoutRef<typeof Prim.Item> & {\r\n    indicatorFirst?: boolean;\r\n};\r\n\r\nconst SelectItem = forwardRef<ElementRef<typeof Prim.Item>, SelectItemProps>(\r\n    ({ className, children, indicatorFirst, ...rest }, ref) => {\r\n        const itemClasses = indicatorFirst ? selectItemLeftClasses : selectItemRightClasses;\r\n        const indiClasses = indicatorFirst ? selectIndiLeftClasses : selectIndiRightClasses;\r\n        return (\r\n            <Prim.Item ref={ref} className={cn(selectItemClasses, itemClasses, className)} {...rest} >\r\n                <span className={cn(",
    "indiclassesPrimitemindicatorCheckiconClassname": ", indiClasses)}>\r\n                    <Prim.ItemIndicator>\r\n                        <CheckIcon className=",
    "primitemindicatorSpanPrimitemtextchildrenprimitemtextPrimitemSelectitemdisplayname": " />\r\n                    </Prim.ItemIndicator>\r\n                </span>\r\n                <Prim.ItemText>{children}</Prim.ItemText>\r\n            </Prim.Item>\r\n        );\r\n    }\r\n);\r\nSelectItem.displayName = Prim.Item.displayName;\r\n\r\nconst SelectSeparator = forwardRef<ElementRef<typeof Prim.Separator>, ComponentPropsWithoutRef<typeof Prim.Separator>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.Separator ref={ref} className={cn("
  },
  "src/renderer/src/ui/shadcn/select.tsx": {
    "useClient": "use client",
    "radixuireactselect": "@radix-ui/react-select",
    "radixuireacticons": "@radix-ui/react-icons",
    "constSelecttriggerForwardrefelementreftypeofPrimtriggerComponentpropswithoutreftypeof": ";\r\n\r\nconst SelectTrigger = forwardRef<ElementRef<typeof Prim.Trigger>, ComponentPropsWithoutRef<typeof Prim.Trigger>>(\r\n    ({ className, children, ...rest }, ref) => (\r\n        <Prim.Trigger ref={ref} className={cn(selectTriggerClasses, className)} {...rest}>\r\n            {children}\r\n            <Prim.Icon asChild>\r\n                <CaretSortIcon className=",
    "primiconPrimtriggerSelecttriggerdisplaynamePrimtriggerdisplaynameConst": " />\r\n            </Prim.Icon>\r\n        </Prim.Trigger>\r\n    )\r\n);\r\nSelectTrigger.displayName = Prim.Trigger.displayName;\r\n\r\nconst SelectScrollButtonClasses = ",
    "constSelectscrollupbuttonForwardrefelementreftypeofPrimscrollupbuttonComponentpropswithoutreftypeof": ";\r\n\r\nconst SelectScrollUpButton = forwardRef<ElementRef<typeof Prim.ScrollUpButton>, ComponentPropsWithoutRef<typeof Prim.ScrollUpButton>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.ScrollUpButton ref={ref} className={cn(SelectScrollButtonClasses, className)} {...rest}>\r\n            <ChevronUpIcon />\r\n        </Prim.ScrollUpButton>\r\n    )\r\n);\r\nSelectScrollUpButton.displayName = Prim.ScrollUpButton.displayName;\r\n\r\nconst SelectScrollDownButton = forwardRef<ElementRef<typeof Prim.ScrollDownButton>, ComponentPropsWithoutRef<typeof Prim.ScrollDownButton>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.ScrollDownButton ref={ref} className={cn(SelectScrollButtonClasses, className)} {...rest}>\r\n            <ChevronDownIcon />\r\n        </Prim.ScrollDownButton>\r\n    )\r\n);\r\nSelectScrollDownButton.displayName = Prim.ScrollDownButton.displayName;\r\n\r\nconst selectContentClasses = ",
    "constSelectcontentpopperclasses": ";\r\n\r\nconst selectContentPopperClasses = ",
    "constSelectcontentviewportpopperclasses": ";\r\n\r\nconst selectContentViewportPopperClasses = ",
    "typeSelectcontentpropsComponentpropswithoutreftypeofPrimcontentButtonclasses": ";\r\n\r\ntype SelectContentProps = ComponentPropsWithoutRef<typeof Prim.Content> & {\r\n    buttonClasses?: string; // up/down button classes\r\n};\r\n\r\nconst SelectContent = forwardRef<ElementRef<typeof Prim.Content>, SelectContentProps>(\r\n    ({ className, children, position = ",
    "buttonclassesRestRefPrimportalPrimcontent": ", buttonClasses, ...rest }, ref) => (\r\n        <Prim.Portal>\r\n            <Prim.Content\r\n                ref={ref}\r\n                className={cn(selectContentClasses, position === ",
    "selectcontentpopperclassesClassnamePositionpositionRestSelectscrollupbutton": " && selectContentPopperClasses, className)}\r\n                position={position}\r\n                {...rest}\r\n            >\r\n                <SelectScrollUpButton className={buttonClasses} />\r\n\r\n                <Prim.Viewport className={cn(",
    "position": ", position === ",
    "selectcontentviewportpopperclassesChildrenPrimviewportSelectscrolldownbuttonClassnamebuttonclasses": " && selectContentViewportPopperClasses)}>\r\n                    {children}\r\n                </Prim.Viewport>\r\n\r\n                <SelectScrollDownButton className={buttonClasses} />\r\n            </Prim.Content>\r\n        </Prim.Portal>\r\n    )\r\n);\r\nSelectContent.displayName = Prim.Content.displayName;\r\n\r\nconst SelectLabel = forwardRef<ElementRef<typeof Prim.Label>, ComponentPropsWithoutRef<typeof Prim.Label>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.Label\r\n            ref={ref}\r\n            className={cn(",
    "classnameRestSelectlabeldisplaynamePrimlabeldisplaynameConst": ", className)}\r\n            {...rest}\r\n        />\r\n    )\r\n);\r\nSelectLabel.displayName = Prim.Label.displayName;\r\n\r\nconst selectItemClasses = ",
    "constSelectitemleftclasses": ";\r\n\r\nconst selectItemLeftClasses = ",
    "constSelectitemrightclasses": ";\r\nconst selectItemRightClasses = ",
    "constSelectindileftclasses": ";\r\n\r\nconst selectIndiLeftClasses = ",
    "constSelectindirightclasses": ";\r\nconst selectIndiRightClasses = ",
    "typeSelectitempropsComponentpropswithoutreftypeofPrimitemIndicatorfirst": ";\r\n\r\ntype SelectItemProps = ComponentPropsWithoutRef<typeof Prim.Item> & {\r\n    indicatorFirst?: boolean;\r\n};\r\n\r\nconst SelectItem = forwardRef<ElementRef<typeof Prim.Item>, SelectItemProps>(\r\n    ({ className, children, indicatorFirst, ...rest }, ref) => {\r\n        const itemClasses = indicatorFirst ? selectItemLeftClasses : selectItemRightClasses;\r\n        const indiClasses = indicatorFirst ? selectIndiLeftClasses : selectIndiRightClasses;\r\n        return (\r\n            <Prim.Item\r\n                ref={ref}\r\n                className={cn(selectItemClasses, itemClasses, className)}\r\n                {...rest}\r\n            >\r\n                <span className={cn(",
    "indiclassesPrimitemindicatorCheckiconClassname": ", indiClasses)}>\r\n                    <Prim.ItemIndicator>\r\n                        <CheckIcon className=",
    "primitemindicatorSpanPrimitemtextchildrenprimitemtextPrimitemSelectitemdisplayname": " />\r\n                    </Prim.ItemIndicator>\r\n                </span>\r\n                <Prim.ItemText>{children}</Prim.ItemText>\r\n            </Prim.Item>\r\n        );\r\n    }\r\n);\r\nSelectItem.displayName = Prim.Item.displayName;\r\n\r\nconst SelectSeparator = forwardRef<ElementRef<typeof Prim.Separator>, ComponentPropsWithoutRef<typeof Prim.Separator>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.Separator\r\n            ref={ref}\r\n            className={cn("
  },
  "src/renderer/src/ui/shadcn/shared/index.tsx": {
    "exportConstFixtextarearesizeclasses": ";\r\n\r\nexport const fixTextareaResizeClasses = ",
    "exportConstScrollbargutterclasses": ";\r\nexport const scrollbarGutterClasses = "
  },
  "src/renderer/src/ui/shadcn/sonner.tsx": {
    "constDescriptionclasses": ";\r\n\r\nconst descriptionClasses = ",
    "constClosebuttonclasses": ";\r\n\r\nconst closeButtonClasses = ",
    "constActionbuttonclasses": ";\r\n\r\nconst actionButtonClasses = ",
    "constCancelbuttonclasses": ";\r\n\r\nconst cancelButtonClasses = ",
    "constErrorclasses": ";\r\n\r\nconst errorClasses = ",
    "constInfoclasses": ";\r\n\r\nconst infoClasses = ",
    "constWarningclasses": ";\r\n\r\nconst warningClasses = ",
    "toUseToastFromAnywhere": ";\r\n\r\n/**\r\n * To use toast() from anywhere, even wo/ hooks context, simply add <Toaster /> into <App> component.\r\n * https://sonner.emilkowal.ski - docs\r\n * https://github.com/emilkowalski/sonner\r\n * https://github.com/pacocoursey/next-themes\r\n */\r\nexport function Toaster(props: ToasterProps) {\r\n    return (\r\n        <Sonner\r\n            className="
  },
  "src/renderer/src/ui/shadcn/switch.tsx": {
    "radixuireactswitch": "@radix-ui/react-switch",
    "constThumbclasses": ";\r\n\r\nconst ThumbClasses = "
  },
  "src/renderer/src/ui/shadcn/tabs.tsx": {
    "radixuireacttabs": "@radix-ui/react-tabs",
    "exportConstTabslistwrapclasses": ";\r\n\r\nexport const tabsListWrapClasses = ",
    "constTabslistForwardrefelementreftypeofPrimlistComponentpropswithoutreftypeof": ";\r\n\r\nconst TabsList = forwardRef<ElementRef<typeof Prim.List>, ComponentPropsWithoutRef<typeof Prim.List>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.List ref={ref} className={cn(tabsListClasses, className)} {...rest} />\r\n    )\r\n);\r\nTabsList.displayName = Prim.List.displayName;\r\n\r\nconst tabsTriggerClasses = ",
    "constTabstriggerForwardrefelementreftypeofPrimtriggerComponentpropswithoutreftypeof": ";\r\n\r\nconst TabsTrigger = forwardRef<ElementRef<typeof Prim.Trigger>, ComponentPropsWithoutRef<typeof Prim.Trigger>>(\r\n    ({ className, ...rest }, ref) => (\r\n        <Prim.Trigger ref={ref} className={cn(tabsTriggerClasses, className)} {...rest} />\r\n    )\r\n);\r\nTabsTrigger.displayName = Prim.Trigger.displayName;\r\n\r\nconst tabsContentClasses = "
  },
  "src/renderer/src/ui/shadcn/textarea-auto-grow.tsx": {
    "resizenoneOverflowhiddenGridarea1122": "resize-none overflow-hidden [grid-area:1/1/2/2]",
    "pasteThemeVarsHere": "Paste theme vars here",
    "constTextareaclassesResizenoneOverflowhiddenGridarea1122": ";\r\nconst textareaClasses = \"resize-none overflow-hidden [grid-area:1/1/2/2]\";\r\n\r\n// These are for container padding, font, and border adjustments\r\nexport const containerPaddingFontClasses = ",
    "exampleConstSnapUsesnapshotparsetextSync": "\r\n *  // Example:\r\n *  const snap = useSnapshot(parseText, { sync: true });\r\n * \r\n *  <TextareaAutoGrow\r\n *      value={snap.text}\r\n *      onChange={(e) => parseText.text = e.target.value}\r\n *      rows={1}\r\n *      className=\"min-h-0\"\r\n *      // textareaPaddingFont={cn(textareaPaddingFontDebugClasses, textareaPaddingFontClasses)}\r\n *      placeholder=\"Paste theme vars here\"\r\n *      spellCheck={false}\r\n *  />\r\n *  "
  },
  "src/renderer/src/ui/shadcn/textarea.tsx": {
    "exportConstTextareaForwardrefhtmltextareaelementTextareaprops": ";\r\n\r\nexport const Textarea = forwardRef<HTMLTextAreaElement, TextareaProps>(\r\n    ({ className, ...rest }, ref) => {\r\n        return (\r\n            <textarea className={cn(TextareaClasses, className)} ref={ref} {...rest} />\r\n        );\r\n    }\r\n);\r\nTextarea.displayName = ",
    "exportConstFixtextarearesizeclasses": ";\r\n\r\nexport const fixTextareaResizeClasses = "
  },
  "src/renderer/src/ui/shadcn/theme-toggle-switch.tsx": {
    "focuswithinring1FocuswithinringringRoundedmdFlexItemscenter": "focus-within:ring-1 focus-within:ring-ring rounded-md flex items-center",
    "size4P05": "size-4 p-0.5",
    "px1Py0BorderBorderinputRoundedlnone": "px-1 py-0 border border-input rounded-l-none focus-visible:ring-0",
    "textxsGridGridcols16px_1frItemscenterGapx2": "text-xs grid grid-cols-[16px_1fr] items-center gap-x-2"
  },
  "src/renderer/src/ui/shadcn/tooltip.tsx": {
    "radixuireacttooltip": "@radix-ui/react-tooltip"
  },
  "src/renderer/src/ui/shadcn/tree/shared/classes.tsx": {
    "exportConstFolderselectedclasses": ";\r\n\r\nexport const folderSelectedClasses = ",
    "exportConstFoldericonclasses": ";\r\n\r\nexport const folderIconClasses = ",
    "treeLeafMr2SpaceFor": ";\r\n\r\n// tree leaf (mr-2 space for scroll bar)\r\n\r\nexport const leafBaseClasses = ",
    "exportConstLeafselectedclasses": ";\r\n\r\nexport const leafSelectedClasses = ",
    "exportConstLeaficonclasses": ";\r\n\r\nexport const leafIconClasses = "
  },
  "src/renderer/src/ui/shadcn/tree/shared/utils.tsx": {
    "mapelIdEldatasettreeidElIf": ")].map((el) => ({ id: el.dataset.treeId!, el }));\r\n    if (!expandedNow.length) {\r\n        return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    if (!selectedItemId) {\r\n        return expandedNow[0].id;\r\n    }\r\n\r\n    const selectedIdx = expandedNow.findIndex((item) => item.id == selectedItemId);\r\n    if (selectedIdx !== -1) {\r\n        switch (e.key) {\r\n            case \"ArrowDown\":\r\n            case \"ArrowUp\": {\r\n                const nextIndex = e.key === \"ArrowDown\" ? selectedIdx + 1 : selectedIdx - 1;\r\n                if (nextIndex >= 0 && nextIndex < expandedNow.length) {\r\n                    return expandedNow[nextIndex].id;\r\n                }\r\n                break;\r\n            }\r\n            case \"Enter\": {\r\n                const isFolder = expandedNow[selectedIdx]?.el.dataset.state !== undefined;\r\n                isFolder && expandedNow[selectedIdx]?.el.querySelector<HTMLElement>("
  },
  "src/renderer/src/ui/shadcn/tree/tree.tsx": {
    "radixuireactaccordion": "@radix-ui/react-accordion",
    "uishadcnscrollarea": "@ui/shadcn/scroll-area",
    "parentactive0Focuswithinparentactive1": "[--parent-active:0] focus-within:[--parent-active:1]",
    "shrink0MlautoH4W4Textaccentforeground50": "shrink-0 ml-auto h-4 w-4 text-accent-foreground/50 transition-transform duration-200",
    "datastateclosedanimateaccordionupDatastateopenanimateaccordiondownTransitionallOverflowhidden": "data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down transition-all overflow-hidden",
    "treetreeitem": "Tree.TreeItem",
    "treefolder": "Tree.Folder",
    "treefoldertrigger": "Tree.Folder.Trigger",
    "treefoldercontent": "Tree.Folder.Content",
    "treestateselectedidItemidElseIfSelectemptyspace": ");\r\n            treeState.selectedId = item.id;\r\n        }\r\n    } else {\r\n        if (!selectEmptySpace) {\r\n            return;\r\n        }\r\n        clearPrevSelectedState();\r\n        treeState.selectedId = undefined;\r\n    }\r\n\r\n    function clearPrevSelectedState() {\r\n        if (treeState.selectedId) {\r\n            const prevItem = findTreeItemById(data, treeState.selectedId);\r\n            prevItem && (prevItem.state.selected = false);\r\n        }\r\n    }\r\n\r\n    onSelectChange?.(item);\r\n}\r\n\r\ntype HandleSelectChange = (event: SyntheticEvent<any>, item: DataItemWState | undefined) => void;\r\n\r\ntype TreeItemProps = Prettify<\r\n    & Pick<TreeProps, 'data' | 'IconForFolder' | 'IconForItem'>\r\n    & { IconTextRender: TreeIconAndTextType; }\r\n    & {\r\n        handleSelectChange: HandleSelectChange;\r\n        expandedItemIds: string[];\r\n    }\r\n    & TreeIconOptions\r\n>;\r\n\r\nconst TreeItem = forwardRef<HTMLDivElement, TreeItemProps & HTMLAttributes<HTMLDivElement>>(\r\n    ({ className, data, handleSelectChange, expandedItemIds, IconTextRender, IconForFolder, IconForItem, arrowFirst, hideFolderIcon, ...rest }, ref) => {\r\n        return (\r\n            <div ref={ref} role=\"tree\" className={className} {...rest}>\r\n                <ul>\r\n                    {data instanceof Array\r\n                        ? (data.map((item) => (\r\n                            <li key={item.id}>\r\n                                {item.children\r\n                                    ? (\r\n                                        <A.Root type=\"multiple\" defaultValue={expandedItemIds}>\r\n                                            <A.Item value={",
    "datatreeiditemidDatatreefoldertypetreefolderFolderItemitemIcontextrendericontextrender": "} data-tree-id={item.id} data-tree-folder={TypeTreeFolder}>\r\n                                                <Folder\r\n                                                    item={item}\r\n                                                    IconTextRender={IconTextRender}\r\n                                                    Icon={IconForFolder}\r\n                                                    arrowFirst={arrowFirst}\r\n                                                    hideFolderIcon={hideFolderIcon}\r\n                                                    onClick={(e) => handleSelectChange(e, item)}\r\n                                                />\r\n\r\n                                                <FolderContent className=\"pl-6\">\r\n                                                    <TreeItem\r\n                                                        data={item.children}\r\n                                                        handleSelectChange={handleSelectChange}\r\n                                                        expandedItemIds={expandedItemIds}\r\n                                                        IconTextRender={IconTextRender}\r\n                                                        IconForFolder={IconForFolder}\r\n                                                        IconForItem={IconForItem}\r\n                                                        arrowFirst={arrowFirst}\r\n                                                        hideFolderIcon={hideFolderIcon}\r\n                                                    />\r\n                                                </FolderContent>\r\n                                            </A.Item>\r\n                                        </A.Root>\r\n                                    ) : (\r\n                                        <Leaf\r\n                                            item={item}\r\n                                            IconTextRender={IconTextRender}\r\n                                            onClick={(e) => handleSelectChange(e, item)}\r\n                                            onContextMenu={(e) => handleSelectChange(e, item)}\r\n                                            Icon={IconForItem}\r\n                                        />\r\n                                    )}\r\n                            </li>\r\n                        )))\r\n                        : (\r\n                            <li>\r\n                                <Leaf\r\n                                    item={data}\r\n                                    IconTextRender={IconTextRender}\r\n                                    onClick={(e) => handleSelectChange(e, data)}\r\n                                    Icon={IconForItem}\r\n                                />\r\n                            </li>\r\n                        )\r\n                    }\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n);\r\nTreeItem.displayName = 'Tree.TreeItem';\r\n\r\ntype LeafFolderProps = {\r\n    item: DataItemWState;\r\n    Icon?: TreenIconComponent;\r\n    IconTextRender: TreeIconAndTextType;\r\n};\r\n\r\nconst Leaf = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement> & LeafFolderProps>(\r\n    ({ className, item, IconTextRender, Icon, ...rest }, ref) => {\r\n        const { selected } = useSnapshot(item.state); //console.log("
  },
  "src/renderer/src/ui/shadcn/ui-drop-it-doc.tsx": {
    "fixedInset0GridPlaceitemscenterText5xl": "fixed inset-0 grid place-items-center text-5xl font-bold text-slate-50 bg-slate-800/90 z-[99]"
  },
  "src/renderer/src/utils/base64-to-buffer.ts": {
    "failedToConvertBase64To": "Failed to convert base64 to array buffer."
  },
  "src/renderer/src/utils/compare-rect.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/utils/console-styles.ts": {
    "vvalue": "${v.value}",
    "jsFunctionSome2stylesvValuelifeOut": "js\r\n function some2Styles(v: ValueLife, out: ConsoleStyles = new ConsoleStyles()): ConsoleStyles {\r\n     const isRefStr = v.isRef ? 'true ' : 'false';\r\n     out.add({ name: ' value: ', value: ",
    "cvalueColor8eacf8OutaddName": ", cValue: 'color: #8eacf8' });\r\n     out.add({ name: ' isRef: ', value: isRefStr,       cValue: v.isRef ? 'color: #00a000' : 'color: #ababab' });\r\n     return out;\r\n }\r\n ",
    "thiscolorsAddNameValueCname": ", ...this.colors];\r\n    }\r\n\r\n    add({ name, value, cName, cValue }: { name: string; value: string | number | boolean; cName?: string; cValue?: string; }) {\r\n        this.items.push("
  },
  "src/renderer/src/utils/debug-time.ts": {
    "contenteditorselectorRender": "ContentEditorSelector render",
    "colorMagentaFunctionPrecitiontimeString": ", 'color: magenta');\r\n}\r\n\r\nfunction precitionTime(): string {\r\n    const timeStr = new Intl.DateTimeFormat(\"en-US\", timeFormat).format(Date.now());\r\n    return timeStr;\r\n}\r\n\r\n// const timeFormat: Intl.DateTimeFormatOptions = { hour12: true, hour: 'numeric', minute: 'numeric', second: 'numeric', fractionalSecondDigits: 3 }; // '18:58:44.427'\r\n// function TimeNowdebugStr(): string {\r\n//     return new Date().toLocaleString('en-US', timeFormat);\r\n// }\r\n\r\n// const timeFormat: Intl.DateTimeFormatOptions = { hour12: true, hour: 'numeric', minute: 'numeric', second: 'numeric', fractionalSecondDigits: 3 }; // '18:58:44.427'\r\nconst timeFormat: Intl.DateTimeFormatOptions = { hour12: true, hour: 'numeric', minute: 'numeric', second: 'numeric' }; // '18:58:44.427'\r\n\r\nfunction TimeNowdebugStr(): string {\r\n    const time = performance.now();\r\n    const timeStr = time.toLocaleString('en-US', timeFormat);\r\n\r\n    console.log('TimeNowdebugStr', time);\r\n    return new Date().toLocaleString('en-US', timeFormat);\r\n}\r\n\r\nfunction timeSince() {\r\n    // const endTime = performance.now();\r\n    // const timeElapsed = endTime - startTime;\r\n    const timeElapsed = performance.now();\r\n\r\n    const seconds = Math.floor((timeElapsed / 1000) % 60);\r\n    const minutes = Math.floor((timeElapsed / (1000 * 60)) % 60);\r\n    const hours = Math.floor((timeElapsed / (1000 * 60 * 60)) % 24);\r\n    const milliseconds = Math.floor(timeElapsed % 1000);\r\n\r\n    const formattedTime: string[] = [];\r\n\r\n    if (hours > 0) {\r\n        formattedTime.push(",
    "ifMinutes0Formattedtimepush": ");\r\n    }\r\n    if (minutes > 0) {\r\n        formattedTime.push(",
    "ifSeconds0Formattedtimepush": ");\r\n    }\r\n    if (seconds > 0) {\r\n        formattedTime.push(",
    "ifMilliseconds0Formattedtimelength0": ");\r\n    }\r\n    if (milliseconds > 0 || formattedTime.length === 0) {\r\n        formattedTime.push("
  },
  "src/renderer/src/utils/discard-values.ts": {
    "uncaughtTypeerrorTypeerrorCannotSet": "Uncaught TypeError TypeError: Cannot set property kind of #<FileSystemHandle> which has only a getter"
  },
  "src/renderer/src/utils/double-shortcuts.tsx": {
    "ctrlKPressed": "Ctrl + K pressed!",
    "tRenderAnythingVisuallyImport": "t render anything visually.\r\n};\r\n\r\nimport DoubleShortcut from \"./DoubleShortcut\";\r\n\r\nfunction App() {\r\n    function handleMyDoubleShortcut() {\r\n        console.log("
  },
  "src/renderer/src/utils/env-date-formatter.tsx": {
    "10010101t000000000z": "1001-01-01T00:00:00.000Z"
  },
  "src/renderer/src/utils/error-to-string.tsx": {
    "getsawcontentErrorInvokingRemoteMethod": "'get-saw-content' Error invoking remote method 'invoke-main': >>>Too many controls",
    "tooManyControls": "Too many controls"
  },
  "src/renderer/src/utils/image-to-blob.ts": {
    "couldNotGet2dContext": "Could not get 2d context"
  },
  "src/renderer/src/utils/load-file-as-blob.ts": {
    "failedToLoadFile": "Failed to load file"
  },
  "src/renderer/src/utils/merge-options.ts": {
    "objectObject": "[object Object]"
  },
  "src/renderer/src/utils/os-utils-windows-unix.ts": {
    "tanam5sharetohidpmatnetworktesttestfilestesttxt": "\\\\\\\\TANAM5\\\\\\\\share-to-hid\\\\pmat-network-test\\\\test-files\\\\test.txt",
    "consolelog": ");\r\n    console.log(",
    "aTanam5sharetohidpmatnetworktesttestfilestesttxtBTounixaC": ");\r\n\r\n    a = '\\\\\\\\TANAM5\\\\\\\\share-to-hid\\\\pmat-network-test\\\\test-files\\\\test.txt';\r\n    b = toUnix(a);\r\n    c = toWindows(b);\r\n    console.log("
  },
  "src/renderer/src/utils/os-utils.ts": {
    "file1txt": "file (1).txt"
  },
  "src/renderer/src/utils/prepend-url-path.ts": {
    "pmat24lite1json": "/pmat24-lite/1.json"
  },
  "src/renderer/src/utils/test-fnames-common-path.ts": {
    "findCommonDirectoryPath": "Find common directory path",
    "homeuser1tmpcoveragetest": "/home/user1/tmp/coverage/test",
    "homeuser1tmpcovertoperator": "/home/user1/tmp/covert/operator",
    "homeuser1tmpcovenmembers": "/home/user1\\\\tmp\\\\coven/members",
    "commonPath1IsHomeuser1tmp": "); // Common path 1 is: /home/user1/tmp\r\n    console.log(",
    "commonPath2IsConsolelog": "); // Common path 2 is: \r\n    console.log(",
    "commonPath3IsHomeuser1tmp": "); // Common path 3 is: home/user1/tmp\r\n    console.log("
  },
  "src/renderer/src/utils/theme-apply.ts": {
    "preferscolorschemeDark": "(prefers-color-scheme: dark)"
  },
  "src/renderer/src/utils/util-hooks/atomsX.ts": {
    "primitiveatomtkeyExportTypeAtomizewithtypetValue": "]: PrimitiveAtom<T[key]>;\r\n};\r\n\r\nexport type AtomizeWithType<T, Value> = {\r\n    [key in keyof T & string as "
  },
  "src/renderer/src/utils/util-hooks/atomWithListeners.ts": {
    "atomwithlistenersPathts": "atomWithListeners path:*.ts"
  },
  "src/renderer/src/utils/util-hooks/spy-all-icons.tsx": {
    "m2Bgsky5070Bordersku500BorderRounded": "m-2 bg-sky-50/70 border-sku-500 border rounded shadow"
  },
  "src/renderer/src/utils/util-hooks/spy-test-all-icons.tsx": {
    "jsGetFunctionLocation": "js get function location",
    "accessFunctionLocationProgrammatically": "Access function location programmatically",
    "runtimegetproperties": "Runtime.getProperties",
    "eachIconHasFunctionlocationProperty": "Each icon has [[FunctionLocation]] property, but it is accessible from trace only (i.e. devtools-protocol), not from code.",
    "fontsize055rem": "font-size: 0.55rem"
  },
  "src/renderer/src/utils/util-hooks/spy-test-all-svg-symbols.tsx": {
    "gridGridcolsrepeatautofillminmax064pxGap2": "grid grid-cols-[repeat(auto-fill,minmax(0,64px))] gap-2",
    "size16Bg6c7a6aBordergray700Border4Rounded": "size-16 bg-[#6c7a6a] border-gray-700 border-4 rounded",
    "wfullHfullFilldeb8f7StrokeblackStroke5": "w-full h-full fill-[#deb8f7] stroke-black stroke-[.5]",
    "minh2remText65remTextforegroundTextcenter": "min-h-[2rem] text-[.65rem] text-foreground text-center",
    "childrenConstIdsFontelchildrenFontelchildren": ")?.children;\r\n            const ids = (fontElChildren ? [...fontElChildren] : []).map(item => item.id);\r\n            setIds(ids);\r\n        }, []\r\n    );\r\n\r\n    if (!ids.length) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className={classNames(\"grid grid-cols-[repeat(auto-fill,minmax(0,64px))] gap-2\", className)} {...rest}>\r\n            {ids.map(\r\n                (id, idx) => (\r\n                    <div key={idx}>\r\n                        <div className=\"size-16 bg-[#6c7a6a] border-gray-700 border-4 rounded\">\r\n                            <svg className=\"w-full h-full fill-[#deb8f7] stroke-black stroke-[.5]\">\r\n                                <title>{",
    "titleUseXlinkhref": "}</title>\r\n                                <use xlinkHref={"
  },
  "src/renderer/src/utils/util-hooks/use-memo-one.tsx": {
    "usememoonecacheMissDepsoCachedepso": "useMemoOne.cache miss: deps:%o cache.deps:%o"
  },
  "src/renderer/src/utils/util-hooks/use-resize-observer/index.ts": {
    "mNotForcingConsumersTo": "m not\n// forcing consumers to use a specific TS version.\nexport type ResizeObserverBoxOptions =\n    | \"border-box\"\n    | \"content-box\"\n    | \"device-pixel-content-box\";\n\ndeclare global {\n    interface ResizeObserverEntry {\n        readonly devicePixelContentBoxSize: ReadonlyArray<ResizeObserverSize>;\n    }\n}\n\nexport type RoundingFunction = (n: number) => number;\n\nexport function useResizeObserver<T extends Element>(\n    opts: {\n        ref?: RefObject<T> | T | null | undefined;\n        onResize?: ResizeHandler;\n        box?: ResizeObserverBoxOptions;\n        round?: RoundingFunction;\n    } = {}\n): HookResponse<T> {\n    // Saving the callback as a ref. With this, I don",
    "sResizeobserverConstOnresizeOptsonresize": "s ResizeObserver.\n    const onResize = opts.onResize;\n    const onResizeRef = useRef<ResizeHandler | undefined>(undefined);\n    onResizeRef.current = onResize;\n    const round = opts.round || Math.round;\n\n    // Using a single instance throughout the hook",
    "sCalledWheneverANew": "s called whenever a new\n    // element could be resolved based on the ref option. It also has a cleanup\n    // function.\n    const refCallback = useResolvedElement<T>(\n        useCallback(\n            (element) => {\n                // We only use a single Resize Observer instance, and we"
  },
  "src/renderer/src/utils/util-hooks/use-resize-observer/utils/extractSize.ts": {
    "reOnlyUsingTheFirst": "re only using the first element of the size sequences, until future versions of the spec solidify on how\n// exactly it",
    "mNotExactlyClearOn": "m not exactly clear on what this means, especially when you consider a later section stating the following:\n// > This section is non-normative. An author may desire to observe more than one CSS box.\n// > In this case, author will need to use multiple ResizeObservers.\n// (https://drafts.csswg.org/resize-observer/#resize-observer-interface)\n// Which is clearly not how current browser implementations behave, and seems to contradict the previous quote.\n// For this reason I decided to only return the requested size,\n// even though it seems we have access to results for all box types.\n// This also means that we get to keep the current api, being able to return a simple { width, height } pair,\n// regardless of box option.\nexport default function extractSize(\n    entry: ResizeObserverEntry,\n    boxProp: \"borderBoxSize\" | \"contentBoxSize\" | \"devicePixelContentBoxSize\",\n    sizeType: keyof ResizeObserverSize\n): number | undefined {\n    if (!entry[boxProp]) {\n        if (boxProp === \"contentBoxSize\") {\n            // The dimensions in `contentBoxSize` and `contentRect` are equivalent according to the spec.\n            // See the 6th step in the description for the RO algorithm:\n            // https://drafts.csswg.org/resize-observer/#create-and-populate-resizeobserverentry-h\n            // > Set this.contentRect to logical this.contentBoxSize given target and observedBox of \"content-box\".\n            // In real browser implementations of course these objects differ, but the width/height values should be equivalent.\n            return entry.contentRect[sizeType === \"inlineSize\" ? \"width\" : \"height\"];\n        }\n\n        return undefined;\n    }\n\n    // A couple bytes smaller than calling Array.isArray() and just as effective here.\n    return entry[boxProp][0]\n        ? entry[boxProp][0][sizeType]\n        : // TS complains about this, because the RO entry type follows the spec and does not reflect Firefox"
  },
  "src/renderer/src/utils/util-hooks/use-resize-observer/utils/useResolvedElement.ts": {
    "veBeenMoreStreamlinedWith": "ve been more streamlined with internal state instead of abusing\n// refs to such extent, but then composing hooks and components could not opt out of unnecessary renders.\nexport default function useResolvedElement<T extends Element>(\n    subscriber: (element: T) => SubscriberResponse,\n    refOrElement?: T | RefObject<T> | null\n): RefCallback<T> {\n    const lastReportRef = useRef<{\n        element: T | null;\n        subscriber: typeof subscriber;\n        cleanup?: SubscriberResponse;\n    } | null>(null);\n    const refOrElementRef = useRef<typeof refOrElement>(null);\n    refOrElementRef.current = refOrElement;\n    const cbElementRef = useRef<T | null>(null);\n\n    // Calling re-evaluation after each render without using a dep array,\n    // as the ref object",
    "veChangedSinceTheLast": "ve changed since the last render.\n    useEffect(() => {\n        evaluateSubscription();\n    });\n\n    const evaluateSubscription = useCallback(() => {\n        const cbElement = cbElementRef.current;\n        const refOrElement = refOrElementRef.current;\n        // Ugly ternary. But smaller than an if-else block.\n        const element: T | null = cbElement\n            ? cbElement\n            : refOrElement\n                ? refOrElement instanceof Element\n                    ? refOrElement\n                    : refOrElement.current\n                : null;\n\n        if (\n            lastReportRef.current &&\n            lastReportRef.current.element === element &&\n            lastReportRef.current.subscriber === subscriber\n        ) {\n            return;\n        }\n\n        if (lastReportRef.current && lastReportRef.current.cleanup) {\n            lastReportRef.current.cleanup();\n        }\n        lastReportRef.current = {\n            element,\n            subscriber,\n            // Only calling the subscriber, if there"
  },
  "src/renderer/src/utils/x-devtool-install-msg-block.ts": {
    "downloadTheReactDevtools": "Download the React DevTools"
  },
  "src/renderer/src/vite-typescript/electron-env.d.ts": {
    "treeDistIndexhtmlDistelectronMainjs": "tree\n         * ├─┬─┬ dist\n         * │ │ └── index.html\n         * │ │\n         * │ ├─┬ dist-electron\n         * │ │ ├── main.js\n         * │ │ └── preload.js\n         * │\n         * "
  },
  "src/renderer/src/vite-typescript/lib.es5.d.ts": {
    "arrayprototypefilter": "Array.prototype.filter()"
  },
  "src/renderer/src/xternal-to-main/2-gates-in-client-as-atoms/1-ipc-react-listener.tsx": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/xternal-to-main/2-gates-in-client-as-atoms/2-gate-react-listener-atom.ts": {
    "caseDarkmodeActive": "case dark-mode, active"
  },
  "src/renderer/src/xternal-to-main/2-gates-in-client-as-atoms/3-to-main-apis.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "hasmain": "hasMain():",
    "nomainapi": "no.main.api"
  },
  "src/renderer/src/xternal-to-main/2-gates-in-client-as-atoms/commands-to-main/1-renderer-to-main-calls.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/xternal-to-main/2-gates-in-client-as-atoms/commands-to-main/2-render-to-main-invokes.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/renderer/src/xternal-to-main/2-gates-in-client-as-atoms/commands-to-main/3-invoke-load-files.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/shared/ipc-types/3-main-to-render-call-types.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/shared/ipc-types/9-file-content.ts": {
    "createAsAManualManifest": "create as a manual manifest"
  },
  "src/shell/app/0-app-ready/0-all-start.ts": {
    "electrontoolkitutils": "@electron-toolkit/utils",
    "shell1startmainwindow8inifileoptions": "@shell/1-start-main-window/8-ini-file-options",
    "comelectron": "com.electron"
  },
  "src/shell/app/1-start-main-window/2-init-app-window.ts": {
    "electrontoolkitutils": "@electron-toolkit/utils"
  },
  "src/shell/app/1-start-main-window/3-1-listeners-of-app-window.ts": {
    "shell2electronglobals": "@shell/2-electron-globals"
  },
  "src/shell/app/1-start-main-window/3-2-listeners-of-app.ts": {
    "electrontoolkitutils": "@electron-toolkit/utils",
    "sCommonToRecreateA": "s common to re-create a window in the app when the\r\n                // dock icon is clicked and there are no other windows open.\r\n                if (BrowserWindow.getAllWindows().length === 0) {\r\n                    createAppWindow();\r\n                }\r\n            }\r\n        );\r\n\r\n        // Quit when all windows are closed, except on macOS. There, it"
  },
  "src/shell/app/1-start-main-window/3-3-listeners-of-render-calls.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/shell/app/1-start-main-window/8-ini-file-options.ts": {
    "shell3utilsmain": "@shell/3-utils-main"
  },
  "src/shell/app/3-utils-main/1-electron-bounds.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/shell/app/3-utils-main/5-link-target.ts": {
    "thisFunctionOnlyWorksOn": "This function only works on Windows.",
    "linkpath": "${linkPath}",
    "powershellexe": "powershell.exe",
    "isSymbolicLinkTheSame": "is symbolic link the same as Windows shotcut?",
    "howToGetDestinationOf": "How to get destination of Windows .lnk file?",
    "makeMethod2AsTypescript": "Make Method 2 as typescript function that receive link path as parameter",
    "makeAlternativeExampleAsTypescript": "Make alternative example as typescript function that receive link path as parameter",
    "howToCheckInChrome": "how to check in Chrome browser that path is Windows link or folder?",
    "tryConstStdoutAwaitExecpromisecommand": ";\r\n\r\n    try {\r\n        const { stdout } = await execPromise(command, { 'shell': 'powershell.exe' });\r\n        return stdout.trim(); // Trim any trailing whitespace from the output\r\n    } catch (err: any) {\r\n        if (err.stderr) {\r\n            throw new Error("
  },
  "src/shell/app/3-utils-main/6-compare-rect.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/shell/app/3-utils-main/8-error-to-string.tsx": {
    "getsawcontentErrorInvokingRemoteMethod": "'get-saw-content' Error invoking remote method 'invoke-main': >>>Too many controls",
    "tooManyControls": "Too many controls"
  },
  "src/shell/preload/index.ts": {
    "electrontoolkitpreload": "@electron-toolkit/preload",
    "exposeTmapi": "Expose tmApi:",
    "exposedTmapi": "Exposed tmApi:"
  },
  "src/shell/preload/tm-index.d.ts": {
    "electrontoolkitpreload": "@electron-toolkit/preload"
  },
  "src/shell/xternal-to-renderer/1-gates-in-main/1-dispatch-in-main-from-renderer-calls.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "shell2electronglobals": "@shell/2-electron-globals",
    "shell1startmainwindow": "@shell/1-start-main-window"
  },
  "src/shell/xternal-to-renderer/1-gates-in-main/2-dispatch-in-main-from-renderer-invokes.ts": {
    "sharedipctypes": "@shared/ipc-types"
  },
  "src/shell/xternal-to-renderer/1-gates-in-main/3-send-in-main-to-renderer.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "shell1startmainwindow": "@shell/1-start-main-window"
  },
  "src/shell/xternal-to-renderer/2-commands-in-main/0-all/1-set-saw-mode-on-main.ts": {
    "shell2electronglobals": "@shell/2-electron-globals",
    "sharedipctypes": "@shared/ipc-types",
    "shell3utilsmain": "@shell/3-utils-main"
  },
  "src/shell/xternal-to-renderer/2-commands-in-main/0-all/2-set-saw-position-on-main.ts": {
    "shell3utilsmain": "@shell/3-utils-main",
    "shell2electronglobals": "@shell/2-electron-globals"
  },
  "src/shell/xternal-to-renderer/2-commands-in-main/2-files/1-open-file-dlg.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "openFolder": "Open Folder",
    "openFiles": "Open Files"
  },
  "src/shell/xternal-to-renderer/2-commands-in-main/2-files/2-save-file.ts": {
    "shell3utilsmain": "@shell/3-utils-main",
    "sharedipctypes": "@shared/ipc-types",
    "filename": "${fileName}",
    "saveWoDir": "save wo/ dir"
  },
  "src/shell/xternal-to-renderer/2-commands-in-main/2-files/3-delete-file.ts": {
    "shell3utilsmain": "@shell/3-utils-main",
    "cannotDeleteDirectory": "Cannot delete directory",
    "cannotDeleteFile": "Cannot delete file"
  },
  "src/shell/xternal-to-renderer/2-commands-in-main/2-files/4-file-names.ts": {
    "shell3utilsmain": "@shell/3-utils-main",
    "name123ext": "name-123.ext",
    "name124ext": "name-124.ext",
    "thisIsADirectory": "This is a directory",
    "cannotGenerateUniqueFilename": "Cannot generate unique filename"
  },
  "src/shell/xternal-to-renderer/2-commands-in-main/2-files/5-reveal-in-explorer.ts": {
    "absolutepath": "${absolutePath}",
    "fileNotFound": "File not found",
    "errorStdoutStderrIfError": ",\r\n        (error, stdout, stderr) => {\r\n            if (error) {\r\n                console.error(",
    "returnConsolelog": ");\r\n                return;\r\n            }\r\n            console.log(",
    "consoleerror": ");\r\n            console.error("
  },
  "src/shell/xternal-to-renderer/2-commands-in-main/2-files/8-load-win32-files.ts": {
    "sharedipctypes": "@shared/ipc-types",
    "shell3utilsmain": "@shell/3-utils-main",
    "sASingleFileFrom": "s a single file from drag and drop\r\n        filenames[0] = await getLinkTargetPath(filenames[0]);\r\n    }\r\n\r\n    const ctx: CollectCtx = { numberOfLevels: 1, allowedSubfolders: [\"a\", \"b\", \"c\"], rv: [] };\r\n    collectNamesRecursively(filenames, 0, ctx);\r\n\r\n    allowedExt && ctx.rv.forEach((item) => item.notOur = !isAllowedExt(item.fname, allowedExt));\r\n\r\n    ctx.rv.forEach(\r\n        (fileContent, idx) => { // read file content\r\n            fileContent.idx = idx;\r\n            if (fileContent.failed || fileContent.notOur) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const fullName = join(fileContent.fpath!, fileContent.fname);\r\n                fileContent.rawLoaded = readFileSync(fullName).toString();\r\n            } catch (error) {\r\n                fileContent.rawLoaded = error instanceof Error ? error.message : JSON.stringify(error);\r\n                fileContent.failed = true;\r\n            }\r\n        }\r\n    );\r\n\r\n    let emptyFolder = ",
    "ifCtxrvlengthFilenameslength1Try": ";\r\n\r\n    if (!ctx.rv.length && filenames.length === 1) {\r\n        try {\r\n            if (statSync(filenames[0]).isDirectory()) {\r\n                emptyFolder = filenames[0];\r\n            }\r\n        } catch (error) {\r\n            console.error(error); // this should be folder and will not happen\r\n        }\r\n    }\r\n\r\n    return { filesCnt: ctx.rv, emptyFolder };\r\n}\r\n\r\ntype CollectCtx = {\r\n    numberOfLevels: number; // number of levels to collect: 1 - only root as allowedSubfolders, 2 - root and subfolders of 1st level and allowedSubfolders\r\n    allowedSubfolders: string[]; // allowed subfolders to collect at level 0\r\n    rv: MainFileContent[];\r\n};\r\n\r\nasync function collectNamesRecursively(filenames: string[], level: number, ctx: CollectCtx) {\r\n    for (const fname of (filenames || [])) {\r\n        const filename = normalize(fname);\r\n\r\n        const newItem: MainFileContent = makeNewItem(filename);\r\n        try {\r\n            const st = statSync(filename);\r\n\r\n            if (st.isFile()) {\r\n                newItem.fmodi = st.mtimeMs;\r\n                newItem.size = st.size;\r\n                ctx.rv.push(newItem);\r\n            }\r\n            else if (st.isDirectory()) {\r\n                const handleThisDir = level === ctx.numberOfLevels - 1 || ctx.allowedSubfolders.includes(basename(filename));\r\n                if (handleThisDir) {\r\n                    const entries = readdirSync(filename).map(\r\n                        (entry) => join(filename, entry)\r\n                    );\r\n                    collectNamesRecursively(entries, level + 1, ctx);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            newItem.rawLoaded = error instanceof Error ? error.message : JSON.stringify(error);\r\n            newItem.failed = true;\r\n            ctx.rv.push(newItem);\r\n        }\r\n    }\r\n}\r\n\r\nfunction makeNewItem(filename: string): MainFileContent {\r\n    return {\r\n        idx: 0,\r\n        fname: basename(filename),\r\n        fpath: dirname(filename),\r\n        fmodi: 0,\r\n        size: 0,\r\n        rawLoaded: ",
    "failedFalseNotourFalseNewfile": ",\r\n        failed: false,\r\n        notOur: false,\r\n        newFile: false,\r\n        newAsManual: false,\r\n        fromMain: true,\r\n        webFsItem: null,\r\n    };\r\n}\r\n\r\nfunction isAllowedExt(filename: string | undefined, allowedExt: string[]): boolean | undefined { // the same as in renderer\r\n    const ext = extname(filename || ",
    "replace": ").replace("
  },
  "src/shell/xternal-to-renderer/2-commands-in-main/3-test-inuse/0-all.ts": {
    "sharedipctypes9testinuse": "@shared/ipc-types/9-test-inuse",
    "sharedipctypes": "@shared/ipc-types",
    "shell3utilsmain": "@shell/3-utils-main",
    "fileshortfname": "${file.shortfname}",
    "fullname": "${fullName}",
    "errortostringerr": "${errorToString(err)}",
    "tryIfDeletefileAwaitFsrmfullname": ";\r\n\r\n    try {\r\n        if (deleteFile) {\r\n            await fs.rm(fullName, { force: true });\r\n            return;\r\n        }\r\n\r\n        if (inTest) {\r\n            if (!file.rawCnt) {\r\n                throw new Error(",
    "awaitFsmkdircachefolderRecursiveTrueAwait": ");\r\n            }\r\n\r\n            await fs.mkdir(cacheFolder, { recursive: true });\r\n            await fs.writeFile(fullName, file.rawCnt, 'utf8'); // Overwrites by default\r\n        } else {\r\n            let stats: Stats | undefined;\r\n            try {\r\n                stats = await fs.stat(fullName);\r\n            } catch (error) {\r\n                if (error instanceof Error && 'code' in error && error.code === 'ENOENT') {\r\n                    return;\r\n                } else {\r\n                    throw error;\r\n                }\r\n            }\r\n            if (stats.isFile()) {\r\n                await fs.rm(fullName, { force: true });\r\n            }\r\n        }\r\n    } catch (err) {\r\n        return {\r\n            unid: file.unid,\r\n            error: "
  },
  "src/shell/xternal-to-renderer/2-commands-in-main/3-test-inuse/8-os-utils.ts": {
    "shell3utilsmain": "@shell/3-utils-main",
    "cachefolder": "${cacheFolder}",
    "localappdataIsNotSet": "LOCALAPPDATA is not set",
    "exportFunctionGetcacheintestfolderStringReturn": ");\r\n}\r\n\r\nexport function getCacheInTestFolder(): string {\r\n    return ",
    "listFilesExportAsyncFunction": ";\r\n}\r\n\r\n// list files\r\n\r\nexport async function listFiles(cacheFolder: string): Promise<string[]> {\r\n    const rv: string[] = [];\r\n\r\n    try {\r\n        const files = await fs.readdir(cacheFolder); // Returns an array of filenames\r\n\r\n        for await (const file of files) {\r\n            const fullname = ",
    "constStatsAwaitFsstatfullnameIf": ";\r\n            const stats = await fs.stat(fullname);\r\n            if (stats.isFile()) {\r\n                rv.push(fullname);\r\n            }\r\n        }\r\n\r\n    } catch (err) {\r\n        console.error(",
    "errReturnRvDeleteFolder": ", err);\r\n    }\r\n\r\n    return rv;\r\n}\r\n\r\n// delete folder\r\n\r\nexport async function deleteFolder(cacheFolder: string): Promise<string | undefined> {\r\n    try {\r\n        const stats = await fs.stat(cacheFolder);\r\n        if (stats.isDirectory()) {\r\n            await fs.rm(cacheFolder, { recursive: true, force: true });\r\n        }\r\n    } catch (err) {\r\n        if (isErrorWithCode(err) && err.code === 'ENOENT') {\r\n            return;\r\n        }\r\n        return "
  },
  "src/shell/xternal-to-renderer/7-napi-calls/0-addon.ts": {
    "importmetaurl": "${import.meta.url}"
  },
  "src/shell/xternal-to-renderer/7-napi-calls/2-get-window-icon.ts": {
    "noGwindowicongetter": "no gWindowIconGetter"
  },
  "src/shell/xternal-to-renderer/7-napi-calls/3-get-window-controls.ts": {
    "shell3utilsmain": "@shell/3-utils-main"
  },
  "src/shell/xternal-to-renderer/7-napi-calls/4-get-window-mani.ts": {
    "shell3utilsmain": "@shell/3-utils-main",
    "returnMaintorendererTypeM2rdetectionprogressProgress": " }));\r\n                                return;\r\n                            }\r\n\r\n                            mainToRenderer({ type: 'm2r:detection-progress', progress: res.progress });\r\n                            return;\r\n                        }\r\n\r\n                        if (res.type === 'error') {\r\n                            reject(makeTypedError({ sub: res.error }));\r\n                            return;\r\n                        }\r\n\r\n                        if (res.type === 'data') {\r\n                            resolve(res.xml);\r\n                            return;\r\n                        }\r\n\r\n                        reject(makeTypedError({ error: 'build-wo-mani', extra: "
  },
  "src/shell/xternal-to-renderer/7-napi-calls/5-get-screenshots.ts": {
    "objhwnd": "${obj.hwnd}",
    "imageformat": "${imageFormat}",
    "exportAsyncFunctionTest08_gettoplevelwindowsscreenshotswindowsinfosTlwinfo": "\r\nexport async function test08_GetTopLevelWindowsScreenshots(windowsInfos: TlwInfo[]) {\r\n    const sHWnds = windowsInfos.map(obj => ",
    "joinConstDesiredwidth300Const": ").join(',');\r\n    const desiredWidth = 300;\r\n    const imageFormat = \"jpg\"\r\n    const sParams = ",
    "letScreenshotsAwaitGettoplevelwindowsscreenshotssparamsFswritefilesynctoplevelwindowsscreenshotsjson": ";\r\n\r\n    let screenshots = await getTopLevelWindowsScreenshots(sParams);\r\n    fs.writeFileSync('TopLevelWindowsScreenshots.json', JSON.stringify(screenshots), 'utf8');\r\n}\r\n"
  },
  "src/shell/xternal-to-renderer/7-napi-calls/7-get-window-pos.ts": {
    "shell3utilsmain": "@shell/3-utils-main",
    "dnderror1": "dnd.error 1",
    "status": "{\"status\":",
    "dndutilityRes": "dnd.utility res",
    "dnderror2": "dnd.error 2",
    "callinitfisrt": "call.init.fisrt",
    "returnTryConstTempfixData": ";\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const tempFix = (data || '').replace(/{status:/g, '{\"status\":');\r\n                const res = JSON.parse(tempFix || '') as DragAndDropResult;\r\n\r\n                if (res.status === 'progress') {\r\n                    debouncedSendToClient(res);\r\n                    //printProgressDebounced(res);\r\n                } else {\r\n                    console.log('dnd.utility res', res);\r\n                }\r\n            }\r\n            catch (error) {\r\n                error = ",
    "returnErrorExportFunctionDndactionactionname": ";\r\n            }\r\n        }\r\n    );\r\n\r\n    return error;\r\n}\r\n\r\nexport function dndAction(actionName: 'move' | 'stop'): void {\r\n    dragAndDropper?.[actionName](''); // console.log('call.init.fisrt');\r\n}\r\n\r\nlet dragAndDropper: DragAndDropper | null = null;\r\n\r\n// Call to client\r\n\r\nexport type PosTrackerCbType = Prettify<\r\n    & PointXY                 // Current mouse coordinates converted to the client area of the target window.\r\n    & {\r\n        isInside: boolean;    // Is mouse inside the target window\r\n    }\r\n>;\r\n\r\nfunction sendToClient(res: TargetPosition) {\r\n    const { point: { x, y }, isInside } = res;\r\n    mainToRenderer({\r\n        type: 'm2r:position-progress',\r\n        progress: {\r\n            x: Math.round(x),\r\n            y: Math.round(y),\r\n            isInside: isInside,\r\n        }\r\n    });\r\n}\r\n\r\nconst debouncedSendToClient = debounce(sendToClient, 100);\r\n\r\n// Print utilities\r\n\r\nfunction Rect4ToString(rect: Rect4) {\r\n    const [l, t, r, b] = Object.values(rect).map((v, idx) => ",
    "idx0Idx2Padstart": "[idx === 0 || idx === 2 ? 'padStart' : 'padEnd'](4, ' '));\r\n    return ",
    "constPrintprogressdebouncedDebounceFunctionPrintprogressres": ";\r\n}\r\n\r\nconst printProgressDebounced = debounce(\r\n    function printProgress(res: TargetPosition) {\r\n        const { point: { x, y }, isInside } = res;\r\n        console.log(\r\n            ",
    "isinsideInOut": ",\r\n            isInside ? ' IN' : 'OUT',\r\n            ",
    "padstart4": ".padStart(4, ' '),\r\n            "
  },
  "src/shell/xternal-to-renderer/7-napi-calls/9-types-napi-error.ts": {
    "builderrorincompatiblepm": ">>>build-error:::incompatiblePM",
    "atTheEndToDistinguish": "; // ::: at the end to distinguish from call with extra\r\n    }\r\n    if (params.extra) {\r\n        return ",
    "return": ";\r\n    }\r\n    return ",
    "exportTypeTypederrorTypedNapicallerror": ";\r\n}\r\n\r\nexport type TypedError = {\r\n    typed: NapiCallError;\r\n    extra: string | undefined;\r\n    sub?: BrowserExtErrors | ''; // error ruturned from ManifestForWindowCreatorResult as 'incompatiblePM' from '>>>build-error:::incompatiblePM'\r\n};\r\n\r\nexport function splitTypedError(errorStr: string): TypedError {\r\n    const typed = errorStr.split('>>>').at(-1) as NapiCallError;\r\n\r\n    if (!typed) {\r\n        return {\r\n            typed: 'unknown',\r\n            extra: errorStr,\r\n        };\r\n    }\r\n\r\n    const parts = typed.split(':::');\r\n    if (parts.length === 2) {\r\n        return {\r\n            typed: parts[0] as NapiCallError,\r\n            extra: parts[1],\r\n            sub: '',\r\n        };\r\n    } else {\r\n        return {\r\n            typed: parts[0] as NapiCallError,\r\n            extra: '',\r\n            sub: parts[1] as BrowserExtErrors,\r\n        };\r\n    }\r\n}\r\n\r\nexport function typedErrorToString(typedError: TypedError): string {\r\n    return "
  },
  "src/shell/xternal-to-renderer/7-napi-calls/pmat-plugin-types/1-get-target-window.ts": {
    "000000000014103e": "000000000014103E",
    "ipcinvoketsElectronwindowmonitorVisualStudioCode": "ipc-invoke.ts - electron-window-monitor - Visual Studio Code"
  },
  "src/shell/xternal-to-renderer/7-napi-calls/pmat-plugin-types/5-get-screenshots.ts": {
    "000000000014103e": "000000000014103E",
    "ipcinvoketsElectronwindowmonitorVisualStudioCode": "ipc-invoke.ts - electron-window-monitor - Visual Studio Code"
  },
  "src/shell/xternal-to-renderer/7-napi-calls/pmat-plugin-types/6-highlight-control.ts": {
    "noOpenBrowser": "no open browser",
    "hwnd12345Rectleft100right200top100bottom200": "{\"hwnd\":\"12345\", \"rect\":{\"left\":100,\"right\":200,\"top\":100,\"bottom\":200}}",
    "letHighlighterNewWindowcontrolhighlighterHighlighterhighlighthwnd12345": "\r\n *      let highlighter = new WindowControlHighlighter();\r\n *      highlighter.highlight('{\"hwnd\":\"12345\", \"rect\":{\"left\":100,\"right\":200,\"top\":100,\"bottom\":200}}');\r\n * "
  },
  "src/shell/xternal-to-renderer/7-napi-calls/pmat-plugin-types/6-highlight-window.ts": {
    "howToGetWindows11": "How to get Windows 11 window rectangle? GetWindowRect returns the wrong rectangle the is somehow inflated. Why?"
  }
}